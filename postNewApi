import axios from 'axios';

// Create axios instance with custom configuration
const api = axios.create({
  baseURL: 'https://10.191.171.12:5443/PyPortal/',
  timeout: 100000,
  headers: {
    'Content-Type': 'application/json',
  }
});

// Modified postMessage to always send data under "message"
export const postMessage = (data) => {
  if (typeof data === 'string') {
    return api.post('EIS-GINI/', { "message": data }, { timeout: 100000 });
  }
  if (Array.isArray(data)) {
    return api.post('EIS-GINI/', { "message": data }, { timeout: 100000 });
  }
  if (typeof data === 'object' && data !== null) {
    if (data.hasOwnProperty('message')) {
      return api.post('EIS-GINI/', data, { timeout: 100000 });
    }
    return api.post('EIS-GINI/', { "message": data }, { timeout: 100000 });
  }
  return api.post('EIS-GINI/', { "message": data }, { timeout: 100000 });
};

// All other API functions remain unchanged
export const getPost = () => {
  return api.get('EIS-GINI/', { timeout: 100000 });
};

export const getServiceSys = () => {
  return api.get('EISHome/servicewise_sys/');
};

export const getServiceExp = () => {
  return api.get('EISHome/servicewise_exp/');
};

export const getIpwiseSys = () => {
  return api.get('EISHome/ipwise_sys/');
};

export const getIpwiseExp = () => {
  return api.get('EISHome/ipwise_exp/');
};

export const getPortwiseSys = () => {
  return api.get('EISHome/portwise_sys/');
};

export const getPortwiseExp = () => {
  return api.get('EISHome/portwise_exp/');
};

export const getServiceWiseExp5 = () => {
  return api.get('EISHome/servicewise_top5_exp/');
};

export const getServiceWiseSys5 = () => {
  return api.get('EISHome/servicewise_top5_sys/');
};

export const getIpWiseExp5 = () => {
  return api.get('EISHome/ipwise_exp_top5/');
};

export const getIpWiseSys5 = () => {
  return api.get('EISHome/ipwise_sys_top5/');
};

export const getPortWiseExp5 = () => {
  return api.get('EISHome/portwise_top5_exp/');
};

export const getPortWiseSys5 = () => {
  return api.get('EISHome/portwise_top5_sys/');
};

export const getFARExpires = () => {
  return api.get('EISHome/farExpiresNext5M/');
};

// NEW: Add the FAR details specific API function
export const getFARDetailsSpecific = async (dataFilter) => {
  try {
    const userId = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');

    const response = await api.post('EISHome/farSpecificAll/', {
      "data_filter": dataFilter,
      "userId": userId,
      "password": password
    });
    return response;
  } catch (error) {
    console.error('Could not fetch FAR details:', error);
    throw error;
  }
};

export const postGraphDownload = async ({ path, time }) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const payload = {
      uid,
      password,
      time,
      download: true
    };
    const response = await api.post(path, payload);
    return response;
  } catch (error) {
    console.error("Error in postGraphDownload:", error);
    throw error;
  }
};

// Time-based post functions remain unchanged
export const postServiceWiseExp5 = async (time) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post('EISHome/servicewise_top5_FiveM/EXP/', {
      "time": time,
      "uid": uid,
      "password": password
    });
    return response;
  } catch (error) {
    console.error('Could not fetch error:', error);
    throw error;
  }
};

export const postServiceWiseSys5 = async (time) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post('EISHome/servicewise_top5_FiveM/SYS/', {
      "time": time,
      "uid": uid,
      "password": password
    });
    return response;
  } catch (error) {
    console.error('Could not fetch error:', error);
    throw error;
  }
};

export const postIpWiseExp5 = async (time) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post('EISHome/ipwise_top5_FiveM/EXP/', {
      "time": time,
      "uid": uid,
      "password": password
    });
    return response;
  } catch (error) {
    console.error('Could not fetch error:', error);
    throw error;
  }
};

export const postIpWiseSys5 = async (time) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post('EISHome/ipwise_top5_FiveM/SYS/', {
      "time": time,
      "uid": uid,
      "password": password
    });
    return response;
  } catch (error) {
    console.error('Could not fetch error:', error);
    throw error;
  }
};

export const postPortWiseExp5 = async (time) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post('EISHome/portwise_top5_FiveM/EXP/', {
      "time": time,
      "uid": uid,
      "password": password
    });
    return response;
  } catch (error) {
    console.error('Could not fetch error:', error);
    throw error;
  }
};

export const postPortWiseSys5 = async (time) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post('EISHome/portwise_top5_FiveM/SYS/', {
      "time": time,
      "uid": uid,
      "password": password
    });
    return response;
  } catch (error) {
    console.error('Could not fetch error:', error);
    throw error;
  }
};

// === UPDATED MQ API FUNCTIONS BELOW ===

// POST to EISHome/mqOverall/<layer>/ with { username, password }
export const postMqOverall = async (layer) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post(`EISHome/mqOverall/${layer}/`, {
      uid,
      password,
    });
    return response;
  } catch (error) {
    console.error('Could not fetch mqOverall:', error);
    throw error;
  }
};

// POST to EISHome/mqSource/<layer>/ with { username, password }
export const postMqSource = async (layer) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post(`EISHome/mqSource/${layer}/`, {
      uid,
      password,
    });
    return response;
  } catch (error) {
    console.error('Could not fetch mqSource:', error);
    throw error;
  }
};

// POST to EISHome/mqHourly/<layer>/ with { username, password, hour }
export const postMqHourly = async (layer, hour) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post(`EISHome/mqHourly/${layer}/`, {
      uid,
      password,
      hour,
    });
    return response;
  } catch (error) {
    console.error('Could not fetch mqHourly:', error);
    throw error;
  }
};

// Download mqgraph (source or overall) given a path ending with /layer/
export const downloadMqGraph = async (path) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    // Ensure the path ends with a slash
    if (!path.endsWith('/')) {
      path += '/';
    }
    const payload = {
      uid,
      password,
      download: true
    };
    // If the API returns a file, use responseType: 'blob'
    const response = await api.post(path, payload, { responseType: 'blob' });
    return response;
  } catch (error) {
    console.error('Could not download mqgraph:', error);
    throw error;
  }
};

// Download mqHourly given a path ending with /layer/ and an hour
export const downloadMqHourly = async (path, hour) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    // Ensure the path ends with a slash
    if (!path.endsWith('/')) {
      path += '/';
    }
    const payload = {
      uid,
      password,
      hour,
      download: true
    };
    // If the API returns a file, use responseType: 'blob'
    const response = await api.post(path, payload, { responseType: 'blob' });
    return response;
  } catch (error) {
    console.error('Could not download mqHourly:', error);
    throw error;
  }
};

// === ANNOUNCEMENT API ===
export const postAnnouncement = async (announcement, time) => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const payload = {
      announcement,
      time: time && !isNaN(Number(time)) ? Number(time) : 24,
      uid,
      password,
    };
    const response = await api.post('EISHome/announcement/', payload, {
      timeout: 30000,
      headers: {
        'Content-Type': 'application/json',
      }
    });
    return response;
  } catch (error) {
    console.error('Could not post announcement:', error);
    throw error;
  }
};

export const fetchLatestAnnouncement = async () => {
  try {
    const uid = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const res = await api.post('EISHome/announcement/', { uid, password });
    // Assuming the response is { announcement: "..." }
    return res.data.announcement || "";
  } catch (error) {
    console.error('Could not fetch announcement:', error);
    return "";
  }
};

// === ALERT MODAL API ===
export const fetchPortalAlerts = async () => {
  try {
    const userId = localStorage.getItem('uidd');
    const password = localStorage.getItem('password');
    const response = await api.post('EISHome/getPortalAlerts/', {
      userId,
      password
    });
    return response;
  } catch (error) {
    console.error('Could not fetch portal alerts:', error);
    throw error;
  }
};
