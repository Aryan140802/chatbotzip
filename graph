    "MonthlyDetails": [
        {
            "Far_Id": 221176,
            "Subject": "Temporary communication from SBICAPS DR to EIS PR/DR"
        },
        {
            "Far_Id": 264546,
            "Subject": "Permanent FAR between EIS ST/UAT Server to DCMS UAT servers for Migration of DCMS Services to EIS"
        },
        {
            "Far_Id": 283105,
            "Subject": "UAT connectivity between EIS and OPL for the project Jan Suraskha Part 2"
        },
        {
            "Far_Id": 283271,
            "Subject": "Permanent FAR for communication EIS NEW UAT DPG DMZ severs To Digi Locker"
        },
        {
            "Far_Id": 285784,
            "Subject": "Permanent FAR from EIS NON prod servers to RLMS"
        },
        {
            "Far_Id": 285787,
            "Subject": "Permanent FAR from EIS NON-PROD servers to  Trade Finance"
        },
        {
            "Far_Id": 285794,
            "Subject": "Permanent FAR from EIS NON-PROD servers to IFAMS"
        },
        {
            "Far_Id": 285823,
            "Subject": "Permanent FAR from EIS NON-PROD servers to IT PSG"
        },
        {
            "Far_Id": 285825,
            "Subject": "Permanent FAR from EIS NON-PROD servers to CPPC, SP3"
        },
        {
            "Far_Id": 285827,
            "Subject": "Permanent FAR from EIS NON-PROD servers to  IT TSS"
        },
        {
            "Far_Id": 285882,
            "Subject": "FAR from EIS Non-Prod servers to SME/LLMS,SME/EMUDRA (EGSS),SME/BRE UAT,SME/CLP UAT"
        },
        {
            "Far_Id": 285913,
            "Subject": "Permanent FAR communication from EIS new UAT to  Agri Tech/LOS UAT"
        },
        {
            "Far_Id": 286547,
            "Subject": "Recertify Change Request #221176 (Temporary communication from SBICAPS DR to EIS PR/DR)"
        },
        {
            "Far_Id": 289241,
            "Subject": "Permanent FAR from New UAT to NPCI   for Aadhar Seeding Deseeding"
        },
        {
            "Far_Id": 289381,
            "Subject": "Temporary FAR for communication EIS UAT to Mobile banking UAT for UPI blocking service for contact centre IVR"
        },
        {
            "Far_Id": 289794,
            "Subject": "Permeant FAR from EIS NEW UAT TO CB Tech Ops image D"
        },
        {
            "Far_Id": 289797,
            "Subject": "Permanent FAR from EIS NEW UAT TO PERFIOS UAT"
        },
        {
            "Far_Id": 289921,
            "Subject": "Permanent FAR from EIS UAT new servers to AMLOCKESS"
        },
        {
            "Far_Id": 290113,
            "Subject": "Temporary FAR from EIS NEW UAT TO YONO UAT"
        },
        {
            "Far_Id": 290286,
            "Subject": "Temporary FAR FROM EIS NEW UAT TO IT-ATM UAT"
        },
        {
            "Far_Id": 290778,
            "Subject": "Permanent FAR from EIS NON-PROD servers to VPS"
        },
        {
            "Far_Id": 290780,
            "Subject": "Temporary FAR from EIS NON-PROD servers to VPS"
        },
        {
            "Far_Id": 290815,
            "Subject": "Temporary communication From  EIS NEW UAT TO PCMS"
        },
        {
            "Far_Id": 291230,
            "Subject": "Permanent FAR for SBI DMZ Source to Destination Entity (SBI Life) communication"
        },
        {
            "Far_Id": 291525,
            "Subject": "Temporary FAR FROM EIS NEW UAT to DIGILOCKER UAT, JANSAMARTH UAT, EDISHA UAT"
        },
        {
            "Far_Id": 291725,
            "Subject": "Temporary  FAR for communication EIS NEW UAT DPG DMZ severs To PAN"
        },
        {
            "Far_Id": 291996,
            "Subject": "Temporary FAR FROM EIS NEW UAT TO EXTERNAL PARTY"
        },
        {
            "Far_Id": 316388,
            "Subject": "Temporary EIS non-prod to IT-PRM UAT (For API development) Far"
        },
        {
            "Far_Id": 316563,
            "Subject": "Recertify Change Request #288828 (Permanent FAR From EIS UAT Sys servers to GBSS UAT and ST Servers)"
        },
        {
            "Far_Id": 332822,
            "Subject": "Permanent Communication between EIS Prod and IMPS Prod"
        },
        {
            "Far_Id": 333363,
            "Subject": "Permanent communication FAR from EIS DMZ DPG PR and DR to DM2025028638 PMVLP(CANARA BANK VLP) and  RAAS integration"
        },
        {
            "Far_Id": 344311,
            "Subject": "Recertify Change Request #289241 (Permanent FAR from New UAT to NPCI   for Aadhar Seeding Deseeding)"
        },
        {
            "Far_Id": 344459,
            "Subject": "Recertify Change Request #285827 (Permanent FAR from EIS NON-PROD servers to  IT TSS)"
        },
        {
            "Far_Id": 344460,
            "Subject": "Recertify Change Request #285882 (FAR from EIS Non-Prod servers to SME/LLMS,SME/EMUDRA (EGSS),SME/BRE UAT,SME/CLP UAT)"
        },
        {
            "Far_Id": 344466,
            "Subject": "Recertify Change Request #285913 (Permanent FAR communication from EIS new UAT to  Agri Tech/LOS UAT)"
        },
        {
            "Far_Id": 344471,
            "Subject": "Recertify Change Request #289794 (Permeant FAR from EIS NEW UAT TO CB Tech Ops image D)"
        },
        {
            "Far_Id": 344472,
            "Subject": "Recertify Change Request #289921 (Permanent FAR from EIS UAT new servers to AMLOCKESS)"
        },
        {
            "Far_Id": 344474,
            "Subject": "Recertify Change Request #333363 (Permanent communication FAR from EIS DMZ DPG PR and DR to DM2025028638 PMVLP(CANARA BANK VLP) and  RAAS integration)"
        },
        {
            "Far_Id": 344476,
            "Subject": "Recertify Change Request #285784 (Permanent FAR from EIS NON prod servers to RLMS)"
        },
        {
            "Far_Id": 344477,
            "Subject": "Recertify Change Request #285787 (Permanent FAR from EIS NON-PROD servers to  Trade Finance)"
        },
        {
            "Far_Id": 344478,
            "Subject": "Recertify Change Request #285794 (Permanent FAR from EIS NON-PROD servers to IFAMS)"
        },
        {
            "Far_Id": 344480,
            "Subject": "Recertify Change Request #285823 (Permanent FAR from EIS NON-PROD servers to IT PSG)"
        },
        {
            "Far_Id": 344481,
            "Subject": "Recertify Change Request #285825 (Permanent FAR from EIS NON-PROD servers to CPPC, SP3)"
        },
        {
            "Far_Id": 344483,
            "Subject": "Recertify Change Request #289797 (Permanent FAR from EIS NEW UAT TO PERFIOS UAT)"
        },
        {
            "Far_Id": 344484,
            "Subject": "Recertify Change Request #290113 (Temporary FAR from EIS NEW UAT TO YONO UAT)"
        },
        {
            "Far_Id": 344486,
            "Subject": "Recertify Change Request #290286 (Temporary FAR FROM EIS NEW UAT TO IT-ATM UAT)"
        },
        {
            "Far_Id": 344488,
            "Subject": "Recertify Change Request #290780 (Temporary FAR from EIS NON-PROD servers to VPS)"
        },
        {
            "Far_Id": 344489,
            "Subject": "Recertify Change Request #290815 (Temporary communication From  EIS NEW UAT TO PCMS)"
        },
        {
            "Far_Id": 344490,
            "Subject": "Recertify Change Request #291525 (Temporary FAR FROM EIS NEW UAT to DIGILOCKER UAT, JANSAMARTH UAT, EDISHA UAT)"
        },
        {
            "Far_Id": 344492,
            "Subject": "Recertify Change Request #291996 (Temporary FAR FROM EIS NEW UAT TO EXTERNAL PARTY)"
        },
        {
            "Far_Id": 344494,
            "Subject": "Recertify Change Request #316388 (Temporary EIS non-prod to IT-PRM UAT (For API development) Far)"
        },
        {
            "Far_Id": 344497,
            "Subject": "Recertify Change Request #289381 (Temporary FAR for communication EIS UAT to Mobile banking UAT for UPI blocking service for contact centre IVR)"
        },
        {
            "Far_Id": 344519,
            "Subject": "Recertify Change Request #291725 (Temporary  FAR for communication EIS NEW UAT DPG DMZ severs To PAN)"
        },
        {
            "Far_Id": 344532,
            "Subject": "Temporary FAR for Integration with IT-TSS for fetching MFX Journal Number"
        },
        {
            "Far_Id": 344570,
            "Subject": "Permanent FAR for  DM2024116897- CDM-GRC Communication through EIS, Integration between EIS and GRX"
        },
        {
            "Far_Id": 344608,
            "Subject": "Temporary FAR from EIS  UAT servers  to CB Tech Ops and CB Dev for  Image migration to new Server"
        },
        {
            "Far_Id": 344609,
            "Subject": "Recertify Change Request #283271 (Permanent FAR for communication EIS NEW UAT DPG DMZ severs To Digi Locker)"
        },
        {
            "Far_Id": 344610,
            "Subject": "Recertify Change Request #264546 (Permanent FAR between EIS ST/UAT Server to DCMS UAT servers for Migration of DCMS Services to EIS)"
        },
        {
            "Far_Id": 344686,
            "Subject": "FAR for EIS UAT DMZ to connect with Jan Suraksha pre-prod setup"
        },
        {
            "Far_Id": 345172,
            "Subject": "Temporary FAR Access from SBI InnoHub to EIS PROD DR DMZ LB"
        },
        {
            "Far_Id": 345292,
            "Subject": "Temporary Communication between EIS UAT Servers and IT SP-1 Servers for Easy Collect Application"
        },
        {
            "Far_Id": 346521,
            "Subject": "Temporary FAR from EIS UAT to SP2 AMLOCK OTSS Application in UAT"
        },
        {
            "Far_Id": 346690,
            "Subject": "Temporary FAR from EIS UAT to SP2 UAT for Cash less card deposit API"
        },
        {
            "Far_Id": 347286,
            "Subject": "Recertify Change Request #332822 (Permanent Communication between EIS Prod and IMPS Prod)"
        },
        {
            "Far_Id": 347592,
            "Subject": "Temporary FAR from EIS UAT TO CINB UAT FOR MCXCCL API"
        },
        {
            "Far_Id": 347785,
            "Subject": "Recertify Change Request #291230 (Permanent FAR for SBI DMZ Source to Destination Entity (SBI Life) communication)"
        },
        {
            "Far_Id": 347799,
            "Subject": "Recertify Change Request #283105 (UAT connectivity between EIS and OPL for the project Jan Suraskha Part 2)"
        },
        {
            "Far_Id": 347800,
            "Subject": "Recertify Change Request #290778 (Permanent FAR from EIS NON-PROD servers to VPS)"
        }
    ]
}



import '../styles/graph.css';

import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  PieChart, Pie, Cell, Legend
} from 'recharts';

import Download from '../assets/down-arrow.png';
import {
  getServiceWiseExp5,
  getServiceWiseSys5,
  getIpWiseExp5,
  getIpWiseSys5,
  getPortWiseExp5,
  getPortWiseSys5,
  postPortWiseExp5,
  postPortWiseSys5,
  postIpWiseSys5,
  postIpWiseExp5,
  postServiceWiseExp5,
  postServiceWiseSys5,
  getFARExpires,
  getFARDetailsSpecific
} from "../api/postNewApi"; // adjust import if needed

import { useState, useEffect, useRef } from "react";

const formatHits = (value) => {
  if (value >= 10000000) return (value / 10000000).toFixed(2) + ' Cr';
  if (value >= 100000) return (value / 100000).toFixed(2) + ' L';
  if (value >= 1000) return (value / 1000).toFixed(2) + ' K';
  return value;
};

const formatPercent = (value) => `${(value * 100).toFixed(1)}%`;
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const ThreeDBar = (props) => {
  const { x, y, width, height, fill } = props;
  const depth = 6;
  return (
    <g>
      <rect x={x} y={y} width={width} height={height} fill={fill} style={{ transition: "all 0.3s ease" }} className="custom-bar" />
      <polygon points={`${x},${y} ${x + depth},${y - depth} ${x + width + depth},${y - depth} ${x + width},${y}`} fill="#ffffff33" />
      <polygon points={`${x + width},${y} ${x + width + depth},${y - depth} ${x + width + depth},${y + height - depth} ${x + width},${y + height}`} fill="#00000033" />
    </g>
  );
};

const GraphCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);
  const [charts, setCharts] = useState([]);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [calendarOpen, setCalendarOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [retryCount, setRetryCount] = useState(0);

  const [selectedTimeLabel, setSelectedTimeLabel] = useState("5min");
  const [selectedTimeValue, setSelectedTimeValue] = useState("5min");
  const [currentDisplayTitle, setCurrentDisplayTitle] = useState("");

  // FAR Modal State
  const [showFarDetails, setShowFarDetails] = useState(false);
  const [selectedMonthData, setSelectedMonthData] = useState(null);
  const [farDetails, setFarDetails] = useState([]);
  const [isLoadingDetails, setIsLoadingDetails] = useState(false);

  const calendarRef = useRef(null);
  const intervalRef = useRef(null);

  const COLORS = [
    '#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33F3',
    '#33FFF3', '#BD33FF', '#FF8C33', '#33FFBD', '#8C33FF',
    '#33FF8C', '#FF33BD', '#338CFF'
  ];

  const timeOptions = [
    { label: "5 min", value: "5min" },
    { label: "15 min", value: "15min" },
    { label: "30 min", value: "30min" },
    { label: "1 hour", value: "1hour" },
    { label: "Till now", value: "tillnow" },
    { label: "Yesterday", value: "yesterday" },
    { label: "Custom date", value: "custom" },
  ];

  const baseTitles = [
    'Service-wise Exp Data',
    'Service-wise Sys Data',
    'IP-wise Exp Data',
    'IP-wise Sys Data',
    'Port-wise Exp Data',
    'Port-wise Sys Data',
    'Monthly FAR Expiry Distribution'
  ];

  // ---- FAR Modal Handler ----
  const handlePieClick = async (data, index) => {
    // Recharts Pie passes (data, index)
    if (!data || !data.name) return;
    setSelectedMonthData(data);
    setIsLoadingDetails(true);
    setShowFarDetails(true);
    try {
      const response = await getFARDetailsSpecific(data.name);
      setFarDetails(response.data || []);
    } catch (err) {
      setFarDetails([]);
    } finally {
      setIsLoadingDetails(false);
    }
  };

  const formatDate = (date) =>
    date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });

  const isAllChartDataEmpty = (chartData) => {
    if (!chartData || chartData.length === 0) return true;
    const dataCharts = chartData.slice(0, 6);
    return dataCharts.every(chart => !chart.data || chart.data.length === 0);
  };

  // Fetch FAR data
  const fetchFARData = async () => {
    try {
      const response = await getFARExpires();
      const formattedData = [];
      let total = 0;
      response.data.MonthlyFarCount.forEach(monthData => {
        const [month, value] = Object.entries(monthData)[0];
        if (value > 0) {
          formattedData.push({ name: month, value: value });
          total += value;
        }
      });
      return formattedData;
    } catch (error) {
      return [];
    }
  };

  const updateChartTitles = (timeDisplay) => {
    if (charts.length === 0) return;
    const updatedCharts = charts.map((chart, index) => ({
      ...chart,
      title: index === 6 ? baseTitles[6] : `${baseTitles[index]} of ${timeDisplay}`
    }));
    setCharts(updatedCharts);
    if (currentIndex >= 0 && currentIndex < charts.length) {
      if (currentIndex === 6) {
        setCurrentDisplayTitle(baseTitles[6]);
      } else {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${timeDisplay}`);
      }
    }
  };

  const fetchFilteredData = async (timeRange, timeLabel, attemptNumber = 1) => {
    const maxRetries = 3;
    const retryDelay = 2000;
    try {
      const [
        serviceExp, serviceSys, ipExp, ipSys, portExp, portSys
      ] = await Promise.all([
        postServiceWiseExp5(timeRange),
        postServiceWiseSys5(timeRange),
        postIpWiseExp5(timeRange),
        postIpWiseSys5(timeRange),
        postPortWiseExp5(timeRange),
        postPortWiseSys5(timeRange)
      ]);
      const farChartData = await fetchFARData();
      const formatData = (data, key) => {
        if (!data || !Array.isArray(data)) return [];
        return data.map(item => ({
          ...item,
          [key]: item[key]?.toString().trim() || '',
          Hits: Number(item.Hits || 0),
          logVal: Number(item.logVal || 0)
        }));
      };
      const timeDisplay = timeRange?.startsWith('custom_') && selectedDate
        ? `Custom: ${formatDate(selectedDate)}`
        : timeLabel || selectedTimeLabel;
      const chartData = [
        {
          data: formatData(serviceExp?.data?.service_wise_top5 || [], 'Service_name'),
          dataKeyX: 'Service_name',
          baseTitle: baseTitles[0]
        },
        {
          data: formatData(serviceSys?.data?.service_wise_top5 || [], 'Service_name'),
          dataKeyX: 'Service_name',
          baseTitle: baseTitles[1]
        },
        {
          data: formatData(ipExp?.data?.Ip_wise_top5 || [], 'Ip'),
          dataKeyX: 'Ip',
          baseTitle: baseTitles[2]
        },
        {
          data: formatData(ipSys?.data?.Ip_wise_top5 || [], 'Ip'),
          dataKeyX: 'Ip',
          baseTitle: baseTitles[3]
        },
        {
          data: formatData(portExp?.data?.port_wise_top5 || [], 'Port'),
          dataKeyX: 'Port',
          baseTitle: baseTitles[4]
        },
        {
          data: formatData(portSys?.data?.port_wise_top5 || [], 'Port'),
          dataKeyX: 'Port',
          baseTitle: baseTitles[5]
        },
        {
          data: farChartData,
          dataKeyX: 'name',
          baseTitle: baseTitles[6]
        }
      ];
      if (isAllChartDataEmpty(chartData) && attemptNumber < maxRetries) {
        setRetryCount(attemptNumber);
        await wait(retryDelay);
        return await fetchFilteredData(timeRange, timeLabel, attemptNumber + 1);
      }
      setRetryCount(0);
      return chartData.map(({ data, dataKeyX, baseTitle }) => {
        let chartComponent;
        if (baseTitle === baseTitles[6]) {
          chartComponent = (
            <ResponsiveContainer>
              <PieChart margin={{ top: 30, right: 30, left: 30, bottom: 30 }}>
                <Pie
                  data={data}
                  cx="50%"
                  cy="50%"
                  labelLine
                  outerRadius={130}
                  innerRadius={60}
                  fill="#8884d8"
                  dataKey="value"
                  nameKey="name"
                  label={({ name, percent }) => `${name}: ${formatPercent(percent)}`}
                  onClick={handlePieClick} // <-- correct event signature for Recharts Pie
                  style={{ cursor: 'pointer' }}
                >
                  {data.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip
                  formatter={(value) => [`${value}`, 'Count']}
                  contentStyle={{
                    backgroundColor: '#2e1a3b',
                    borderColor: '#f285c1',
                    color: '#fff',
                    borderRadius: '8px',
                    cursor: 'pointer'
                  }}
                  itemStyle={{ color: '#fff' }}
                  labelStyle={{ color: '#f285c1' }}
                />
                <Legend layout="horizontal" verticalAlign="bottom" align="center" />
              </PieChart>
            </ResponsiveContainer>
          );
        } else {
          chartComponent = (
            <ResponsiveContainer>
              <BarChart
                data={data}
                margin={{ top: 30, right: 30, left: 30, bottom: 60 }}
                barCategoryGap={10}
                key={`${baseTitle}-${timeRange}-chart`}
              >
                <defs>
                  <linearGradient id={`barGradient-${baseTitle.replace(/\s/g, '')}`} x1="0" y1="0" x2="0" y2="1">
                    {baseTitle.includes('Exp') ? (
                      <>
                        <stop offset="0%" stopColor="#6a11cb" />
                        <stop offset="100%" stopColor="#2575fc" />
                      </>
                    ) : (
                      <>
                        <stop offset="0%" stopColor="#ff6a00" />
                        <stop offset="100%" stopColor="#ee0979" />
                      </>
                    )}
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" stroke="#ffffff33" />
                <XAxis
                  dataKey={dataKeyX}
                  stroke="#f7f7f7"
                  interval={0}
                  angle={-30}
                  textAnchor="end"
                  height={60}
                  tick={{ fontSize: 13, fill: '#f7f7f7' }}
                />
                <YAxis
                  tick={{ fill: '#f7f7f7' }}
                  axisLine
                  showLine
                  tickFormatter={formatHits}
                  domain={[0, (dataMax) => Math.ceil(dataMax * 1.1)]}
                />
                <Tooltip
                  contentStyle={{ backgroundColor: '#2e1a3b', borderColor: '#f285c1', color: '#fff', borderRadius: '8px' }}
                  itemStyle={{ color: '#fff' }}
                  labelStyle={{ color: '#f285c1' }}
                  formatter={(value, name, props) => {
                    if (name === 'Hits') {
                      const formattedHits = formatHits(props.payload.Hits);
                      return [`${formattedHits} (${props.payload.Hits})`, 'Hits'];
                    }
                    return value;
                  }}
                  labelFormatter={(label) => `${dataKeyX}: ${label}`}
                />
                <Bar
                  dataKey="Hits"
                  fill={`url(#barGradient-${baseTitle.replace(/\s/g, '')})`}
                  shape={ThreeDBar}
                  barSize={50}
                />
              </BarChart>
            </ResponsiveContainer>
          );
        }
        return {
          baseTitle,
          title: baseTitle === baseTitles[6]
            ? baseTitle
            : `${baseTitle} of ${timeDisplay}`,
          rawData: data,
          chart: chartComponent
        };
      });
    } catch (error) {
      if (attemptNumber < maxRetries) {
        setRetryCount(attemptNumber);
        await wait(retryDelay);
        return await fetchFilteredData(timeRange, timeLabel, attemptNumber + 1);
      }
      setRetryCount(0);
      throw error;
    }
  };

  useEffect(() => {
    const initializeData = async () => {
      setIsLoading(true);
      try {
        const chartData = await fetchFilteredData(selectedTimeValue, selectedTimeLabel);
        if (chartData && chartData.length > 0) {
          setCharts(chartData);
          setCurrentDisplayTitle(chartData[0].title);
        }
      } finally {
        setIsLoading(false);
      }
    };
    initializeData();
    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, []);

  useEffect(() => {
    if (charts.length > 0 && currentIndex >= 0 && currentIndex < charts.length) {
      setCurrentDisplayTitle(charts[currentIndex].title);
    }
  }, [currentIndex, charts]);

  useEffect(() => {
    if (intervalRef.current) clearInterval(intervalRef.current);
    if (!paused && charts.length > 0) {
      intervalRef.current = setInterval(() => {
        setCurrentIndex(prev => (prev === charts.length - 1 ? 0 : prev + 1));
      }, 5000);
    }
    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [paused, charts.length]);

  useEffect(() => {
    if (charts.length > 0) {
      updateChartTitles(selectedTimeLabel);
    }
  }, [selectedTimeLabel, charts.length]);

  const handleTimeChange = async (option) => {
    if (currentIndex === 6) return;
    if (option.value === "custom") {
      setDropdownOpen(false);
      setCalendarOpen(true);
      return;
    }
    setSelectedTimeLabel(option.label);
    setSelectedTimeValue(option.value);
    setDropdownOpen(false);
    setCalendarOpen(false);
    setPaused(true);
    setIsLoading(true);
    setRetryCount(0);
    try {
      if (currentIndex >= 0 && currentIndex < baseTitles.length) {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${option.label}`);
      }
      const updatedCharts = await fetchFilteredData(option.value, option.label);
      if (updatedCharts && updatedCharts.length > 0) {
        setCharts(updatedCharts);
        setCurrentDisplayTitle(updatedCharts[0].title);
      }
    } finally {
      setIsLoading(false);
      setPaused(false);
    }
  };

  const handleDateSelect = async (date) => {
    if (currentIndex === 6) return;
    if (!date) return;
    const formattedDate = formatDate(date);
    const dateValue = `custom_${date.toISOString().split('T')[0]}`;
    const timeLabel = `Custom: ${formattedDate}`;
    setSelectedDate(date);
    setSelectedTimeLabel(timeLabel);
    setSelectedTimeValue(dateValue);
    setCalendarOpen(false);
    setPaused(true);
    setIsLoading(true);
    setRetryCount(0);
    try {
      if (currentIndex >= 0 && currentIndex < baseTitles.length) {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${timeLabel}`);
      }
      const updatedCharts = await fetchFilteredData(dateValue, timeLabel);
      if (updatedCharts && updatedCharts.length > 0) {
        setCharts(updatedCharts);
        setCurrentDisplayTitle(updatedCharts[0].title);
      }
    } finally {
      setIsLoading(false);
      setPaused(false);
    }
  };

  const generateCalendarDays = () => {
    const today = new Date();
    const days = [];
    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    weekdays.forEach(day => days.push(<div key={`weekday-${day}`} className="calendar-weekday">{day}</div>));
    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(today.getDate() - 6);
    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
    const startDate = new Date(Math.max(sevenDaysAgo.getTime(), firstDayOfMonth.getTime()));
    const firstDayOfWeek = startDate.getDay();
    for (let i = 0; i < firstDayOfWeek; i++) {
      days.push(<div key={`empty-start-${i}`} className="calendar-day"></div>);
    }
    const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
    for (let day = startDate.getDate(); day <= lastDayOfMonth; day++) {
      const date = new Date(today.getFullYear(), today.getMonth(), day);
      const isDisabled = date > today || date < sevenDaysAgo;
      const isSelected = selectedDate && date.toDateString() === selectedDate.toDateString();
      days.push(
        <div
          key={`day-${day}`}
          className={`calendar-day ${isDisabled ? 'disabled' : ''} ${isSelected ? 'selected' : ''}`}
          onClick={() => !isDisabled && handleDateSelect(date)}
        >
          {day}
        </div>
      );
    }
    return days;
  };

  const downloadCSV = (data, filename = 'chart-data.csv') => {
    if (!data || !data.length) return;
    const keys = Object.keys(data[0]);
    const csvContent = [
      keys.join(','),
      ...data.map(row => keys.map(key => `"${row[key] || ''}"`).join(','))
    ].join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const goToSlide = (index) => {
    if (index < 0 || index >= charts.length) return;
    setCurrentIndex(index);
    if (charts.length > 0 && index >= 0 && index < charts.length) {
      setCurrentDisplayTitle(charts[index].title);
    }
  };

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
    setCalendarOpen(false);
  };

  useEffect(() => {
    if (!dropdownOpen && !calendarOpen) return;
    const handleClickOutside = (event) => {
      if (!event.target.closest('.dropdown') && !event.target.closest('.calendar-container')) {
        setDropdownOpen(false);
        setCalendarOpen(false);
      }
    };
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, [dropdownOpen, calendarOpen]);

  if (!charts.length) return (
    <div className="loading-container">
      <div className="loading-spinner"></div>
      <div>Loading charts...</div>
      {retryCount > 0 && (
        <div style={{ marginTop: '10px', fontSize: '14px', color: '#888' }}>
          Retrying... (Attempt {retryCount}/3)
        </div>
      )}
    </div>
  );

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        {currentIndex !== 6 && (
          <div className="timeline-selector">
            <div className="dropdown" onClick={(e) => e.stopPropagation()}>
              <button
                className="dropdown-toggle"
                onClick={toggleDropdown}
              >
                {selectedTimeLabel}
              </button>
              <ul className={`dropdown-menu ${dropdownOpen ? 'show' : ''}`}>
                {timeOptions.map(option => (
                  <li
                    key={option.value}
                    onClick={() => handleTimeChange(option)}
                    className={option.value === selectedTimeValue ? 'selected' : ''}
                  >
                    {option.label}
                  </li>
                ))}
              </ul>
              {calendarOpen && (
                <div className="calendar-container" ref={calendarRef}>
                  <div className="calendar-header">
                    {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                  </div>
                  <div className="calendar">{generateCalendarDays()}</div>
                </div>
              )}
            </div>
          </div>
        )}

        <h2>
          {isLoading ? `Loading ${charts[currentIndex]?.baseTitle || ''}...` : currentDisplayTitle}
          {retryCount > 0 && (
            <span style={{ fontSize: '14px', color: '#888', marginLeft: '10px' }}>
              (Retrying... {retryCount}/3)
            </span>
          )}
        </h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={() => downloadCSV(charts[currentIndex]?.rawData, `${currentDisplayTitle}.csv`)}
            disabled={isLoading || !charts[currentIndex]?.rawData}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {isLoading ? (
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <div>Loading data...</div>
            {retryCount > 0 && (
              <div style={{ marginTop: '10px', fontSize: '14px', color: '#888' }}>
                Retrying... (Attempt {retryCount}/3)
              </div>
            )}
          </div>
        ) : (
          charts.map((item, index) => (
            <div
              key={`chart-container-${index}-${selectedTimeValue}`}
              className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
              style={{ display: index === currentIndex ? 'block' : 'none' }}
            >
              {item.chart}
            </div>
          ))
        )}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={`dot-${index}`}
            className={`dot ${index === currentIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => goToSlide(index)}
          />
        ))}

        {/* FAR Details Modal */}
        {showFarDetails && (
          <div className="far-details-modal">
            <div className="modal-content">
              <div className="modal-header">
                <h3>FAR Details for {selectedMonthData?.name}</h3>
                <button
                  onClick={() => setShowFarDetails(false)}
                  style={{
                    background: 'none',
                    border: 'none',
                    color: '#f285c1',
                    fontSize: '24px',
                    cursor: 'pointer',
                    padding: '5px',
                    borderRadius: '4px'
                  }}
                >×</button>
              </div>
              <div className="modal-body" style={{ padding: '20px', maxHeight: '500px', overflowY: 'auto' }}>
                {isLoadingDetails ? (
                  <div style={{ textAlign: 'center', color: '#fff' }}>
                    <div className="loading-spinner"></div>
                    <p>Loading FAR details...</p>
                  </div>
                ) : (
                  <div className="far-details-table">
                    <table>
                      <thead>
                        <tr>
                          <th>IP</th>
                          <th>Port</th>
                          <th>Service</th>
                          <th>Expiry Date</th>
                        </tr>
                      </thead>
                      <tbody>
                        {farDetails.map((detail, index) => (
                          <tr key={index}>
                            <td>{detail.ip || 'N/A'}</td>
                            <td>{detail.port || 'N/A'}</td>
                            <td>{detail.service || 'N/A'}</td>
                            <td>{detail.expiry_date || 'N/A'}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                    {farDetails.length === 0 && (
                      <div className="no-data">No FAR details available for this month</div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default GraphCarousel;
