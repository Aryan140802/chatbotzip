import '../styles/GraphCarousel.css';
import {
  LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer
} from 'recharts';

import Download from '../assets/down-arrow.png';
import {
  getServiceSys,
  getServiceExp,
  getIpwiseExp,
  getIpwiseSys,
  getPortwiseSys,
  getPortwiseExp,
  getServiceWiseExp5
} from "../api/PostApi";

import { useState, useEffect } from "react";

const dummyData = [
  { name: 'Mon', usage: 30, apiCalls: 240 },
  { name: 'Tue', usage: 45, apiCalls: 139 },
  { name: 'Wed', usage: 60, apiCalls: 980 },
  { name: 'Thu', usage: 75, apiCalls: 390 },
  { name: 'Fri', usage: 90, apiCalls: 480 },
  { name: 'Sat', usage: 55, apiCalls: 630 },
  { name: 'Sun', usage: 35, apiCalls: 720 },
];

let csvGlobal;

const getServiceSysData = async () => {
  const res = await getServiceSys();
  const convertToCSV = (jsonData, sortBy = 'Hits') => {
    if (!jsonData || !jsonData.length) return '';
    const sortedData = [...jsonData].sort((a, b) => b[sortBy] - a[sortBy]);
    const headers = Object.keys(sortedData[0]);
    const csvRows = [
      headers.join(','),
      ...sortedData.map(row => headers.map(field => `"${row[field]}"`).join(','))
    ];
    return csvRows.join('\n');
  };
  csvGlobal = convertToCSV(res.data, 'Hits');
};

const GraphCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);
  const [serviceWiseExp5Data, setServiceWiseExp5Data] = useState([]);

  useEffect(() => {
    getServiceSysData();

    getServiceWiseExp5().then((res) => {
      const formatted = res.data.service_wise_top5.map(item => ({
        Service_name: item.Service_name,
        logVal: item.logVal,
        Hits: item.Hits
      }));
      setServiceWiseExp5Data(formatted);
    });

    getServiceExp(); // Other API calls are optional or unused
    getIpwiseSys();
    getIpwiseExp();
    getPortwiseSys();
    getPortwiseExp();
  }, []);

  const charts = [
    {
      title: 'Disk Usage Overview',
      chart: (
        <ResponsiveContainer>
          <LineChart data={dummyData}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="name" stroke="var(--text-color)" />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Line type="monotone" dataKey="usage" stroke="#f14f98" strokeWidth={3} />
          </LineChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'API Calls Per Day',
      chart: (
        <ResponsiveContainer>
          <BarChart data={dummyData}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="name" stroke="var(--text-color)" />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Bar dataKey="apiCalls" fill="#7559f3" />
          </BarChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'Service wise Exp Data (log scale)',
      chart: (
        <ResponsiveContainer>
          <BarChart data={serviceWiseExp5Data}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="Service_name" stroke="var(--text-color)" />
            <YAxis hide />
            <Tooltip />
            <Bar dataKey="logVal" fill="#7559f3" />
          </BarChart>
        </ResponsiveContainer>
      ),
    },
  ];

  const goToSlide = (index) => setCurrentIndex(index);

  const downloadCSV = (data, filename = 'chart-data.csv') => {
    if (!data || !data.length) return;
    const keys = Object.keys(data[0]);
    const csvContent = [
      keys.join(','),
      ...data.map(row => keys.map(key => `"${row[key]}"`).join(','))
    ].join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  useEffect(() => {
    if (paused) return;
    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) =>
        prevIndex === charts.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000);
    return () => clearInterval(interval);
  }, [paused]);

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        <h2>{charts[currentIndex].title}</h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={() => downloadCSV(csvGlobal, `${charts[currentIndex].title}.csv`)}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {charts.map((item, index) => (
          <div
            key={index}
            className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
            style={{ display: index === currentIndex ? 'block' : 'none' }}
          >
            {item.chart}
          </div>
        ))}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={index}
            className={`dot ${index === currentIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => goToSlide(index)}
          />
        ))}
      </div>
    </div>
  );
};

export default GraphCarousel;



<ResponsiveContainer>
  <BarChart
    data={serviceWiseExp5Data}
    margin={{ top: 40, right: 30, left: 30, bottom: 60 }}
    barCategoryGap={30}
  >
    <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />

    <XAxis
      dataKey="Service_name"
      stroke="var(--text-color)"
      interval={0}
      angle={-30}
      textAnchor="end"
      height={60}
    />

    <YAxis tick={false} axisLine showLine />

    <Tooltip
      formatter={(value, name, props) => {
        if (name === 'logVal') {
          return [`${props.payload.Hits}`, 'Hits'];
        }
        return value;
      }}
      labelFormatter={(label) => `Service: ${label}`}
    />

    <Bar dataKey="logVal" fill="#7559f3">
      <LabelList
        dataKey="Service_name"
        position="insideTop"
        style={{ fill: '#fff', fontSize: 10 }}
      />
    </Bar>
  </BarChart>
</ResponsiveContainer>


