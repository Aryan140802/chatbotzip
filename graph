import '../styles/GraphCarousel.css';
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from 'recharts';

import Download from '../assets/down-arrow.png';
import {
  getServiceSys,
  getServiceExp,
  getIpwiseExp,
  getIpwiseSys,
  getPortwiseSys,
  getPortwiseExp,
} from '../api/PostApi';

import { useState, useEffect } from 'react';

const staticData = [
  { name: 'Mon', usage: 30, apiCalls: 240 },
  { name: 'Tue', usage: 45, apiCalls: 139 },
  { name: 'Wed', usage: 60, apiCalls: 980 },
  { name: 'Thu', usage: 75, apiCalls: 390 },
  { name: 'Fri', usage: 90, apiCalls: 480 },
  { name: 'Sat', usage: 55, apiCalls: 630 },
  { name: 'Sun', usage: 35, apiCalls: 720 },
];

let csvGlobal;

const convertToCSV = (jsonData, sortBy = 'Hits') => {
  if (!jsonData || !jsonData.length) return '';

  const sortedData = [...jsonData].sort((a, b) => b[sortBy] - a[sortBy]);
  const headers = Object.keys(sortedData[0]);
  const csvRows = [
    headers.join(','), // header row
    ...sortedData.map((row) => headers.map((field) => `"${row[field]}"`).join(',')),
  ];

  return csvRows.join('\n');
};

const GraphCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);
  const [ipData, setIpData] = useState([]);

  useEffect(() => {
    const fetchAllData = async () => {
      try {
        const serviceSys = await getServiceSys();
        csvGlobal = convertToCSV(serviceSys.data, 'Hits');

        const [ipExpRes, ipSysRes] = await Promise.all([getIpwiseExp(), getIpwiseSys()]);
        const combined = [...ipExpRes.data, ...ipSysRes.data];

        const processed = combined.map((item) => ({
          Ip: item.Ip,
          Layer: item.Layer,
          Hits: parseInt(item.Hits, 10),
        }));

        const top10 = processed
          .sort((a, b) => b.Hits - a.Hits)
          .slice(0, 10);

        setIpData(top10);
      } catch (err) {
        console.error('Error fetching data:', err);
      }
    };

    fetchAllData();
  }, []);

  const downloadCSV = (chartIndex) => {
    let dataToDownload = [];

    if (chartIndex === 2) {
      dataToDownload = ipData;
    } else {
      if (!csvGlobal) return;
      const blob = new Blob([csvGlobal], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `${charts[chartIndex].title}.csv`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      return;
    }

    if (!dataToDownload.length) return;

    const keys = Object.keys(dataToDownload[0]);
    const csvContent = [
      keys.join(','),
      ...dataToDownload.map((row) => keys.map((key) => `"${row[key]}"`).join(',')),
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `${charts[chartIndex].title}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const charts = [
    {
      title: 'Disk Usage Overview',
      chart: (
        <ResponsiveContainer>
          <LineChart data={staticData}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="name" stroke="var(--text-color)" />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Line type="monotone" dataKey="usage" stroke="#f14f98" strokeWidth={3} />
          </LineChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'API Calls Per Day',
      chart: (
        <ResponsiveContainer>
          <BarChart data={staticData}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="name" stroke="var(--text-color)" />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Bar dataKey="apiCalls" fill="#7559f3" />
          </BarChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'Top 10 IPs by Hits (EXP + SYS)',
      chart: (
        <ResponsiveContainer>
          <BarChart data={ipData}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis
              dataKey="Ip"
              stroke="var(--text-color)"
              angle={-45}
              textAnchor="end"
              height={60}
            />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Bar dataKey="Hits" fill="#3b82f6" />
          </BarChart>
        </ResponsiveContainer>
      ),
    },
  ];

  useEffect(() => {
    if (paused) return;
    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) => (prevIndex === charts.length - 1 ? 0 : prevIndex + 1));
    }, 5000);
    return () => clearInterval(interval);
  }, [paused]);

  const goToSlide = (index) => {
    setCurrentIndex(index);
  };

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        <h2>{charts[currentIndex].title}</h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={() => downloadCSV(currentIndex)}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {charts.map((item, index) => (
          <div
            key={index}
            className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
            style={{ display: index === currentIndex ? 'block' : 'none' }}
          >
            {item.chart}
          </div>
        ))}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={index}
            className={`dot ${index === currentIndex ? 'active' : ''} ${
              paused ? 'paused' : ''
            }`}
            onClick={() => goToSlide(index)}
          ></span>
        ))}
      </div>
    </div>
  );
};

export default GraphCarousel;
