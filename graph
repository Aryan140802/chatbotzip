import '../styles/GraphCarousel.css';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer
} from 'recharts';

import Download from '../assets/down-arrow.png';
import {
  getServiceSys,
  getServiceWiseExp5,
  getServiceWiseSys5,
  getIpWiseExp5,
  getIpWiseSys5,
  getPortWiseExp5,
  getPortWiseSys5
} from "../api/PostApi";

import { useState, useEffect } from "react";

let csvGlobal;

const formatHits = (value) => {
  if (value >= 10000000) {
    return (value / 10000000).toFixed(2) + ' Cr'; // Crores
  } else if (value >= 100000) {
    return (value / 100000).toFixed(2) + ' L'; // Lakhs
  } else if (value >= 1000) {
    return (value / 1000).toFixed(2) + ' K'; // Thousands
  } else {
    return value; // For values less than 1000
  }
};


// Custom 3D bar shape function
const ThreeDBar = ({ x, y, width, height, fill }) => {
  const depth = 6;

  return (
    <g>
      {/* Front face */}
      <rect x={x} y={y} width={width} height={height} fill={fill} />

      {/* Top face */}
      <polygon
        points={`${x},${y} ${x + depth},${y - depth} ${x + width + depth},${y - depth} ${x + width},${y}`}
        fill="#ffffff33"
      />

      {/* Right face */}
      <polygon
        points={`${x + width},${y} ${x + width + depth},${y - depth} ${x + width + depth},${y + height - depth} ${x + width},${y + height}`}
        fill="#00000033"
      />
    </g>
  );
};


const getServiceSysData = async () => {
  const res = await getServiceSys();
  const convertToCSV = (jsonData, sortBy = 'Hits') => {
    if (!jsonData || !jsonData.length) return '';
    const sortedData = [...jsonData].sort((a, b) => b[sortBy] - a[sortBy]);
    const headers = Object.keys(sortedData[0]);
    const csvRows = [
      headers.join(','),
      ...sortedData.map(row => headers.map(field => `"${row[field]}"`).join(','))
    ];
    return csvRows.join('\n');
  };
  csvGlobal = convertToCSV(res.data, 'Hits');
};

const GraphCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);

  const [serviceWiseExp5Data, setServiceWiseExp5Data] = useState([]);
  const [serviceWiseSys5Data, setServiceWiseSys5Data] = useState([]);
  const [ipWiseExp5Data, setIpWiseExp5Data] = useState([]);
  const [ipWiseSys5Data, setIpWiseSys5Data] = useState([]);
  const [portWiseExp5Data, setPortWiseExp5Data] = useState([]);
  const [portWiseSys5Data, setPortWiseSys5Data] = useState([]);

  useEffect(() => {
    getServiceSysData();

    getServiceWiseExp5().then((res) => {
      setServiceWiseExp5Data(res.data.service_wise_top5.map(item => ({
        Service_name: item.Service_name,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getServiceWiseSys5().then((res) => {
      setServiceWiseSys5Data(res.data.service_wise_top5.map(item => ({
        Service_name: item.Service_name,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getIpWiseExp5().then((res) => {
      setIpWiseExp5Data(res.data.Ip_wise_top5.map(item => ({
        Ip: item.Ip.trim(),
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getIpWiseSys5().then((res) => {
      setIpWiseSys5Data(res.data.Ip_wise_top5.map(item => ({
        Ip: item.Ip.trim(),
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getPortWiseExp5().then((res) => {
      setPortWiseExp5Data(res.data.port_wise_top5.map(item => ({
        Port: item.Port,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getPortWiseSys5().then((res) => {
      setPortWiseSys5Data(res.data.port_wise_top5.map(item => ({
        Port: item.Port,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });
  }, []);



const renderBarChart = (data, dataKeyX, title) => ({
  title,
  chart: (
    <ResponsiveContainer>
      <BarChart
        data={data}
        margin={{ top: 30, right: 30, left: 30, bottom: 60 }}
        barCategoryGap={10}
      >
        <CartesianGrid strokeDasharray="3 3" stroke="#ffffff33" />

        <XAxis
          dataKey={dataKeyX}
          stroke="#f7f7f7"
          interval={0}
          angle={-30}
          textAnchor="end"
          height={60}
          tick={{ fontSize: 10, fill: '#f7f7f7' }}
        />

        <YAxis tick={{  fill: '#f7f7f7' }} axisLine showLine
          domain={[0, 'dataMax +10' ]}/>

        <Tooltip
          contentStyle={{
            backgroundColor: '#2e1a3b',
            borderColor: '#f285c1',
            color: '#fff',
            borderRadius: '8px',
          }}
          itemStyle={{ color: '#fff' }}
          labelStyle={{ color: '#f285c1' }}
          formatter={(value, name, props) => {
            if (name === 'logVal') {
              const formattedHits = formatHits(props.payload.Hits);
              return [`${formattedHits} (${props.payload.Hits})`, 'Hits'];
            }
            return value;
          }}
          labelFormatter={(label) => `${dataKeyX}: ${label}`}
        />


        <Bar
          dataKey="logVal"
          fill="#f285c1"
          shape={<ThreeDBar />}
          barSize={50}

        />
      </BarChart>
    </ResponsiveContainer>
  )
});

  const charts = [
    renderBarChart(serviceWiseExp5Data, "Service_name", "Service-wise Exp Data"),
    renderBarChart(serviceWiseSys5Data, "Service_name", "Service-wise Sys Data"),
    renderBarChart(ipWiseExp5Data, "Ip", "IP-wise Exp Data"),
    renderBarChart(ipWiseSys5Data, "Ip", "IP-wise Sys Data"),
    renderBarChart(portWiseExp5Data, "Port", "Port-wise Exp Data"),
    renderBarChart(portWiseSys5Data, "Port", "Port-wise Sys Data"),
  ];

  const goToSlide = (index) => setCurrentIndex(index);

  const downloadCSV = (data, filename = 'chart-data.csv') => {
    if (!data || !data.length) return;
    const keys = Object.keys(data[0]);
    const csvContent = [
      keys.join(','),
      ...data.map(row => keys.map(key => `"${row[key]}"`).join(','))
    ].join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  useEffect(() => {
    if (paused) return;
    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) =>
        prevIndex === charts.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000);
    return () => clearInterval(interval);
  }, [paused]);

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        <h2>{charts[currentIndex].title}</h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={() => downloadCSV(csvGlobal, `${charts[currentIndex].title}.csv`)}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {charts.map((item, index) => (
          <div
            key={index}
            className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
            style={{ display: index === currentIndex ? 'block' : 'none' }}
          >
            {item.chart}
          </div>
        ))}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={index}
            className={`dot ${index === currentIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => goToSlide(index)}
          />
        ))}
      </div>
    </div>
  );
};

export default GraphCarousel;



.carousel-container {
  background: rgba(20, 20, 40, 0.6); /* Glassmorphic dark base */
  backdrop-filter: blur(10px);       /* Frosted effect */
  -webkit-backdrop-filter: blur(10px); /* Safari support */
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 16px;
  padding: 2rem;
  margin: 0.3rem auto;
  width: 110%;
  max-width: 1000px;
  color: var(--text-color);
  box-shadow: 0 0 30px rgba(0, 0, 0, 0.6);
  transition: background 0.3s ease, color 0.3s ease;
  height: 730px;
}
/* Glass-style active chart background */
.chart-fade.active {
  border-radius: 12px;
  transition: all 0.3s ease-in-out;
  opacity: 1;
  transform: translateX(0);
  position: relative;
}

.chart-fade {
  opacity: 0;
  transform: translateX(20px);
  transition: opacity 0.5s ease, transform 0.5s ease;
  position: absolute;
  width: 100%;
  height: 100%;
}

/* Header */
.carousel-header {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  margin-bottom: 1.2rem;
}

.carousel-title-wrapper {
  display: flex;
  align-items: center;
  gap: 10px;
}

.carousel-header h2 {
  font-size: 1.8rem;
  margin: 0;
  color: #fff;
  text-align: center;
  flex: 1;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
}

/* Carousel navigation */
.carousel-buttons {
  position: absolute;
  top: 50%;
  height: 30px;
  transform: translateY(-50%);
  display: flex;
  gap: 10px;
}

.carousel-buttons.left {
  left: 10px;
}

.carousel-buttons.right {
  right: 10px;
}

.carousel-buttons button {
  background: transparent;
  border: 1px solid var(--border-color);
  color: var(--text-color);
  padding: 12px 18px;
  cursor: pointer;
  border-radius: 8px;
  font-weight: bold;
  font-size: 1.5rem;
  transition: all 0.3s ease;
}

.carousel-buttons button:hover {
  background: var(--secondary-color);
  color: rgb(0, 0, 0);
}

.carousel-buttons.left,
.carousel-buttons.right {
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Graph container */
.carousel-graph {
  margin-top: 19px;
  width:97%;
  height: 639px;
}

/* Dots (slide indicators) */
.carousel-dots {
  text-align: center;
  margin-top: 2px;
  position: relative;
}

.dot {
  position: relative;
  height: 12px;
  width: 12px;
  margin: 0 6px;
  background-color: #ffffff;
  border-radius: 50%;
  display: inline-block;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
  opacity: 0.6;
  border: 2px solid #f285c1;
  box-shadow: 0 0 6px #f285c1;
}

.dot.active {
  background-color: #f285c1;
  transform: scale(1.2);
  opacity: 1;
}

.dot.paused {
  opacity: 1;
}

/* Responsive adjustments */
@media only screen and (max-height: 800px) {
  .carousel-container {
    width: 75%;
    height: 350px;
  }

  .carousel-graph {
    margin-top: 20px;
    height: 260px;
  }
}

/* Download button styles */
.download-button {
  background-color: transparent;
  border: none;
  cursor: pointer;
  padding: 4px;
  transition: transform 0.2s ease;
  margin-bottom: 0.2rem;
}

.download-button:hover {
  transform: scale(1.15);
}

.logo {
  filter: invert(1);
  transition: transform 0.3s ease;
  display: block;
  z-index: 2;
  position: relative;
}

.logo-wrapper {
  position: relative;
  display: inline-block;
  overflow: visible;
}

/* Ripple animation */
.logo-wrapper::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 45%;
  width: 0;
  height: 0;
  background: rgba(255, 255, 255, 0.772);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
  opacity: 0;
}

.logo-wrapper:hover::after {
  animation: water-drop 0.6s ease-out;
}

@keyframes water-drop {
  0% {
    width: 0;
    height: 0;
    opacity: 1;
  }
  100% {
    width: 100px;
    height: 100px;
    opacity: 0;
  }
}











