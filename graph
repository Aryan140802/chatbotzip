import '../styles/GraphCarousel.css';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  PieChart, Pie, Cell, Legend
} from 'recharts';
import Download from '../assets/down-arrow.png';
import {
  getServiceWiseExp5,
  getServiceWiseSys5,
  getIpWiseExp5,
  getIpWiseSys5,
  getPortWiseExp5,
  getPortWiseSys5,
  postPortWiseExp5,
  postPortWiseSys5,
  postIpWiseSys5,
  postIpWiseExp5,
  postServiceWiseExp5,
  postServiceWiseSys5,
  getFARExpires,
  getFARDetailsSpecific,
  postGraphDownload
} from "../api/PostApi";
import { useState, useEffect, useRef } from "react";

function getDownloadPathForChart(index) {
  switch (index) {
    case 0: return "EISHome/servicewise_top5_FiveM/EXP/";
    case 1: return "EISHome/servicewise_top5_FiveM/SYS/";
    case 2: return "EISHome/ipwise_top5_FiveM/EXP/";
    case 3: return "EISHome/ipwise_top5_FiveM/SYS/";
    case 4: return "EISHome/portwise_top5_FiveM/EXP/";
    case 5: return "EISHome/portwise_top5_FiveM/SYS/";
    default: return null;
  }
}

function convertToCSV(data) {
  if (!data || !Array.isArray(data) || !data.length) return '';
  const keys = Object.keys(data[0]);
  const csvRows = [keys.join(',')];
  data.forEach(row => {
    csvRows.push(keys.map(key => `"${row[key] ?? ''}"`).join(','));
  });
  return csvRows.join('\n');
}

const formatHits = (value) => {
  if (value >= 10000000) return (value / 10000000).toFixed(2) + ' Cr';
  if (value >= 100000) return (value / 100000).toFixed(2) + ' L';
  if (value >= 1000) return (value / 1000).toFixed(2) + ' K';
  return value;
};

const formatPercent = (value) => `${(value * 100).toFixed(1)}%`;
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const ThreeDBar = (props) => {
  const { x, y, width, height, fill } = props;
  const depth = 6;
  return (
    <g>
      <rect x={x} y={y} width={width} height={height} fill={fill} style={{ transition: "all 0.3s ease" }} className="custom-bar" />
      <polygon points={`${x},${y} ${x + depth},${y - depth} ${x + width + depth},${y - depth} ${x + width},${y}`} fill="#ffffff33" />
      <polygon points={`${x + width},${y} ${x + width + depth},${y - depth} ${x + width + depth},${y + height - depth} ${x + width},${y + height}`} fill="#00000033" />
    </g>
  );
};

const GraphCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);
  const [charts, setCharts] = useState([]);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [calendarOpen, setCalendarOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [retryCount, setRetryCount] = useState(0);
  const [selectedTimeLabel, setSelectedTimeLabel] = useState("5 min");
  const [selectedTimeValue, setSelectedTimeValue] = useState("5min");
  const [currentDisplayTitle, setCurrentDisplayTitle] = useState("");
  const [showFarDetails, setShowFarDetails] = useState(false);
  const [selectedMonthData, setSelectedMonthData] = useState(null);
  const [farDetails, setFarDetails] = useState([]);
  const [isLoadingDetails, setIsLoadingDetails] = useState(false);
  const [farDetailsSearch, setFarDetailsSearch] = useState('');

  const calendarRef = useRef(null);
  const intervalRef = useRef(null);

  const COLORS = [
    '#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33F3',
    '#33FFF3', '#BD33FF', '#FF8C33', '#33FFBD', '#8C33FF',
    '#33FF8C', '#FF33BD', '#338CFF'
  ];

  const timeOptions = [
    { label: "5 min", value: "5min" },
    { label: "15 min", value: "15min" },
    { label: "30 min", value: "30min" },
    { label: "1 hour", value: "1hour" },
    { label: "Till now", value: "tillnow" },
    { label: "Yesterday", value: "yesterday" },
    { label: "Custom date", value: "custom" },
  ];

  const baseTitles = [
    'Service-wise Exp Data',
    'Service-wise Sys Data',
    'IP-wise Exp Data',
    'IP-wise Sys Data',
    'Port-wise Exp Data',
    'Port-wise Sys Data',
    'Monthly FAR Expiry Distribution'
  ];

  const handlePieClick = async (data, index) => {
    if (!data || !data.name) return;
    setSelectedMonthData(data);
    setIsLoadingDetails(true);
    setShowFarDetails(true);
    setFarDetailsSearch('');
    setPaused(true);

    try {
      const response = await getFARDetailsSpecific(data.name);
      setFarDetails((response.data && response.data.MonthlyDetails) || []);
    } catch (err) {
      setFarDetails([]);
    } finally {
      setIsLoadingDetails(false);
    }
  };

  const formatDate = (date) =>
    date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });

  const isAllChartDataEmpty = (chartData) => {
    if (!chartData || chartData.length === 0) return true;
    const dataCharts = chartData.slice(0, 6);
    return dataCharts.every(chart => !chart.data || chart.data.length === 0);
  };

  const fetchFARData = async () => {
    try {
      const response = await getFARExpires();
      const formattedData = [];
      response.data.MonthlyFarCount.forEach(monthData => {
        const [month, value] = Object.entries(monthData)[0];
        const cleanMonth = month.replace(/\s*-\s*/, ' ');
        if (value > 0) {
          formattedData.push({ name: cleanMonth, value: value });
        }
      });
      return formattedData;
    } catch (error) {
      return [];
    }
  };

  const updateChartTitles = (timeDisplay) => {
    if (charts.length === 0) return;
    const updatedCharts = charts.map((chart, index) => ({
      ...chart,
      title: index === 6 ? baseTitles[6] : `${baseTitles[index]} of ${timeDisplay}`
    }));
    setCharts(updatedCharts);
    if (currentIndex >= 0 && currentIndex < charts.length) {
      if (currentIndex === 6) {
        setCurrentDisplayTitle(baseTitles[6]);
      } else {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${timeDisplay}`);
      }
    }
  };

  const fetchFilteredData = async (timeRange, timeLabel, attemptNumber = 1) => {
    const maxRetries = 3;
    const retryDelay = 2000;
    try {
      const [
        serviceExp, serviceSys, ipExp, ipSys, portExp, portSys
      ] = await Promise.all([
        postServiceWiseExp5(timeRange),
        postServiceWiseSys5(timeRange),
        postIpWiseExp5(timeRange),
        postIpWiseSys5(timeRange),
        postPortWiseExp5(timeRange),
        postPortWiseSys5(timeRange)
      ]);
      const farChartData = await fetchFARData();
      const formatData = (data, key) => {
        if (!data || !Array.isArray(data)) return [];
        return data.map(item => ({
          ...item,
          [key]: item[key]?.toString().trim() || '',
          Hits: Number(item.Hits || 0),
          logVal: Number(item.logVal || 0)
        }));
      };
      const timeDisplay = timeRange?.startsWith('custom_') && selectedDate
        ? `Custom: ${formatDate(selectedDate)}`
        : timeLabel || selectedTimeLabel;
      const chartData = [
        {
          data: formatData(serviceExp?.data?.service_wise_top5 || [], 'Service_name'),
          dataKeyX: 'Service_name',
          baseTitle: baseTitles[0]
        },
        {
          data: formatData(serviceSys?.data?.service_wise_top5 || [], 'Service_name'),
          dataKeyX: 'Service_name',
          baseTitle: baseTitles[1]
        },
        {
          data: formatData(ipExp?.data?.Ip_wise_top5 || [], 'Ip'),
          dataKeyX: 'Ip',
          baseTitle: baseTitles[2]
        },
        {
          data: formatData(ipSys?.data?.Ip_wise_top5 || [], 'Ip'),
          dataKeyX: 'Ip',
          baseTitle: baseTitles[3]
        },
        {
          data: formatData(portExp?.data?.port_wise_top5 || [], 'Port'),
          dataKeyX: 'Port',
          baseTitle: baseTitles[4]
        },
        {
          data: formatData(portSys?.data?.port_wise_top5 || [], 'Port'),
          dataKeyX: 'Port',
          baseTitle: baseTitles[5]
        },
        {
          data: farChartData,
          dataKeyX: 'name',
          baseTitle: baseTitles[6]
        }
      ];
      if (isAllChartDataEmpty(chartData) && attemptNumber < maxRetries) {
        setRetryCount(attemptNumber);
        await wait(retryDelay);
        return await fetchFilteredData(timeRange, timeLabel, attemptNumber + 1);
      }
      setRetryCount(0);
      return chartData.map(({ data, dataKeyX, baseTitle }) => {
        let chartComponent;
        if (baseTitle === baseTitles[6]) {
          chartComponent = (
            <ResponsiveContainer>
              <PieChart margin={{ top: 30, right: 30, left: 30, bottom: 30 }}>
                <Pie
                  data={data}
                  cx="50%"
                  cy="50%"
                  labelLine
                  outerRadius={130}
                  innerRadius={60}
                  fill="#8884d8"
                  dataKey="value"
                  nameKey="name"
                  label={({ name, percent }) => `${name}: ${formatPercent(percent)}`}
                  onClick={handlePieClick}
                  style={{ cursor: 'pointer' }}
                >
                  {data.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip
                  formatter={(value) => [`${value}`, 'Count']}
                  contentStyle={{
                    backgroundColor: '#2e1a3b',
                    borderColor: '#f285c1',
                    color: '#fff',
                    borderRadius: '8px',
                    cursor: 'pointer'
                  }}
                  itemStyle={{ color: '#fff' }}
                  labelStyle={{ color: '#f285c1' }}
                />
                <Legend layout="horizontal" verticalAlign="bottom" align="center" />
              </PieChart>
            </ResponsiveContainer>
          );
        } else {
          chartComponent = (
            <ResponsiveContainer>
              <BarChart
                data={data}
                margin={{ top: 30, right: 30, left: 30, bottom: 60 }}
                barCategoryGap={10}
                key={`${baseTitle}-${timeRange}-chart`}
              >
                <defs>
                  <linearGradient id={`barGradient-${baseTitle.replace(/\s/g, '')}`} x1="0" y1="0" x2="0" y2="1">
                    {baseTitle.includes('Exp') ? (
                      <>
                        <stop offset="0%" stopColor="#6a11cb" />
                        <stop offset="100%" stopColor="#2575fc" />
                      </>
                    ) : (
                      <>
                        <stop offset="0%" stopColor="#ff6a00" />
                        <stop offset="100%" stopColor="#ee0979" />
                      </>
                    )}
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" stroke="#ffffff33" />
                <XAxis
                  dataKey={dataKeyX}
                  stroke="#f7f7f7"
                  interval={0}
                  angle={-30}
                  textAnchor="end"
                  height={60}
                  tick={{ fontSize: 13, fill: '#f7f7f7' }}
                />
                <YAxis
                  tick={{ fill: '#f7f7f7' }}
                  axisLine
                  showLine
                  tickFormatter={formatHits}
                  domain={[0, (dataMax) => Math.ceil(dataMax * 1.1)]}
                />
                <Tooltip
                  contentStyle={{ backgroundColor: '#2e1a3b', borderColor: '#f285c1', color: '#fff', borderRadius: '8px' }}
                  itemStyle={{ color: '#fff' }}
                  labelStyle={{ color: '#f285c1' }}
                  formatter={(value, name, props) => {
                    if (name === 'Hits') {
                      const formattedHits = formatHits(props.payload.Hits);
                      return [`${formattedHits} (${props.payload.Hits})`, 'Hits'];
                    }
                    return value;
                  }}
                  labelFormatter={(label) => `${dataKeyX}: ${label}`}
                />
                <Bar
                  dataKey="Hits"
                  fill={`url(#barGradient-${baseTitle.replace(/\s/g, '')})`}
                  shape={ThreeDBar}
                  barSize={50}
                />
              </BarChart>
            </ResponsiveContainer>
          );
        }
        return {
          baseTitle,
          title: baseTitle === baseTitles[6]
            ? baseTitle
            : `${baseTitle} of ${timeDisplay}`,
          rawData: data,
          chart: chartComponent
        };
      });
    } catch (error) {
      if (attemptNumber < maxRetries) {
        setRetryCount(attemptNumber);
        await wait(retryDelay);
        return await fetchFilteredData(timeRange, timeLabel, attemptNumber + 1);
      }
      setRetryCount(0);
      throw error;
    }
  };

  useEffect(() => {
    const initializeData = async () => {
      setIsLoading(true);
      try {
        const chartData = await fetchFilteredData(selectedTimeValue, selectedTimeLabel);
        if (chartData && chartData.length > 0) {
          setCharts(chartData);
          setCurrentDisplayTitle(chartData[0].title);
        }
      } finally {
        setIsLoading(false);
      }
    };
    initializeData();
    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, []);

  useEffect(() => {
    if (charts.length > 0 && currentIndex >= 0 && currentIndex < charts.length) {
      setCurrentDisplayTitle(charts[currentIndex].title);
    }
  }, [currentIndex, charts]);

  useEffect(() => {
    if (intervalRef.current) clearInterval(intervalRef.current);
    if (!paused && !showFarDetails && charts.length > 0) {
      intervalRef.current = setInterval(() => {
        setCurrentIndex(prev => (prev === charts.length - 1 ? 0 : prev + 1));
      }, 5000);
    }
    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [paused, charts.length, showFarDetails]);

  useEffect(() => {
    if (charts.length > 0) {
      updateChartTitles(selectedTimeLabel);
    }
  }, [selectedTimeLabel, charts.length]);

  const handleTimeChange = async (option) => {
    if (currentIndex === 6) return;
    if (option.value === "custom") {
      setDropdownOpen(false);
      setCalendarOpen(true);
      return;
    }
    setSelectedTimeLabel(option.label);
    setSelectedTimeValue(option.value);
    setDropdownOpen(false);
    setCalendarOpen(false);
    setPaused(true);
    setIsLoading(true);
    setRetryCount(0);
    try {
      if (currentIndex >= 0 && currentIndex < baseTitles.length) {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${option.label}`);
      }
      const updatedCharts = await fetchFilteredData(option.value, option.label);
      if (updatedCharts && updatedCharts.length > 0) {
        setCharts(updatedCharts);
        setCurrentDisplayTitle(updatedCharts[0].title);
      }
    } finally {
      setIsLoading(false);
      setPaused(false);
    }
  };

  const handleDateSelect = async (date) => {
    if (currentIndex === 6) return;
    if (!date) return;
    const formattedDate = formatDate(date);
    const dateValue = `custom_${date.toISOString().split('T')[0]}`;
    const timeLabel = `Custom: ${formattedDate}`;
    setSelectedDate(date);
    setSelectedTimeLabel(timeLabel);
    setSelectedTimeValue(dateValue);
    setCalendarOpen(false);
    setPaused(true);
    setIsLoading(true);
    setRetryCount(0);
    try {
      if (currentIndex >= 0 && currentIndex < baseTitles.length) {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${timeLabel}`);
      }
      const updatedCharts = await fetchFilteredData(dateValue, timeLabel);
      if (updatedCharts && updatedCharts.length > 0) {
        setCharts(updatedCharts);
        setCurrentDisplayTitle(updatedCharts[0].title);
      }
    } finally {
      setIsLoading(false);
      setPaused(false);
    }
  };

  const generateCalendarDays = () => {
    const today = new Date();
    const days = [];
    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    weekdays.forEach(day => days.push(<div key={`weekday-${day}`} className="calendar-weekday">{day}</div>));
    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(today.getDate() - 6);
    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
    const startDate = new Date(Math.max(sevenDaysAgo.getTime(), firstDayOfMonth.getTime()));
    const firstDayOfWeek = startDate.getDay();
    for (let i = 0; i < firstDayOfWeek; i++) {
      days.push(<div key={`empty-start-${i}`} className="calendar-day"></div>);
    }
    const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
    for (let day = startDate.getDate(); day <= lastDayOfMonth; day++) {
      const date = new Date(today.getFullYear(), today.getMonth(), day);
      const isDisabled = date > today || date < sevenDaysAgo;
      const isSelected = selectedDate && date.toDateString() === selectedDate.toDateString();
      days.push(
        <div
          key={`day-${day}`}
          className={`calendar-day ${isDisabled ? 'disabled' : ''} ${isSelected ? 'selected' : ''}`}
          onClick={() => !isDisabled && handleDateSelect(date)}
        >
          {day}
        </div>
      );
    }
    return days;
  };

  // DOWNLOAD HANDLER for bar charts
  const handleDownloadClick = async () => {
    const path = getDownloadPathForChart(currentIndex);
    if (path) {
      try {
        setIsLoading(true);
        const response = await postGraphDownload({
          path,
          time: selectedTimeValue
        });
        // Adjust this line if your backend returns data in a different field!
        const data = response.data?.result || response.data?.data || response.data;
        if (!data || !Array.isArray(data) || !data.length) {
          alert("No data received for download.");
          setIsLoading(false);
          return;
        }
        const csv = convertToCSV(data);
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `${currentDisplayTitle}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      } catch (e) {
        alert("Download failed.");
        console.error("Download failed", e);
      } finally {
        setIsLoading(false);
      }
    }
  };

  useEffect(() => {
    if (!dropdownOpen && !calendarOpen) return;
    const handleClickOutside = (event) => {
      if (!event.target.closest('.dropdown') && !event.target.closest('.calendar-container')) {
        setDropdownOpen(false);
        setCalendarOpen(false);
      }
    };
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, [dropdownOpen, calendarOpen]);

  if (!charts.length) return (
    <div className="loading-container">
      <div className="loading-spinner"></div>
      <div>Loading charts...</div>
      {retryCount > 0 && (
        <div style={{ marginTop: '10px', fontSize: '14px', color: '#888' }}>
          Retrying... (Attempt {retryCount}/3)
        </div>
      )}
    </div>
  );

  const filteredFarDetails = Array.isArray(farDetails)
    ? farDetails.filter(detail =>
        farDetailsSearch.trim() === '' ||
        (detail.Far_Id && detail.Far_Id.toString().toLowerCase().includes(farDetailsSearch.toLowerCase())) ||
        (detail.Subject && detail.Subject.toLowerCase().includes(farDetailsSearch.toLowerCase()))
      )
    : [];

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        {currentIndex !== 6 && (
          <div className="timeline-selector">
            <div className="dropdown" onClick={(e) => e.stopPropagation()}>
              <button
                className="dropdown-toggle"
                onClick={() => {
                  setDropdownOpen(!dropdownOpen);
                  setCalendarOpen(false);
                }}
              >
                {selectedTimeLabel}
              </button>
              <ul className={`dropdown-menu ${dropdownOpen ? 'show' : ''}`}>
                {timeOptions.map(option => (
                  <li
                    key={option.value}
                    onClick={() => handleTimeChange(option)}
                    className={option.value === selectedTimeValue ? 'selected' : ''}
                  >
                    {option.label}
                  </li>
                ))}
              </ul>
              {calendarOpen && (
                <div className="calendar-container" ref={calendarRef}>
                  <div className="calendar-header">
                    {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                  </div>
                  <div className="calendar">{generateCalendarDays()}</div>
                </div>
              )}
            </div>
          </div>
        )}

        <h2>
          {isLoading ? `Loading ${charts[currentIndex]?.baseTitle || ''}...` : currentDisplayTitle}
          {retryCount > 0 && (
            <span style={{ fontSize: '14px', color: '#888', marginLeft: '10px' }}>
              (Retrying... {retryCount}/3)
            </span>
          )}
        </h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={handleDownloadClick}
            disabled={isLoading || getDownloadPathForChart(currentIndex) === null}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {isLoading ? (
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <div>Loading data...</div>
            {retryCount > 0 && (
              <div style={{ marginTop: '10px', fontSize: '14px', color: '#888' }}>
                Retrying... (Attempt {retryCount}/3)
              </div>
            )}
          </div>
        ) : (
          charts.map((item, index) => (
            <div
              key={`chart-container-${index}-${selectedTimeValue}`}
              className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
              style={{ display: index === currentIndex ? 'block' : 'none' }}
            >
              {item.chart}
            </div>
          ))
        )}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={`dot-${index}`}
            className={`dot ${index === currentIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => setCurrentIndex(index)}
          />
        ))}

      {showFarDetails && (
  <div className="far-details-modal">
    <div className="modal-content">
      <div className="modal-header" style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
        <h3 style={{ margin: 0 }}>
          FAR Details for {selectedMonthData?.name}
        </h3>
        <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
          <button
            className="download-button"
            onClick={() => {
              if (!filteredFarDetails.length) return;
              const csv = convertToCSV(filteredFarDetails);
              const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
              const url = URL.createObjectURL(blob);
              const link = document.createElement('a');
              link.href = url;
              link.setAttribute('download', `FAR_Details_${selectedMonthData?.name}.csv`);
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
              URL.revokeObjectURL(url);
            }}
            disabled={isLoadingDetails || !filteredFarDetails.length}
            title="Download FAR Details"
            style={{ background: "none", border: "none", padding: 0, cursor: "pointer" }}
          >
            <img
              className="logo"
              src={Download}
              alt="Download Icon"
              style={{ height: '28px' }}
            />
          </button>
          <button
            onClick={() => {
              setShowFarDetails(false);
              setPaused(false);
            }}
            style={{
              background: 'none',
              border: 'none',
              color: '#f285c1',
              fontSize: '24px',
              cursor: 'pointer',
              padding: '5px',
              marginLeft: '8px'
            }}
            title="Close"
            aria-label="Close"
          >×</button>
        </div>
      </div>
      <div className="modal-body" style={{
        padding: '20px',
        maxHeight: '500px',
        display: 'flex',
        flexDirection: 'column',
        overflow: 'hidden'
      }}>
        {isLoadingDetails ? (
          <div style={{ textAlign: 'center', color: '#fff' }}>
            <div className="loading-spinner"></div>
            <p>Loading FAR details...</p>
          </div>
        ) : (
          <>
            <div className="far-Search" style={{
              paddingBottom: '10px',
              position: 'sticky',
              top: 0,
              backgroundColor: '#2e1a3b',
              zIndex: 2
            }}>
              <input
                type="text"
                placeholder="Search FAR ID or Subject"
                value={farDetailsSearch}
                onChange={e => setFarDetailsSearch(e.target.value)}
                style={{
                  width: '98%',
                  padding: '10px',
                  borderRadius: '4px',
                  border: '1px solid #ccc'
                }}
              />
            </div>
            <div className="far-details-table" style={{
              overflowY: 'auto',
              flex: 1,
              position: 'relative'
            }}>
              <table style={{ width: '100%' }}>
                <thead style={{
                  position: 'sticky',
                  top: 0,
                  backgroundColor: '#2e1a3b',
                  zIndex: 1
                }}>
                  <tr>
                    <th style={{ padding: '8px', textAlign: 'left' }}>FAR ID</th>
                    <th style={{ padding: '8px', textAlign: 'left' }}>Subject</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredFarDetails.length > 0 ? (
                    filteredFarDetails.map((detail, index) => (
                      <tr key={index} style={{ borderBottom: '1px solid #444' }}>
                        <td style={{ padding: '8px' }}>{detail.Far_Id || 'N/A'}</td>
                        <td style={{ padding: '8px' }}>{detail.Subject || 'N/A'}</td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={2} style={{ textAlign: 'center', padding: '8px' }}>
                        No FAR details found
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </>
        )}
      </div>
    </div>
  </div>
)}
      </div>
    </div>
  );
};

export default GraphCarousel;
