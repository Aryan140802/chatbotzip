import '../styles/GraphCarousel.css';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer
} from 'recharts';

import Download from '../assets/down-arrow.png';
import {
  getServiceSys,
  getServiceWiseExp5,
  getServiceWiseSys5,
  getIpWiseExp5,
  getIpWiseSys5,
  getPortWiseExp5,
  getPortWiseSys5
} from "../api/PostApi";

import { useState, useEffect } from "react";

let csvGlobal;

const getServiceSysData = async () => {
  const res = await getServiceSys();
  const convertToCSV = (jsonData, sortBy = 'Hits') => {
    if (!jsonData || !jsonData.length) return '';
    const sortedData = [...jsonData].sort((a, b) => b[sortBy] - a[sortBy]);
    const headers = Object.keys(sortedData[0]);
    const csvRows = [
      headers.join(','),
      ...sortedData.map(row => headers.map(field => `"${row[field]}"`).join(','))
    ];
    return csvRows.join('\n');
  };
  csvGlobal = convertToCSV(res.data, 'Hits');
};

const GraphCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);

  const [serviceWiseExp5Data, setServiceWiseExp5Data] = useState([]);
  const [serviceWiseSys5Data, setServiceWiseSys5Data] = useState([]);
  const [ipWiseExp5Data, setIpWiseExp5Data] = useState([]);
  const [ipWiseSys5Data, setIpWiseSys5Data] = useState([]);
  const [portWiseExp5Data, setPortWiseExp5Data] = useState([]);
  const [portWiseSys5Data, setPortWiseSys5Data] = useState([]);

  useEffect(() => {
    getServiceSysData();

    getServiceWiseExp5().then((res) => {
      setServiceWiseExp5Data(res.data.service_wise_top5.map(item => ({
        Service_name: item.Service_name,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getServiceWiseSys5().then((res) => {
      setServiceWiseSys5Data(res.data.service_wise_top5.map(item => ({
        Service_name: item.Service_name,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getIpWiseExp5().then((res) => {
      setIpWiseExp5Data(res.data.ip_wise_top5.map(item => ({
        Ip: item.Ip,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getIpWiseSys5().then((res) => {
      setIpWiseSys5Data(res.data.ip_wise_top5.map(item => ({
        Ip: item.Ip,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getPortWiseExp5().then((res) => {
      setPortWiseExp5Data(res.data.port_wise_top5.map(item => ({
        Port: item.Port,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });

    getPortWiseSys5().then((res) => {
      setPortWiseSys5Data(res.data.port_wise_top5.map(item => ({
        Port: item.Port,
        logVal: item.logVal,
        Hits: item.Hits
      })));
    });
  }, []);

  const renderBarChart = (data, dataKeyX, title) => ({
    title,
    chart: (
      <ResponsiveContainer>
        <BarChart
          data={data}
          margin={{ top: 30, right: 30, left: 30, bottom: 60 }}
          barCategoryGap={30}
        >
          <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
          <XAxis
            dataKey={dataKeyX}
            stroke="var(--text-color)"
            interval={0}
            angle={-30}
            textAnchor="end"
            height={60}
            tick={{ fontSize: 10 }}
          />
          <YAxis tick={false} axisLine showLine />
          <Tooltip
            formatter={(value, name, props) => {
              if (name === 'logVal') {
                return [`${props.payload.Hits}`, 'Hits'];
              }
              return value;
            }}
            labelFormatter={(label) => `${dataKeyX}: ${label}`}
          />
          <Bar dataKey="logVal" fill="#894a89" />
        </BarChart>
      </ResponsiveContainer>
    )
  });

  const charts = [
    renderBarChart(serviceWiseExp5Data, "Service_name", "Service-wise Exp Data"),
    renderBarChart(serviceWiseSys5Data, "Service_name", "Service-wise Sys Data"),
    renderBarChart(ipWiseExp5Data, "Ip", "IP-wise Exp Data"),
    renderBarChart(ipWiseSys5Data, "Ip", "IP-wise Sys Data"),
    renderBarChart(portWiseExp5Data, "Port", "Port-wise Exp Data"),
    renderBarChart(portWiseSys5Data, "Port", "Port-wise Sys Data"),
  ];

  const goToSlide = (index) => setCurrentIndex(index);

  const downloadCSV = (data, filename = 'chart-data.csv') => {
    if (!data || !data.length) return;
    const keys = Object.keys(data[0]);
    const csvContent = [
      keys.join(','),
      ...data.map(row => keys.map(key => `"${row[key]}"`).join(','))
    ].join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  useEffect(() => {
    if (paused) return;
    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) =>
        prevIndex === charts.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000);
    return () => clearInterval(interval);
  }, [paused]);

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        <h2>{charts[currentIndex].title}</h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={() => downloadCSV(csvGlobal, `${charts[currentIndex].title}.csv`)}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {charts.map((item, index) => (
          <div
            key={index}
            className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
            style={{ display: index === currentIndex ? 'block' : 'none' }}
          >
            {item.chart}
          </div>
        ))}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={index}
            className={`dot ${index === currentIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => goToSlide(index)}
          />
        ))}
      </div>
    </div>
  );
};

export default GraphCarousel;
