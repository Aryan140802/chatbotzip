import '../styles/GraphCarousel.css';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  PieChart, Pie, Cell, Legend
} from 'recharts';
import Download from '../assets/down-arrow.png';
import {
  getServiceWiseExp5,
  getServiceWiseSys5,
  getIpWiseExp5,
  getIpWiseSys5,
  getPortWiseExp5,
  getPortWiseSys5,
  postPortWiseExp5,
  postPortWiseSys5,
  postIpWiseSys5,
  postIpWiseExp5,
  postServiceWiseExp5,
  postServiceWiseSys5,
  getFARExpires,
  getFARDetailsSpecific,
  postGraphDownload,
  postMqOverall,
  postMqSource,
  postMqHourly
} from "../api/PostApi";
import { useState, useEffect, useRef } from "react";

// ---- CSV helpers ----
const farHeaders = [
  "Far_Id", "Subject", "Status", "Created", "Dependent_application", "Permanent_Rule", "ZONE"
];

function convertToCSV(data, options = {}) {
  if (!Array.isArray(data) || !data.length) return '';
  let keys;
  if (options.headers) {
    keys = options.headers;
  } else {
    keys = Object.keys(data[0]).filter(k => !(options.excludeKeys || []).includes(k));
  }
  const csvRows = [keys.join(',')];
  data.forEach(row => {
    csvRows.push(keys.map(key => `"${row[key] ?? ''}"`).join(','));
  });
  return csvRows.join('\n');
}

function extractFirstArray(obj) {
  if (Array.isArray(obj)) return obj;
  if (obj && typeof obj === 'object') {
    for (const value of Object.values(obj)) {
      if (Array.isArray(value)) return value;
      if (value && typeof value === 'object') {
        for (const nestedValue of Object.values(value)) {
          if (Array.isArray(nestedValue)) return nestedValue;
        }
      }
    }
  }
  return null;
}

function getDownloadPathForChart(index) {
  switch (index) {
    case 0: return { path: "EISHome/servicewise_top5_FiveM/EXP/" };
    case 1: return { path: "EISHome/servicewise_top5_FiveM/SYS/" };
    case 2: return { path: "EISHome/ipwise_top5_FiveM/EXP/" };
    case 3: return { path: "EISHome/ipwise_top5_FiveM/SYS/" };
    case 4: return { path: "EISHome/portwise_top5_FiveM/EXP/" };
    case 5: return { path: "EISHome/portwise_top5_FiveM/SYS/" };
    case 6: return { path: "FAR_EXPIRY_ALL" };
    case 7: return { path: "EISHome/mqOverall/", layer: "exp" };
    case 8: return { path: "EISHome/mqOverall/", layer: "sys" };
    case 9: return { path: "EISHome/mqSource/", layer: "exp" };
    case 10: return { path: "EISHome/mqSource/", layer: "sys" };
    case 11: return { path: "EISHome/mqHourly/", layer: "exp" };
    case 12: return { path: "EISHome/mqHourly/", layer: "sys" };
    default: return null;
  }
}

const formatHits = (value) => {
  if (value >= 10000000) return (value / 10000000).toFixed(2) + ' Cr';
  if (value >= 100000) return (value / 100000).toFixed(2) + ' L';
  if (value >= 1000) return (value / 1000).toFixed(2) + ' K';
  return value;
};

const formatPercent = (value) => `${(value * 100).toFixed(1)}%`;
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const ThreeDBar = (props) => {
  const { x, y, width, height, fill } = props;
  const depth = 6;
  return (
    <g>
      <rect x={x} y={y} width={width} height={height} fill={fill} style={{ transition: "all 0.3s ease" }} className="custom-bar" />
      <polygon points={`${x},${y} ${x + depth},${y - depth} ${x + width + depth},${y - depth} ${x + width},${y}`} fill="#ffffff33" />
      <polygon points={`${x + width},${y} ${x + width + depth},${y - depth} ${x + width + depth},${y + height - depth} ${x + width},${y + height}`} fill="#00000033" />
    </g>
  );
};

const MQ_TITLES = [
  'MQ Overall EXP', 'MQ Overall SYS',
  'MQ Source EXP', 'MQ Source SYS',
  'MQ Hourly EXP', 'MQ Hourly SYS'
];

// Utility functions to extract correct array for each MQ chart
const getMqOverallArray = res => res.data?.mqOverallWiseWLog || [];
const getMqSourceArray  = res => res.data?.mqSourceWiseWLog || [];
const getMqHourlyArray  = res => res.data?.HourlyMqDetails || [];

const GraphCarousel = () => {
  // --- regular charts ---
  const [charts, setCharts] = useState([]);
  // --- MQ charts ---
  const [mqCharts, setMqCharts] = useState([]);
  const [mqHour, setMqHour] = useState(() => {
    const h = new Date().getHours();
    return h < 9 ? 9 : h > 18 ? 18 : h;
  });
  
  // --- UI state ---
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [calendarOpen, setCalendarOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [retryCount, setRetryCount] = useState(0);
  const [selectedTimeLabel, setSelectedTimeLabel] = useState("5 min");
  const [selectedTimeValue, setSelectedTimeValue] = useState("5min");
  const [currentDisplayTitle, setCurrentDisplayTitle] = useState("");
  const [showFarDetails, setShowFarDetails] = useState(false);
  const [selectedMonthData, setSelectedMonthData] = useState(null);
  const [farDetails, setFarDetails] = useState([]);
  const [isLoadingDetails, setIsLoadingDetails] = useState(false);
  const [farDetailsSearch, setFarDetailsSearch] = useState('');
  
  const calendarRef = useRef(null);
  const intervalRef = useRef(null);

  const COLORS = [
    '#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33F3',
    '#33FFF3', '#BD33FF', '#FF8C33', '#33FFBD', '#8C33FF',
    '#33FF8C', '#FF33BD', '#338CFF'
  ];

  const timeOptions = [
    { label: "5 min", value: "5min" },
    { label: "15 min", value: "15min" },
    { label: "30 min", value: "30min" },
    { label: "1 hour", value: "1hour" },
    { label: "Till now", value: "tillnow" },
    { label: "Yesterday", value: "yesterday" },
    { label: "Custom date", value: "custom" },
  ];

  const baseTitles = [
    'Service-wise Exp Data',
    'Service-wise Sys Data', 
    'IP-wise Exp Data',
    'IP-wise Sys Data',
    'Port-wise Exp Data',
    'Port-wise Sys Data',
    'Monthly FAR Expiry Distribution',
    ...MQ_TITLES
  ];

  // --- fetch and combine chart data ---
  useEffect(() => {
    (async () => {
      setIsLoading(true);
      // fetch regular charts
      const [
        serviceExp, serviceSys, ipExp, ipSys, portExp, portSys
      ] = await Promise.all([
        postServiceWiseExp5(selectedTimeValue),
        postServiceWiseSys5(selectedTimeValue),
        postIpWiseExp5(selectedTimeValue),
        postIpWiseSys5(selectedTimeValue),
        postPortWiseExp5(selectedTimeValue),
        postPortWiseSys5(selectedTimeValue)
      ]);
      const farResp = await getFARExpires();
      const farChartData = [];
      if (farResp?.data?.MonthlyFarCount) {
        farResp.data.MonthlyFarCount.forEach(monthData => {
          const [month, value] = Object.entries(monthData)[0];
          const cleanMonth = month.replace(/\s*-\s*/, ' ');
          if (value > 0) {
            farChartData.push({ name: cleanMonth, value: value });
          }
        });
      }
      function formatData(data, key) {
        if (!data || !Array.isArray(data)) return [];
        return data.map(item => ({
          ...item,
          [key]: item[key]?.toString().trim() || '',
          Hits: Number(item.Hits || 0),
          logVal: Number(item.logVal || 0)
        }));
      }
      const chartData = [
        {
          data: formatData(serviceExp?.data?.service_wise_top5 || [], 'Service_name'),
          dataKeyX: 'Service_name',
          baseTitle: baseTitles[0]
        },
        {
          data: formatData(serviceSys?.data?.service_wise_top5 || [], 'Service_name'),
          dataKeyX: 'Service_name',
          baseTitle: baseTitles[1]
        },
        {
          data: formatData(ipExp?.data?.Ip_wise_top5 || [], 'Ip'),
          dataKeyX: 'Ip',
          baseTitle: baseTitles[2]
        },
        {
          data: formatData(ipSys?.data?.Ip_wise_top5 || [], 'Ip'),
          dataKeyX: 'Ip',
          baseTitle: baseTitles[3]
        },
        {
          data: formatData(portExp?.data?.port_wise_top5 || [], 'Port'),
          dataKeyX: 'Port',
          baseTitle: baseTitles[4]
        },
        {
          data: formatData(portSys?.data?.port_wise_top5 || [], 'Port'),
          dataKeyX: 'Port',
          baseTitle: baseTitles[5]
        },
        {
          data: farChartData,
          dataKeyX: 'name',
          baseTitle: baseTitles[6]
        }
      ];
      setCharts(chartData);
      setIsLoading(false);
    })();
  }, [selectedTimeValue]);

  // fetch MQ charts (server/msgCount)
  useEffect(() => {
    (async () => {
      const hourStr = mqHour >= 9 && mqHour <= 18 ? String(mqHour).padStart(2, '0') : null;
      const [
        overallExp, overallSys,
        sourceExp, sourceSys,
        hourlyExp, hourlySys
      ] = await Promise.all([
        postMqOverall('exp'),
        postMqOverall('sys'),
        postMqSource('exp'),
        postMqSource('sys'),
        hourStr ? postMqHourly('exp', hourStr) : { data: { HourlyMqDetails: [] } },
        hourStr ? postMqHourly('sys', hourStr) : { data: { HourlyMqDetails: [] } }
      ]);
      setMqCharts([
        {
          baseTitle: MQ_TITLES[0],
          title: MQ_TITLES[0],
          rawData: getMqOverallArray(overallExp),
          chart: (
            <ResponsiveContainer>
              <BarChart data={getMqOverallArray(overallExp)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="server" />
                <YAxis tickFormatter={formatHits} />
                <Tooltip />
                <Bar dataKey="msgCount" fill="#6a11cb" shape={ThreeDBar} barSize={50} />
              </BarChart>
            </ResponsiveContainer>
          )
        },
        {
          baseTitle: MQ_TITLES[1],
          title: MQ_TITLES[1],
          rawData: getMqOverallArray(overallSys),
          chart: (
            <ResponsiveContainer>
              <BarChart data={getMqOverallArray(overallSys)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="server" />
                <YAxis tickFormatter={formatHits} />
                <Tooltip />
                <Bar dataKey="msgCount" fill="#ff6a00" shape={ThreeDBar} barSize={50} />
              </BarChart>
            </ResponsiveContainer>
          )
        },
        {
          baseTitle: MQ_TITLES[2],
          title: MQ_TITLES[2],
          rawData: getMqSourceArray(sourceExp),
          chart: (
            <ResponsiveContainer>
              <BarChart data={getMqSourceArray(sourceExp)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="server" />
                <YAxis tickFormatter={formatHits} />
                <Tooltip />
                <Bar dataKey="msgCount" fill="#6a11cb" shape={ThreeDBar} barSize={50} />
              </BarChart>
            </ResponsiveContainer>
          )
        },
        {
          baseTitle: MQ_TITLES[3],
          title: MQ_TITLES[3],
          rawData: getMqSourceArray(sourceSys),
          chart: (
            <ResponsiveContainer>
              <BarChart data={getMqSourceArray(sourceSys)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="server" />
                <YAxis tickFormatter={formatHits} />
                <Tooltip />
                <Bar dataKey="msgCount" fill="#ff6a00" shape={ThreeDBar} barSize={50} />
              </BarChart>
            </ResponsiveContainer>
          )
        },
        {
          baseTitle: MQ_TITLES[4],
          title: MQ_TITLES[4],
          rawData: getMqHourlyArray(hourlyExp),
          chart: (
            <ResponsiveContainer>
              <BarChart data={getMqHourlyArray(hourlyExp)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="server" />
                <YAxis tickFormatter={formatHits} />
                <Tooltip />
                <Bar dataKey="msgCount" fill="#6a11cb" shape={ThreeDBar} barSize={50} />
              </BarChart>
            </ResponsiveContainer>
          )
        },
        {
          baseTitle: MQ_TITLES[5],
          title: MQ_TITLES[5],
          rawData: getMqHourlyArray(hourlySys),
          chart: (
            <ResponsiveContainer>
              <BarChart data={getMqHourlyArray(hourlySys)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="server" />
                <YAxis tickFormatter={formatHits} />
                <Tooltip />
                <Bar dataKey="msgCount" fill="#ff6a00" shape={ThreeDBar} barSize={50} />
              </BarChart>
            </ResponsiveContainer>
          )
        }
      ]);
    })();
  }, [mqHour]);

  // combine charts 
  const allCharts = [...charts, ...mqCharts];
  const isMQHourly = currentIndex >= charts.length + 4 && currentIndex <= charts.length + 5;
  const timerEnabled = mqHour >= 9 && mqHour <= 18;

  // Download logic (handles both original and MQ charts, FAR modal)
  const handleDownloadClick = async () => {
    const downloadInfo = getDownloadPathForChart(currentIndex);
    if (!downloadInfo) return;

    const path = downloadInfo.path;
    const layer = downloadInfo.layer;

    if (path === "FAR_EXPIRY_ALL" && charts[6]?.rawData) {
      try {
        setIsLoading(true);
        const farMonths = charts[6].rawData.map(item => item.name);
        const allDetailsResponses = await Promise.all(
          farMonths.map(month => getFARDetailsSpecific(month))
        );
        const allDetails = allDetailsResponses.flatMap(resp =>
          resp.data?.MonthlyDetails || []
        );
        if (!allDetails.length) {
          alert("No FAR details available for download.");
          setIsLoading(false);
          return;
        }
        const csv = convertToCSV(allDetails, { headers: farHeaders });
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `FAR_Details_ALL.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      } catch (e) {
        alert("Download failed.");
      } finally {
        setIsLoading(false);
      }
      return;
    }

    try {
      setIsLoading(true);
      let data;
      if (currentIndex >= charts.length) {
        // MQ charts
        const mqIdx = currentIndex - charts.length;
        let payload = {
          username: localStorage.getItem('uidd'),
          password: localStorage.getItem('password'),
        };
        if (layer) payload.layer = layer;
        if (mqIdx >= 4) payload.hour = String(mqHour).padStart(2, '0');
        const res = await postGraphDownload({ path, ...payload });
        data = extractFirstArray(res.data);
      } else {
        // Non-MQ
        const response = await postGraphDownload({
          path,
          time: selectedTimeValue
        });
        data = extractFirstArray(response.data);
      }

      if (!data || !Array.isArray(data) || !data.length) {
        alert("No data received for download.");
        setIsLoading(false);
        return;
      }

      // Remove logVal for all graph CSVs
      const csv = convertToCSV(data, { excludeKeys: ['logVal'] });
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `${allCharts[currentIndex]?.baseTitle || 'chart'}.csv`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (e) {
      alert("Download failed.");
    } finally {
      setIsLoading(false);
    }
  };

  // FAR details modal
  const handlePieClick = async (data) => {
    if (!data || !data.name) return;
    setSelectedMonthData(data);
    setIsLoadingDetails(true);
    setShowFarDetails(true);
    setFarDetailsSearch('');
    setPaused(true);

    try {
      const response = await getFARDetailsSpecific(data.name);
      setFarDetails((response.data && response.data.MonthlyDetails) || []);
    } catch (err) {
      setFarDetails([]);
    } finally {
      setIsLoadingDetails(false);
    }
  };

  // Patch: show FAR modal on pie click for chart #6
  if (allCharts[6] && allCharts[6].baseTitle === "Monthly FAR Expiry Distribution") {
    allCharts[6].chart = (
      <ResponsiveContainer>
        <PieChart margin={{ top: 30, right: 30, left: 30, bottom: 30 }}>
          <Pie
            data={allCharts[6].rawData}
            cx="50%"
            cy="50%"
            labelLine
            outerRadius={130}
            innerRadius={60}
            fill="#8884d8"
            dataKey="value"
            nameKey="name"
            label={({ name, percent }) => `${name}: ${formatPercent(percent)}`}
            onClick={handlePieClick}
            style={{ cursor: 'pointer' }}
          >
            {allCharts[6].rawData.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
            ))}
          </Pie>
          <Tooltip 
            formatter={(value) => [`${value}`, 'Count']}
            contentStyle={{
              backgroundColor: '#2e1a3b',
              borderColor: '#f285c1',
              color: '#fff',
              borderRadius: '8px',
              cursor: 'pointer'
            }}
            itemStyle={{ color: '#fff' }}
            labelStyle={{ color: '#f285c1' }}
          />
          <Legend layout="horizontal" verticalAlign="bottom" align="center" />
        </PieChart>
      </ResponsiveContainer>
    );
  }

  const filteredFarDetails = Array.isArray(farDetails)
    ? farDetails.filter(detail =>
        farDetailsSearch.trim() === '' ||
        (detail.Far_Id && detail.Far_Id.toString().toLowerCase().includes(farDetailsSearch.toLowerCase())) ||
        (detail.Subject && detail.Subject.toLowerCase().includes(farDetailsSearch.toLowerCase()))
      )
    : [];

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        <h2>
          {isLoading ? `Loading ${allCharts[currentIndex]?.baseTitle || ''}...` : allCharts[currentIndex]?.baseTitle}
        </h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={handleDownloadClick}
            disabled={isLoading || !getDownloadPathForChart(currentIndex)}
          >
            <img
              className="logo"
              src={Download}
              alt="Download Icon"
              style={{ height: '36px', marginRight: '3px' }}
            />
          </button>
        </div>
      </div>

      {isMQHourly && (
        <div style={{ margin: "10px 0" }}>
          <label>
            Hour:&nbsp;
            <input
              type="number"
              min={9}
              max={18}
              value={mqHour}
              onChange={e => setMqHour(Number(e.target.value))}
              disabled={!timerEnabled}
              style={{ width: 60 }}
            />
          </label>
          {!timerEnabled && (
            <span style={{ color: 'gray', marginLeft: 8 }}>
              Timer active from 9AM to 6PM
            </span>
          )}
        </div>
      )}

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {isLoading ? (
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <div>Loading data...</div>
            {retryCount > 0 && (
              <div style={{ marginTop: '10px', fontSize: '14px', color: '#888' }}>
                Retrying... (Attempt {retryCount}/3)
              </div>
            )}
          </div>
        ) : (
          allCharts.map((item, index) => (
            <div
              key={`chart-container-${index}`}
              className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
              style={{ display: index === currentIndex ? 'block' : 'none' }}
            >
              {item.chart}
            </div>
          ))
        )}
      </div>

      {/* Carousel dots */}
      <div className="carousel-dots">
        {allCharts.map((_, index) => (
          <span
            key={`dot-${index}`}
            className={`dot ${index === currentIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => setCurrentIndex(index)}
          />
        ))}
      </div>

      {/* FAR details modal */}
      {showFarDetails && (
        <div className="far-details-modal">
          <div className="modal-content">
            <div className="modal-header" style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
              <h3 style={{ margin: 0 }}>
                FAR Details for {selectedMonthData?.name}
              </h3>
              <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
                <button
                  className="download-button"
                  onClick={() => {
                    if (!filteredFarDetails.length) return;
                    const csv = convertToCSV(filteredFarDetails, { headers: farHeaders });
                    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', `FAR_Details_${selectedMonthData?.name}.csv`);
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                  }}
                  disabled={isLoadingDetails || !filteredFarDetails.length}
                  title="Download FAR Details"
                  style={{ background: "none", border: "none", padding: 0, cursor: "pointer" }}
                >
                  <img
                    className="logo"
                    src={Download}
                    alt="Download Icon"
                    style={{ height: '28px' }}
                  />
                </button>
                <button
                  onClick={() => {
                    setShowFarDetails(false);
                    setPaused(false);
                  }}
                  style={{
                    background: 'none',
                    border: 'none',
                    color: '#f285c1',
                    fontSize: '24px',
                    cursor: 'pointer',
                    padding: '5px',
                    marginLeft: '8px'
                  }}
                  title="Close"
                  aria-label="Close"
                >×</button>
              </div>
            </div>
            <div className="modal-body" style={{
              padding: '20px',
              maxHeight: '500px',
              display: 'flex',
              flexDirection: 'column',
              overflow: 'hidden'
            }}>
              {isLoadingDetails ? (
                <div style={{ textAlign: 'center', color: '#fff' }}>
                  <div className="loading-spinner"></div>
                  <p>Loading FAR details...</p>
                </div>
              ) : (
                <>
                  <div className="far-Search" style={{
                    paddingBottom: '10px',
                    position: 'sticky',
                    top: 0,
                    backgroundColor: '#2e1a3b',
                    zIndex: 2
                  }}>
                    <input
                      type="text"
                      placeholder="Search FAR ID or Subject"
                      value={farDetailsSearch}
                      onChange={e => setFarDetailsSearch(e.target.value)}
                      style={{
                        width: '98%',
                        padding: '10px',
                        borderRadius: '4px',
                        border: '1px solid #ccc'
                      }}
                    />
                  </div>
                  <div className="far-details-table" style={{
                    overflowY: 'auto',
                    flex: 1,
                    position: 'relative'
                  }}>
                    <table style={{ width: '100%' }}>
                      <thead style={{
                        position: 'sticky',
                        top: 0,
                        backgroundColor: '#2e1a3b',
                        zIndex: 1
                      }}>
                        <tr>
                          <th style={{ padding: '8px', textAlign: 'left' }}>FAR ID</th>
                          <th style={{ padding: '8px', textAlign: 'left' }}>Subject</th>
                          <th style={{ padding: '8px', textAlign: 'left' }}>Status</th>
                          <th style={{ padding: '8px', textAlign: 'left' }}>Created</th>
                          <th style={{ padding: '8px', textAlign: 'left' }}>Dependent Application</th>
                          <th style={{ padding: '8px', textAlign: 'left' }}>Permanent Rule</th>
                          <th style={{ padding: '8px', textAlign: 'left' }}>Zone</th>
                        </tr>
                      </thead>
                      <tbody>
                        {filteredFarDetails.length > 0 ? (
                          filteredFarDetails.map((detail, index) => (
                            <tr key={index}>
                              <td style={{ padding: '8px' }}>{detail.Far_Id || 'N/A'}</td>
                              <td style={{ padding: '8px' }}>{detail.Subject || 'N/A'}</td>
                              <td style={{ padding: '8px' }}>{detail.Status || 'N/A'}</td>
                              <td style={{ padding: '8px' }}>{detail.Created || 'N/A'}</td>
                              <td style={{ padding: '8px' }}>{detail.Dependent_application || 'N/A'}</td>
                              <td style={{ padding: '8px' }}>{detail.Permanent_Rule || 'N/A'}</td>
                              <td style={{ padding: '8px' }}>{detail.ZONE || 'N/A'}</td>
                            </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan={7} style={{ textAlign: 'center', padding: '8px' }}>
                              No FAR details found
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GraphCarousel;
