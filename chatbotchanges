import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Case 1: HTML-formatted messages with <b> tags
  if (text.includes("<b>")) {
    const pattern = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
    const lines = [];
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const key = match[1].trim();
      const value = match[2].trim().replace(/\n/g, "<br/>");
      lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
    }
    return `<div class="formatted-card">${lines.join("")}</div>`;
  }

  // Case 2: Likely a server config line (very long, no <b>, many ":")
  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";
    let index = 0;

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return `<div class="formatted-card">${formatted.trim()}</div>`;
  }

  // Default plain text
  const cleanedText = text.replace(/:,\s*$/, ":").trim();
  return cleanedText;
};

const FormFieldRenderer = ({ message, onFieldUpdate, onOptionClick, onFormSubmit, onFormClose }) => {
  const [expandedField, setExpandedField] = useState(null);
  const [formData, setFormData] = useState({});
  
  // Initialize form data with current field values
  useEffect(() => {
    if (typeof message !== 'object' || message === null) return;

    Object.keys(message).forEach(key => {
      if (key === 'options') {
        regularOptions.push(...message[key]);
      } else if (key.endsWith('options')) {
        const fieldName = key.replace('options', '');
        optionFields[fieldName] = message[key];
      } else if (key !== 'sender') {
        formFields[key] = message[key];
      }
    });

    const initialFormData = {};
    Object.entries(message).forEach(([key, value]) => {
      if (key !== 'sender' && key !== 'options') {
        // Convert backend array data to form format
        initialFormData[key] = Array.isArray(value) ? value : [value];
      }
    });
    setFormData(initialFormData);
  }, [message]);


  // Early return after hooks
  if (typeof message !== 'object' || message === null) {
    return null;
  }

  // Re-extract fields for rendering
  Object.keys(message).forEach(key => {
    if (key === 'options') {
      regularOptions.push(...message[key]);
    } else if (key.endsWith('options')) {
      const fieldName = key.replace('options', '');
      optionFields[fieldName] = message[key];
    } else if (key !== 'sender') {
      formFields[key] = message[key];
    }
  });

  // Helper function to check if a field is empty
  const isFieldEmpty = (fieldValue) => {
    if (fieldValue === "" || fieldValue === "date") return true;
    if (Array.isArray(fieldValue) && fieldValue.length === 0) return true;
    return false;
  };

  // Helper function to check if field has values to show in dropdown
  const hasFieldValues = (fieldValue, fieldName) => {
    if (Array.isArray(fieldValue) && fieldValue.length > 0) return true;
    if (optionFields[fieldName] && optionFields[fieldName].length > 0) return true;
    return false;
  };

  const handleFieldClick = (fieldName) => {
    const fieldValue = formFields[fieldName];
    
    if (Array.isArray(fieldValue) && fieldValue.length > 0) {
      // If field is an array with values, toggle dropdown
      setExpandedField(expandedField === fieldName ? null : fieldName);
    } else if (optionFields[fieldName] && optionFields[fieldName].length > 0) {
      // If field has options, toggle dropdown
      setExpandedField(expandedField === fieldName ? null : fieldName);
    }
  };

  const handleOptionSelect = (fieldName, option) => {
    // Update form data
    setFormData(prev => ({
      ...prev,
      [fieldName]: Array.isArray(formData[fieldName]) 
        ? [...(formData[fieldName] || []), option]
        : option
    }));
    setExpandedField(null);
  };

  const handleInputChange = (fieldName, value) => {
    const fieldType = formFields[fieldName];
    
    if (Array.isArray(fieldType)) {
      // For array fields, we'll handle multiple values separated by commas
      const values = value.split(',').map(v => v.trim()).filter(v => v);
      setFormData(prev => ({
        ...prev,
        [fieldName]: values
      }));
    } else {
      // For single value fields
      setFormData(prev => ({
        ...prev,
        [fieldName]: value
      }));
    }
  };

  const handleRemoveItem = (fieldName, index) => {
    setFormData(prev => ({
      ...prev,
      [fieldName]: prev[fieldName].filter((_, i) => i !== index)
    }));
  };

  const getDisplayValue = (fieldName) => {
    const formValue = formData[fieldName];
    const originalValue = formFields[fieldName];
    
    // Use form data if available, otherwise use original value
    const value = formValue !== undefined ? formValue : originalValue;
    
    if (Array.isArray(value)) {
      return value.length === 0 ? 'No items selected' : `${value.length} item(s) selected`;
    }
    return value || 'Not set';
  };

  const getDropdownOptions = (fieldName, fieldValue) => {
    // If field is an array with values, show those values
    if (Array.isArray(fieldValue) && fieldValue.length > 0) {
      return fieldValue;
    }
    // Otherwise, show options from optionFields
    return optionFields[fieldName] || [];
  };

 const handleFormSubmit = async (formData) => {
  // Convert form data to array format for backend
  const formSubmission = Object.entries(formData).map(([fieldName, fieldValue]) => ({
    fieldName,
    fieldValue: Array.isArray(fieldValue) ? fieldValue : [fieldValue] // Ensure value is always an array
  }));

  const userMsg = {
    id: Date.now(),
    text: "Form submitted", // Simple display message
    sender: "user",
    time: getCurrentTime(),
  };

  setMessages((prev) => [...prev, userMsg]);
  setIsTyping(true);
  setFormDisabled(true);

  try {
    setApiTimeout(() => {});
    const res = await postMessage({
      url: "https://10.191.171.12:5443/Pyportal/EIS-GINI",
      data: formSubmission
    });
    clearCurrentTimeout();

    const latest = res.data.chat_history?.slice(-1)[0];
    if (latest) {
      const botResponse = {
        id: Date.now(),
        text: latest.message || "",
        sender: "bot",
        time: getCurrentTime(),
        options: latest.options || [],
        originalMessage: latest.fields || latest.message // Handle both field-based and text responses
      };
      setMessages((prev) => [...prev, botResponse]);
      setFormDisabled(!checkEnableForm(botResponse.text));
    }
  } catch (error) {
    clearCurrentTimeout();
    setMessages((prev) => [
      ...prev,
      {
        id: Date.now(),
        text: "An error occurred while submitting the form. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      },
    ]);
    console.error("Form submission error:", error);
  }

  setIsTyping(false);
};

  const isFormValid = () => {
    const requiredFields = Object.keys(formFields).filter(fieldName => {
      const fieldValue = formFields[fieldName];
      return isFieldEmpty(fieldValue) && !Array.isArray(fieldValue);
    });

    return requiredFields.every(fieldName => formData[fieldName]);
  };

  return (
    <div className="form-container">
      <div className="form-header">
        <h4>Form Fields</h4>
        <button 
          className="close-form-button"
          onClick={onFormClose}
          title="Close form and return to main menu"
        >
          ✕
        </button>
      </div>
      
      {Object.keys(formFields).map(fieldName => {
        const fieldValue = formFields[fieldName];
        const isEmpty = isFieldEmpty(fieldValue);
        const dropdownOptions = getDropdownOptions(fieldName, fieldValue);
        const hasDropdownOptions = hasFieldValues(fieldValue, fieldName);
        const currentFormValue = formData[fieldName];
        
        return (
          <div key={fieldName} className="form-field">
            <label className="field-label">
              {fieldName}:
            </label>
            
            {isEmpty ? (
              <div className="input-container">
                <input
                  id={`field-${fieldName}`}
                  type={fieldValue === "date" ? "date" : "text"}
                  placeholder={Array.isArray(fieldValue) ? `Enter ${fieldName} (comma-separated for multiple)...` : `Enter ${fieldName}...`}
                  value={Array.isArray(currentFormValue) ? currentFormValue.join(', ') : (currentFormValue || '')}
                  onChange={(e) => handleInputChange(fieldName, e.target.value)}
                  className="form-input"
                />
                <span className={`field-status ${Array.isArray(fieldValue) ? 'add-items' : 'required'}`}>
                  {Array.isArray(fieldValue) ? 'Optional' : 'Required'}
                </span>
              </div>
            ) : (
              <div className="dropdown-field">
                <div
                  className={`dropdown-trigger ${hasDropdownOptions ? 'active' : 'disabled'} ${expandedField === fieldName ? 'expanded' : ''}`}
                  onClick={() => handleFieldClick(fieldName)}
                >
                  <span className={`display-value ${
                    Array.isArray(currentFormValue) && currentFormValue?.length === 0 ? 'empty' : 
                    Array.isArray(currentFormValue) && currentFormValue?.length > 0 ? 'multiple-items' : ''
                  }`}>
                    {getDisplayValue(fieldName)}
                  </span>
                  {hasDropdownOptions && (
                    <span className={`dropdown-arrow ${expandedField === fieldName ? 'expanded' : ''}`}>
                      ▼
                    </span>
                  )}
                </div>
                
                {hasDropdownOptions && expandedField === fieldName && (
                  <div className="dropdown-menu">
                    {dropdownOptions.map((option, index) => (
                      <div
                        key={index}
                        className="dropdown-option"
                        onClick={() => handleOptionSelect(fieldName, option)}
                      >
                        {option}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {/* Show selected items for array fields */}
            {Array.isArray(currentFormValue) && currentFormValue.length > 0 && (
              <div className="selected-items">
                {currentFormValue.map((item, index) => (
                  <div key={index} className="selected-item">
                    <span>{item}</span>
                    <button
                      className="remove-item-button"
                      onClick={() => handleRemoveItem(fieldName, index)}
                    >
                      ×
                    </button>
                  </div>
                ))}
              </div>
            )}

            {/* Show current value for single fields */}
            {!Array.isArray(currentFormValue) && currentFormValue && !isEmpty && (
              <div className="current-value">
                Current: <strong>{currentFormValue}</strong>
              </div>
            )}
          </div>
        );
      })}
      
      <div className="form-actions">
        <button 
          className={`submit-form-button ${isFormValid() ? 'enabled' : 'disabled'}`}
          onClick={handleFormSubmit}
          disabled={!isFormValid()}
        >
          Submit Form
        </button>
      </div>
      
      {regularOptions.length > 0 && (
        <div className="options-section">
          <div className="options-list">
            {regularOptions.map((opt, i) => {
              const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim();
              return (
                <button 
                  key={i} 
                  className="option-button" 
                  onClick={() => onOptionClick(opt)}
                >
                  {displayText}
                </button>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true);

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

const getPostData = async () => {
  try {
    setIsTyping(true);
    setApiTimeout(() => {
      setMessages([{
        id: Date.now(),
        text: "Unable to load messages. Please try again later.",
        sender: "bot",
        time: getCurrentTime(),
      }]);
    });

    const res = await getPost();
    clearCurrentTimeout();

    const formattedMessages = res.data.chat_history.map((item, index) => {
      // Convert backend array data to proper format
      const formattedFields = {};
      if (item.fields) {
        item.fields.forEach(field => {
          formattedFields[field.fieldName] = field.fieldValue;
        });
      }

      return {
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || [],
        originalMessage: item.fields ? formattedFields : item.message
      };
    });

    setMessages(formattedMessages);
    setFormDisabled(true);
    setIsTyping(false);
  } catch (error) {
    clearCurrentTimeout();
    setIsTyping(false);
    setMessages([{
      id: Date.now(),
      text: "An error occurred while loading messages.",
      sender: "bot",
      time: getCurrentTime(),
    }]);
    console.error("Error fetching data:", error);
  }
};

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const checkEnableForm = (text) => {
    const lowerText = typeof text === 'string' ? text.toLowerCase() : '';
    return lowerText.includes("enter") || lowerText.includes("provide");
  };

  const handleFieldUpdate = async (fieldName, value) => {
    // Send field update to API
    const updateMessage = `${fieldName}: ${value}`;
    
    const userMsg = {
      id: Date.now(),
      text: updateMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});
      const res = await postMessage(updateMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
          originalMessage: latest.message
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "An error occurred. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }

    setIsTyping(false);
  };

  const handleFormSubmit = async (formData) => {
    // Convert form data to a formatted string for backend
    const formSubmission = Object.entries(formData)
      .map(([key, value]) => {
        if (Array.isArray(value)) {
          return `${key}: ${value.join(', ')}`;
        }
        return `${key}: ${value}`;
      })
      .join('\n');

    // Don't show "Form Submitted:" in the user message
    const userMsg = {
      id: Date.now(),
      text: formSubmission,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});
      // Send the form submission without the "FORM_SUBMIT:" prefix
      const res = await postMessage(formSubmission);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
          originalMessage: latest.message
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "An error occurred while submitting the form. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }

    setIsTyping(false);
  };

  const handleFormClose = async () => {
    // Don't show the close message to user, just send to backend
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});
      const res = await postMessage("CLOSE_FORM");
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
          originalMessage: latest.message
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "An error occurred. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }

    setIsTyping(false);
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});
      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
          originalMessage: latest.message
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "An error occurred. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }

    setIsTyping(false);
  };

  const handleOptionClick = async (optionText) => {
    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setFormDisabled(true);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});
      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
          originalMessage: latest.message
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
    }

    setIsTyping(false);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  // Check if message is a form object
  const isFormMessage = (message) => {
  // Check if it's a form object (has fields that aren't standard message properties)
  return typeof message === 'object' && message !== null && 
         !Array.isArray(message) && 
         Object.keys(message).some(key => 
           !['id', 'text', 'sender', 'time', 'options'].includes(key)
         );
};

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" ? (
                      <>
                        {isFormMessage(item.originalMessage) ? (
                          <FormFieldRenderer 
                            message={item.originalMessage}
                            onFieldUpdate={handleFieldUpdate}
                            onOptionClick={handleOptionClick}
                            onFormSubmit={handleFormSubmit}
                            onFormClose={handleFormClose}
                          />
                        ) : (
                          <div
                            className="message-content"
                            dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                          />
                        )}
                      </>
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}
                    
                    {/* Render regular options for non-form messages */}
                    {!isFormMessage(item.originalMessage) && item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => {
                          const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim().toLowerCase();
                          const isPlainText =
                            displayText.includes("please select one by name") ||
                            displayText.includes("please select from the following options");

                          if (isPlainText) {
                            return (
                              <div key={i} className="plain-text-option">
                                {displayText}
                              </div>
                            );
                          }

                          return (
                            <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                              {displayText}
                            </button>
                          );
                        })}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Select a relevant option or wait for prompt..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img className="logo" src={send} alt="Send" style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;














/* Chatbot Wrapper */
.chat-container {
  position: fixed;
  width: 450px; /* fixed width or percentage */
  height: 782px; /* fixed height (prevents growing/shrinking) */

  color: white;
  display: flex;
  flex-direction: column;
  border: 2px solid var(--border-color);
  border-radius: 10px;
  box-shadow: 0 0 30px rgba(145, 145, 145, 0.4);
  overflow: hidden;
  font-size: 14px;
  margin-right: 25px;

  margin-top: 20px;
  position: relative; /* in case you want to make it floating later */
}

/* Header */
.chat-header {
  background: transparent;
  padding: 8px 5px;
  text-align: center;
  font-weight: bold;
  border-bottom: 2px solid #444;
}

.chat-header {
  display: flex;
  align-items: center;
  gap: 30px;
  height: 80px;


  border-bottom: 1px solid #ddd; /* optional */
}


.chat-title h1 {
  margin: 0;
  font-size: 24px;
}

.chat-title h5 {
  margin: 0;
  font-weight: normal;
  font-size: 12px;
  color: #aaa;
}

.chat-logo {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  margin-right: 30px;
  margin-left: 5px;
}


  .minimize-button {
    margin-left: 28px;
    background: transparent;
    border: 2px solid var(--border-color);
    border-radius: 5px;
    font-size: 26px;
    cursor: pointer;
    color: #ffffff;
    font-weight: bolder;
    padding: 1px 10px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .minimize-button:hover {
    background-color: rgba(0, 123, 255, 0.1);
    transform: scale(1.1);

  }




.messages-container {
  position: relative; /* Allows the pseudo-element for the logo to be positioned */
  flex: 1;
  overflow-y: auto;
  padding: 10px 10px;
  display: flex;
  flex-direction: column;
  gap: 6px;
  min-height: 0;
  margin-top: 10px;

}
/* .background-container {
  background-image: url('../assets/Graident\ Ai\ Robot-Photoroom.png');
  background-size: 100% 100%;
  background-repeat: no-repeat;
  background-position: center;
  height: 100vh;
  width: 100%;
  z-index: 1;


} */





/* Scrollbar Styling */
.messages-container::-webkit-scrollbar {
  width: 6px;
}
.messages-container::-webkit-scrollbar-thumb {
  background-color: #666;
  border-radius: 4px;
}

/* Input Form */
.message-form {
  display: flex;
  padding: 6px 8px;
  border-top: 1px solid #444;
  background: transparent;
}

.message-input {
  flex: 1;
  padding: 5px 8px;
  border-radius: 5px;
  border: none;
  font-size: 0.85rem;
  outline: none;
}

.send-button {
  margin-left: 5px;

  border: none;
  padding: 6px 10px;
  border-radius: 5px;
  cursor: pointer;
 background-color: #ffffff;
}



/* Message Bubbles */
.message {
  max-width: 80%;
  padding: 6px 10px;
  border-radius: 8px;
  font-size: 1rem;
  line-height: 1.3;
  word-wrap: break-word;
}

.user-message {
  background-color: #4875a6;
  color: white;
  align-self: flex-end;
  justify-content: flex-end;
}

.bot-message {
  background-color:rgb(137, 74, 137);
  color: white;
  align-self: flex-start;


}


.message-time {
  font-size: 0.65rem;
  text-align: right;
  color: #aaa;
  margin-top: 2px;
}




.chat-container.minimized {
  width: 60px;
  height: 60px;
  padding: 5px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.chat-container.minimized .chat-header {
  width: 100%;
  justify-content: center;
}

.chat-container.minimized .chat-logo {
  margin: 0 auto;
  width: 50px;
  height: 50px;
}

.chat-container.minimized .chat-title,
.chat-container.minimized .minimize-button,
.chat-container.minimized .messages-container,
.chat-container.minimized .message-form {
  display: none;
}



@media (max-height: 800px) {
  .chat-container {
    width: 300px;
    height: 420px;
  }
}

@media (max-width: 768px) {
  .chat-container {
    width: 90vw;
    height: 70vh;
    right: 5%;
    bottom: 10px;
  }
}

.options-list {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 8px;
}

.option-button {
  background-color: rgb(172, 113, 172);
  color: white;
  border: none;
  padding: 6px 12px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.option-button:hover {
  background-color: #f5f5f5;
  color: #1e1e1e;
  font-weight: 600;
}

.formatted-card {
  display: flex;
  flex-direction: column;
  gap: 4px;
  line-height: 1.4;
}
.formatted-card strong {
  font-weight: 600;
}


/* Form Container Styles */
.form-container {
  position: relative;
  transition: all 0.3s ease;
}

.form-container:hover {
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  transform: translateY(-1px);
}

.form-container h4 {
  color: #000000;
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 20px;
  padding-bottom: 8px;
  border-bottom: 2px solid #e8ecf0;
  display: flex;
  align-items: center;
}

.form-container h4::before {
  content: "📝";
  margin-right: 8px;
  font-size: 18px;
}

/* Form Field Styles */
.form-field {
  margin-bottom: 18px;
  animation: fadeInUp 0.3s ease;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.form-field label {
  display: block;
  font-weight: 600;
  margin-bottom: 8px;
  color: #34495e;
  font-size: 14px;
  text-transform: capitalize;
  letter-spacing: 0.3px;
}



/* Input Field Styles */
.form-field input[type="text"],
.form-field input[type="date"] {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e0e6ed;
  border-radius: 8px;
  font-size: 14px;
  background: #ffffff;
  transition: all 0.3s ease;
  outline: none;
  font-family: inherit;
}

.form-field input[type="text"]:focus,
.form-field input[type="date"]:focus {
  border-color: #007bff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
  background: #f8f9ff;
}

.form-field input[type="text"]:hover,
.form-field input[type="date"]:hover {
  border-color: #b0b8c1;
}

.form-field input[type="text"]::placeholder {
  color: #8e9aaf;
  font-style: italic;
}

/* Input Container with Button */
.input-container {
  display: flex;
  align-items: center;
  gap: 10px;
  width: 100%;
}

.input-container input {
  flex: 1;
}



.submit-form-button.enabled:hover {
  background: #1976d2;
  transform: translateY(-1px);
}

.submit-form-button.disabled {
  background: #ccc;
  cursor: not-allowed;
  opacity: 0.6;
}

.submit-form-button:disabled {
  background: #ccc;
  cursor: not-allowed;
  opacity: 0.6;
}

/* Update existing form field styles if needed */
.form-field {
  margin-bottom: 15px;
}

.form-field label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
  color: #333;
}

.display-value.empty {
  color: #999;
  font-style: italic;
}

.display-value.multiple-items {
  color: #2196f3;
  font-weight: 500;
}


.close-form-button {
  background: linear-gradient(135deg, rgb(102, 126, 234), rgb(118, 75, 162));
  border: none;
  border-radius: 50%;
  width: 32px;
  height: 32px;
  color: white;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
}

.close-form-button:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}


/* Field Status Indicator */
.field-status {
  font-size: 12px;
  color: #6c757d;
  font-style: italic;
  display: none;
  align-items: center;
  gap: 4px;
}

.field-status.required::before {
  content: "⚠️";
  font-size: 14px;
}

.field-status.add-items::before {
  content: "➕";
  font-size: 14px;
}

/* Dropdown Field Styles */
.dropdown-field {
  position: relative;
}

.dropdown-trigger {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e0e6ed;
  border-radius: 8px;
  background: #f8f9fa;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: all 0.3s ease;
  font-size: 14px;
}

.dropdown-trigger:hover {
  background: #e9ecef;
  border-color: #b0b8c1;
}

.dropdown-trigger.active {
  border-color: #007bff;
  background: #f8f9ff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

.dropdown-trigger.disabled {
  background: #e9ecef;
  cursor: default;
  color: #6c757d;
}

.dropdown-arrow {
  font-size: 12px;
  color: #6c757d;
  transition: transform 0.3s ease;
  margin-left: 8px;
}

.dropdown-arrow.expanded {
  transform: rotate(180deg);
}

/* Dropdown Menu Styles */
.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 2px solid #e0e6ed;
  border-top: none;
  border-radius: 0 0 8px 8px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  max-height: 200px;
  overflow-y: auto;
  animation: slideDown 0.2s ease;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.dropdown-option {
  padding: 12px 16px;
  cursor: pointer;
  font-size: 14px;
  border-bottom: 1px solid #f0f0f0;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
}

.dropdown-option:last-child {
  border-bottom: none;
}

.dropdown-option:hover {
  background: linear-gradient(90deg, #f8f9ff 0%, #e8f0ff 100%);
  color: #007bff;
  padding-left: 20px;
}

.dropdown-option:active {
  background: #e8f0ff;
}

/* Options Section */
.options-section {
  margin-top: 25px;
  padding-top: 20px;
  border-top: 2px solid #e8ecf0;
  position: relative;
}

.options-section::before {
  content: "Options";
  position: absolute;
  top: -10px;
  left: 0;
  background: white;
  padding: 0 10px;
  font-size: 12px;
  font-weight: 600;
  color: #6c757d;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.options-list {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 10px;
}

/* Option Button Styles */
.option-button {
  padding: 10px 16px;
  color: white;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  font-size: 15px;
  font-weight: 700;
  transition: all 0.3s ease;
  white-space: nowrap;
  position: relative;
  overflow: hidden;
   text-transform: uppercase;
}

.option-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.option-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
}

.option-button:hover::before {
  left: 100%;
}

.option-button:active {
  transform: translateY(0);
  box-shadow: 0 2px 6px rgba(0, 123, 255, 0.2);
}

/* Plain Text Option Styles */
.plain-text-option {
  padding: 12px 16px;
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border: 1px solid #dee2e6;
  border-radius: 8px;
  color: #495057;
  font-size: 14px;
  font-style: italic;
  margin: 5px 0;
}

/* Display Value Styles */
.display-value {
  color: #2c3e50;
  font-weight: 500;
}

.display-value.empty {
  color: #6c757d;
  font-style: italic;
}

.display-value.multiple-items {
  color: #28a745;
  font-weight: 600;
}

.display-value.multiple-items::before {
  content: "📋 ";
  margin-right: 4px;
}

/* Scrollbar Styles for Dropdown */
.dropdown-menu::-webkit-scrollbar {
  width: 6px;
}

.dropdown-menu::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.dropdown-menu::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 3px;
}

.dropdown-menu::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* Responsive Design */
@media (max-width: 768px) {
  .form-container {
    padding: 15px;
    margin: 8px 0;
  }

  .input-container {
    flex-direction: column;
    align-items: stretch;
  }

  .add-button {
    margin-top: 8px;
    padding: 12px;
  }

  .options-list {
    justify-content: center;
  }

  .option-button {
    flex: 1;
    min-width: calc(50% - 4px);
    text-align: center;
  }
}

@media (max-width: 480px) {
  .form-container {
    padding: 12px;
    border-radius: 8px;
  }

  .option-button {
    min-width: 100%;
    margin: 2px 0;
  }

  .dropdown-menu {
    max-height: 150px;
  }
}

/* Focus Styles for Accessibility */
.form-field input:focus,
.dropdown-trigger:focus,
.option-button:focus,
.add-button:focus {
  outline: 2px solid #007bff;
  outline-offset: 2px;
}

/* High Contrast Mode Support */
@media (prefers-contrast: high) {
  .form-container {
    border: 2px solid #000;
  }

  .form-field input,
  .dropdown-trigger {
    border: 2px solid #000;
  }

  .option-button {
    background: #000;
    color: #fff;
    border: 1px solid #fff;
  }
}

/* Reduced Motion Support */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

