import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Case 1: HTML-formatted messages with <b> tags
  if (text.includes("<b>")) {
    const pattern = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
    const lines = [];
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const key = match[1].trim();
      const value = match[2].trim().replace(/\n/g, "<br/>");
      lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
    }
    return `<div class="formatted-card">${lines.join("")}</div>`;
  }

  // Case 2: Likely a server config line (very long, no <b>, many ":")
  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    // Insert a <br/> before each key-value pair, except the first 2â€“3 lines
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";
    let index = 0;

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return `<div class="formatted-card">${formatted.trim()}</div>`;
  }

  // Default: return plain text for non-server, non-HTML messages
  const cleanedText = text.replace(/:,\s*$/, ":").trim();
  return cleanedText;
};

// Function to parse workload data format
const parseWorkloadData = (text) => {
  if (!text || typeof text !== "string") return null;
  
  // Look for pattern like: [] layer: [] ,server [] , service ""
  const workloadPattern = /\[(.*?)\]\s*layer:\s*\[(.*?)\]\s*,\s*server\s*\[(.*?)\]\s*,\s*service\s*"([^"]*)"/i;
  const match = text.match(workloadPattern);
  
  if (match) {
    const [, eg, layer, server, service] = match;
    return {
      eg: eg.trim() || null,
      layer: layer.trim() || null,
      server: server.trim() || null,
      service: service.trim() || null
    };
  }
  
  return null;
};

// Function to parse multiple values (comma-separated or other delimiters)
const parseMultipleValues = (value) => {
  if (!value) return [];
  return value.split(',').map(v => v.trim()).filter(v => v.length > 0);
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [showWorkloadForm, setShowWorkloadForm] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true);
  const [formData, setFormData] = useState({
    subject: "",
    source: "",
    destination: "",
    zone: "",
    port: "",
    beforeCreationDate: "",
    beforeExpireDate: "",
  });
  
  // Workload form state
  const [workloadData, setWorkloadData] = useState({
    eg: "",
    layer: "",
    server: "",
    service: ""
  });
  const [workloadOptions, setWorkloadOptions] = useState({
    egOptions: [],
    layerOptions: [],
    serverOptions: []
  });

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([
          {
            id: Date.now(),
            text: "Unable to load messages. Please try again later.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || [],
      }));

      setMessages(formattedMessages);
      setFormDisabled(true);
      setIsTyping(false);
    } catch {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([
        {
          id: Date.now(),
          text: "An error occurred while loading messages.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const checkEnableForm = (text) => {
    const lowerText = text.toLowerCase();
    return lowerText.includes("enter") || lowerText.includes("provide");
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
        
        // Check if the response contains workload data
        const workloadInfo = parseWorkloadData(botResponse.text);
        if (workloadInfo) {
          handleWorkloadResponse(workloadInfo);
        }
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "An error occurred. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleWorkloadResponse = (workloadInfo) => {
    // Parse the workload data and set up the form
    const newWorkloadData = { ...workloadData };
    const newWorkloadOptions = { egOptions: [], layerOptions: [], serverOptions: [] };
    
    // Handle eg field
    if (workloadInfo.eg) {
      const egValues = parseMultipleValues(workloadInfo.eg);
      if (egValues.length > 1) {
        newWorkloadOptions.egOptions = egValues;
      } else if (egValues.length === 1) {
        newWorkloadData.eg = egValues[0];
      }
    }
    
    // Handle layer field
    if (workloadInfo.layer) {
      const layerValues = parseMultipleValues(workloadInfo.layer);
      if (layerValues.length > 1) {
        newWorkloadOptions.layerOptions = layerValues;
      } else if (layerValues.length === 1) {
        newWorkloadData.layer = layerValues[0];
      }
    }
    
    // Handle server field
    if (workloadInfo.server) {
      const serverValues = parseMultipleValues(workloadInfo.server);
      if (serverValues.length > 1) {
        newWorkloadOptions.serverOptions = serverValues;
      } else if (serverValues.length === 1) {
        newWorkloadData.server = serverValues[0];
      }
    }
    
    // Service is always user input
    newWorkloadData.service = workloadInfo.service || "";
    
    setWorkloadData(newWorkloadData);
    setWorkloadOptions(newWorkloadOptions);
    setShowWorkloadForm(true);
  };

  const handleOptionClick = async (optionText) => {
    if (optionText.toLowerCase().includes("have multiple fields")) {
      setShowForm(true);
      return;
    }

    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setFormDisabled(true);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
        
        // Check if the response contains workload data
        const workloadInfo = parseWorkloadData(botResponse.text);
        if (workloadInfo) {
          handleWorkloadResponse(workloadInfo);
        }
      }
    } catch {
      clearCurrentTimeout();
    }

    setIsTyping(false);
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setShowForm(false);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(formData);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Something went wrong. Try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleWorkloadSubmit = async (e) => {
    e.preventDefault();
    setShowWorkloadForm(false);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(workloadData);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Something went wrong. Try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" ? (
                      <div
                        className="message-content"
                        dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                      />
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}
                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => {
                          const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim().toLowerCase();

                          const isPlainText = displayText.includes("please select one by name") ||
                                              displayText.includes("please select from the following options");

                          if (isPlainText) {
                            return (
                              <div key={i} className="plain-text-option">
                                {opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim()}
                              </div>
                            );
                          }

                          return (
                            <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                              {opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim()}
                            </button>
                          );
                        })}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Original Multi-field Form */}
          {showForm && (
            <form className="multi-field-form" onSubmit={handleFormSubmit}>
              <div className="form-grid">
                <input type="text" placeholder="Subject" value={formData.subject} onChange={(e) => setFormData({ ...formData, subject: e.target.value })} />
                <input type="text" placeholder="Source" value={formData.source} onChange={(e) => setFormData({ ...formData, source: e.target.value })} />
                <input type="text" placeholder="Destination" value={formData.destination} onChange={(e) => setFormData({ ...formData, destination: e.target.value })} />
                <input type="text" placeholder="Zone" value={formData.zone} onChange={(e) => setFormData({ ...formData, zone: e.target.value })} />
                <input type="text" placeholder="Port" value={formData.port} onChange={(e) => setFormData({ ...formData, port: e.target.value })} />
                <input
                  type="text"
                  placeholder="Before Creation Date"
                  value={formData.beforeCreationDate}
                  onChange={(e) => setFormData({ ...formData, beforeCreationDate: e.target.value })}
                  onFocus={(e) => (e.target.type = "date")}
                  onBlur={(e) => {
                    if (!e.target.value) e.target.type = "text";
                  }}
                />
                <input
                  type="text"
                  placeholder="Before Expire Date"
                  value={formData.beforeExpireDate}
                  onChange={(e) => setFormData({ ...formData, beforeExpireDate: e.target.value })}
                  onFocus={(e) => (e.target.type = "date")}
                  onBlur={(e) => {
                    if (!e.target.value) e.target.type = "text";
                  }}
                />
              </div>
              <button type="submit" className="search-button">Search</button>
            </form>
          )}

          {/* Workload Form */}
          {showWorkloadForm && (
            <form className="workload-form" onSubmit={handleWorkloadSubmit}>
              <h3>Workload Configuration</h3>
              <div className="form-grid">
                {/* EG Field */}
                <div className="form-field">
                  <label>EG:</label>
                  {workloadOptions.egOptions.length > 0 ? (
                    <select 
                      value={workloadData.eg} 
                      onChange={(e) => setWorkloadData({ ...workloadData, eg: e.target.value })}
                      required
                    >
                      <option value="">Select EG</option>
                      {workloadOptions.egOptions.map((option, i) => (
                        <option key={i} value={option}>{option}</option>
                      ))}
                    </select>
                  ) : workloadData.eg ? (
                    <input type="text" value={workloadData.eg} readOnly className="readonly-field" />
                  ) : (
                    <input 
                      type="text" 
                      placeholder="Please enter EG"
                      value={workloadData.eg}
                      onChange={(e) => setWorkloadData({ ...workloadData, eg: e.target.value })}
                      required
                      className="required-field"
                    />
                  )}
                </div>

                {/* Layer Field */}
                <div className="form-field">
                  <label>Layer:</label>
                  {workloadOptions.layerOptions.length > 0 ? (
                    <select 
                      value={workloadData.layer} 
                      onChange={(e) => setWorkloadData({ ...workloadData, layer: e.target.value })}
                      required
                    >
                      <option value="">Select Layer</option>
                      {workloadOptions.layerOptions.map((option, i) => (
                        <option key={i} value={option}>{option}</option>
                      ))}
                    </select>
                  ) : workloadData.layer ? (
                    <input type="text" value={workloadData.layer} readOnly className="readonly-field" />
                  ) : (
                    <input 
                      type="text" 
                      placeholder="Please enter Layer"
                      value={workloadData.layer}
                      onChange={(e) => setWorkloadData({ ...workloadData, layer: e.target.value })}
                      required
                      className="required-field"
                    />
                  )}
                </div>

                {/* Server Field */}
                <div className="form-field">
                  <label>Server:</label>
                  {workloadOptions.serverOptions.length > 0 ? (
                    <select 
                      value={workloadData.server} 
                      onChange={(e) => setWorkloadData({ ...workloadData, server: e.target.value })}
                      required
                    >
                      <option value="">Select Server</option>
                      {workloadOptions.serverOptions.map((option, i) => (
                        <option key={i} value={option}>{option}</option>
                      ))}
                    </select>
                  ) : workloadData.server ? (
                    <input type="text" value={workloadData.server} readOnly className="readonly-field" />
                  ) : (
                    <input 
                      type="text" 
                      placeholder="Please enter Server"
                      value={workloadData.server}
                      onChange={(e) => setWorkloadData({ ...workloadData, server: e.target.value })}
                      required
                      className="required-field"
                    />
                  )}
                </div>

                {/* Service Field - Always editable */}
                <div className="form-field">
                  <label>Service:</label>
                  <input 
                    type="text" 
                    placeholder="Enter service information"
                    value={workloadData.service}
                    onChange={(e) => setWorkloadData({ ...workloadData, service: e.target.value })}
                    required
                  />
                </div>
              </div>
              
              <div className="form-buttons">
                <button type="button" onClick={() => setShowWorkloadForm(false)} className="cancel-button">
                  Cancel
                </button>
                <button type="submit" className="submit-button">
                  Submit Workload
                </button>
              </div>
            </form>
          )}

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Select a relevant option or wait for prompt..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img className="logo" src={send} alt="Send" style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;



/* Add these styles to your existing Chatbot.css file */

.workload-form {
  background: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 20px;
  margin: 15px 0;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.workload-form h3 {
  margin: 0 0 20px 0;
  color: #333;
  font-size: 18px;
  font-weight: 600;
  border-bottom: 2px solid #007bff;
  padding-bottom: 10px;
}

.workload-form .form-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 15px;
  margin-bottom: 20px;
}

.form-field {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.form-field label {
  font-weight: 600;
  color: #495057;
  font-size: 14px;
  margin-bottom: 5px;
}

.form-field input,
.form-field select {
  padding: 10px 12px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  font-size: 14px;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-field input:focus,
.form-field select:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.readonly-field {
  background-color: #e9ecef !important;
  cursor: not-allowed;
  color: #6c757d;
}

.required-field {
  border-color: #dc3545 !important;
  background-color: #fff5f5;
}

.required-field::placeholder {
  color: #dc3545;
  font-style: italic;
}

.form-buttons {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.cancel-button,
.submit-button {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.15s ease-in-out;
}

.cancel-button {
  background-color: #6c757d;
  color: white;
}

.cancel-button:hover {
  background-color: #5a6268;
}

.submit-button {
  background-color: #007bff;
  color: white;
}

.submit-button:hover {
  background-color: #0056b3;
}

.submit-button:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
}

/* Responsive design for smaller screens */
@media (max-width: 768px) {
  .workload-form {
    padding: 15px;
  }
  
  .form-buttons {
    flex-direction: column;
  }
  
  .cancel-button,
  .submit-button {
    width: 100%;
  }
}
