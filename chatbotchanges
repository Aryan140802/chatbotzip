import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Case 1: HTML-formatted messages with <b> tags
  if (text.includes("<b>")) {
    const pattern = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
    const lines = [];
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const key = match[1].trim();
      const value = match[2].trim().replace(/\n/g, "<br/>");
      lines.push(
        <div key={key}>
          <strong>{key}:</strong> {value}
        </div>
      );
    }
    return <div className="formatted-card">{lines}</div>;
  }

  // Case 2: Likely a server config line (very long, no <b>, many ":")
  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";
    let index = 0;

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return <div className="formatted-card" dangerouslySetInnerHTML={{ __html: formatted.trim() }} />;
  }

  // Default: return plain text for non-server, non-HTML messages
  const cleanedText = text.replace(/:,\s*$/, ":").trim();
  return cleanedText;
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true);
  const [formData, setFormData] = useState({
    subject: "",
    source: "",
    destination: "",
    zone: "",
    port: "",
    beforeCreationDate: "",
    beforeExpireDate: "",
  });

  // New state for workload data
  const [workloadData, setWorkloadData] = useState({
    eg: [],
    layer: [],
    server: [],
    service: [], // Service will be user-entered
  });

  // State to store user selections/inputs for workload form
  const [workloadFormInputs, setWorkloadFormInputs] = useState({
    eg: "",
    layer: "",
    server: "",
    service: "",
  });

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([
          {
            id: Date.now(),
            text: "Unable to load messages. Please try again later.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || [],
      }));

      setMessages(formattedMessages);
      setFormDisabled(true);
      setIsTyping(false);
    } catch (error) {
      console.error("Error fetching initial messages:", error);
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([
        {
          id: Date.now(),
          text: "An error occurred while loading messages.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const checkEnableForm = (text) => {
    const lowerText = text.toLowerCase();
    return lowerText.includes("enter") || lowerText.includes("provide");
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {
        // Handle timeout for sendMessage
      });

      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));

        // Check if the message contains workload data (e.g., "[ ]", "layer: [ ]")
        // This is a simplistic check; you might need a more robust parsing
        const workloadRegex = /eg:\s*(\[.*?\]),\s*layer:\s*(\[.*?\]),\s*server:\s*(\[.*?\]),\s*service:\s*(\[.*?\])/;
        const match = botResponse.text.match(workloadRegex);

        if (match) {
          const parsedData = {
            eg: JSON.parse(match[1].replace(/'/g, '"')),
            layer: JSON.parse(match[2].replace(/'/g, '"')),
            server: JSON.parse(match[3].replace(/'/g, '"')),
            service: JSON.parse(match[4].replace(/'/g, '"')), // Service should ideally be an empty array here
          };
          setWorkloadData(parsedData);
          setShowForm(true); // Show the workload form
          // Initialize workload form inputs based on received data
          setWorkloadFormInputs({
            eg: parsedData.eg.length > 0 ? parsedData.eg[0] : "",
            layer: parsedData.layer.length > 0 ? parsedData.layer[0] : "",
            server: parsedData.server.length > 0 ? parsedData.server[0] : "",
            service: "", // Service is always user-filled
          });
        }
      }
    } catch (error) {
      console.error("Error sending message:", error);
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "An error occurred. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleOptionClick = async (optionText) => {
    // Check if the option clicked is related to "workload"
    if (optionText.toLowerCase().includes("workload")) {
      // Simulate an API call for workload data or directly set it if you have it
      setIsTyping(true);
      try {
        // In a real scenario, you'd make an API call here to get the workload data
        // For demonstration, I'm using a dummy response structure
        const dummyWorkloadResponse = {
          eg: ["EG-1", "EG-2"],
          layer: ["Layer-A", "Layer-B"],
          server: [], // Empty, will prompt user to add
          service: [], // Empty, will be user-entered
        };
        setWorkloadData(dummyWorkloadResponse);
        setWorkloadFormInputs({
          eg: dummyWorkloadResponse.eg.length > 0 ? dummyWorkloadResponse.eg[0] : "",
          layer: dummyWorkloadResponse.layer.length > 0 ? dummyWorkloadResponse.layer[0] : "",
          server: dummyWorkloadResponse.server.length > 0 ? dummyWorkloadResponse.server[0] : "",
          service: "", // Always empty initially for user input
        });
        setShowForm(true);
        setIsTyping(false);
        setMessages((prev) => [
          ...prev,
          {
            id: Date.now(),
            text: `You selected: ${optionText}. Please fill the workload details below.`,
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
        return;
      } catch (error) {
        console.error("Error fetching workload data:", error);
        setIsTyping(false);
        setMessages((prev) => [
          ...prev,
          {
            id: Date.now(),
            text: "Failed to load workload form. Please try again.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
        return;
      }
    }

    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setFormDisabled(true);
    setIsTyping(true);

    try {
      setApiTimeout(() => {
        // Handle timeout for option click
      });

      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch (error) {
      console.error("Error handling option click:", error);
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Something went wrong. Try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleWorkloadFormChange = (e) => {
    const { name, value } = e.target;
    setWorkloadFormInputs((prev) => ({ ...prev, [name]: value }));
  };

  const handleWorkloadFormSubmit = async (e) => {
    e.preventDefault();
    setShowForm(false);
    setIsTyping(true);

    // Prepare data to send to backend
    const dataToSend = {
      ...workloadFormInputs,
    };

    console.log("Submitting workload data:", dataToSend); // For debugging

    try {
      setApiTimeout(() => {
        // Handle timeout for workload form submit
      });

      const res = await postMessage(dataToSend); // Send the workload form data
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "Workload details submitted successfully!",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch (error) {
      console.error("Error submitting workload form:", error);
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Failed to submit workload details. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" ? (
                      <div
                        className="message-content"
                        dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                      />
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}
                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => {
                          const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim().toLowerCase();

                          const isPlainText =
                            displayText.includes("please select one by name") ||
                            displayText.includes("please select from the following options");

                          if (isPlainText) {
                            return (
                              <div key={i} className="plain-text-option">
                                {opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim()}
                              </div>
                            );
                          }

                          return (
                            <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                              {opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim()}
                            </button>
                          );
                        })}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* New Workload Form */}
          {showForm && (
            <form className="workload-form" onSubmit={handleWorkloadFormSubmit}>
              <h3 className="form-title">Workload Details</h3>
              <div className="form-field-group">
                <label htmlFor="eg">EG:</label>
                {workloadData.eg.length > 1 ? (
                  <select name="eg" id="eg" value={workloadFormInputs.eg} onChange={handleWorkloadFormChange}>
                    {workloadData.eg.map((val) => (
                      <option key={val} value={val}>
                        {val}
                      </option>
                    ))}
                  </select>
                ) : (
                  <input
                    type="text"
                    name="eg"
                    id="eg"
                    placeholder={workloadData.eg.length === 0 ? "Add EG" : ""}
                    value={workloadFormInputs.eg}
                    onChange={handleWorkloadFormChange}
                    readOnly={workloadData.eg.length === 1} // Make read-only if only one value
                  />
                )}
              </div>

              <div className="form-field-group">
                <label htmlFor="layer">Layer:</label>
                {workloadData.layer.length > 1 ? (
                  <select name="layer" id="layer" value={workloadFormInputs.layer} onChange={handleWorkloadFormChange}>
                    {workloadData.layer.map((val) => (
                      <option key={val} value={val}>
                        {val}
                      </option>
                    ))}
                  </select>
                ) : (
                  <input
                    type="text"
                    name="layer"
                    id="layer"
                    placeholder={workloadData.layer.length === 0 ? "Add Layer" : ""}
                    value={workloadFormInputs.layer}
                    onChange={handleWorkloadFormChange}
                    readOnly={workloadData.layer.length === 1}
                  />
                )}
              </div>

              <div className="form-field-group">
                <label htmlFor="server">Server:</label>
                {workloadData.server.length > 1 ? (
                  <select name="server" id="server" value={workloadFormInputs.server} onChange={handleWorkloadFormChange}>
                    {workloadData.server.map((val) => (
                      <option key={val} value={val}>
                        {val}
                      </option>
                    ))}
                  </select>
                ) : (
                  <input
                    type="text"
                    name="server"
                    id="server"
                    placeholder={workloadData.server.length === 0 ? "Add Server" : ""}
                    value={workloadFormInputs.server}
                    onChange={handleWorkloadFormChange}
                    readOnly={workloadData.server.length === 1}
                  />
                )}
              </div>

              <div className="form-field-group">
                <label htmlFor="service">Service:</label>
                <input
                  type="text"
                  name="service"
                  id="service"
                  placeholder="Enter Service"
                  value={workloadFormInputs.service}
                  onChange={handleWorkloadFormChange}
                />
              </div>

              <button type="submit" className="submit-workload-button">
                Submit Workload
              </button>
            </form>
          )}

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Select a relevant option or wait for prompt..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img
                className="logo"
                src={send}
                alt="Send"
                style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }}
              />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;
