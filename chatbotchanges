import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from '../assets/Send.png';
import logo from '../assets/logobot.jpg';
import { getPost, postMessage } from "../api/PostApi";

// ✅ Helper: Dynamically formats bot messages using <b> tags
const formatDynamicMessage = (html) => {
  if (!html || typeof html !== "string") return html;

  const lines = [];

  // Pattern 1: Label <b>Value</b>
  const pattern1 = /([A-Za-z\s/.'()&,-]+?)\s*<b>(.*?)<\/b>/g;
  let match;

  while ((match = pattern1.exec(html)) !== null) {
    const key = match[1].trim().replace(/[:\s]*$/, "");
    const value = match[2].trim();
    lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
  }

  if (lines.length === 0) return html; // fallback if no matches

  return `<div class="formatted-card">${lines.join("")}</div>`;
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);

  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now
      .getMinutes()
      .toString()
      .padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([{
          id: Date.now(),
          text: "Unable to load messages. The server is taking too long to respond. Please try again later.",
          sender: "bot",
          time: getCurrentTime()
        }]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || []
      }));

      setMessages(formattedMessages);
      setIsTyping(false);
    } catch (error) {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([{
        id: Date.now(),
        text: "An error occurred while loading messages. Please try again.",
        sender: "bot",
        time: getCurrentTime()
      }]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);

    try {
      setApiTimeout(() => {
        const errorMsg = {
          id: Date.now(),
          text: "Sorry, the server is taking too long to respond. Please try again later.",
          sender: "bot",
          time: getCurrentTime()
        };
        setMessages((prev) => [...prev, errorMsg]);
      });

      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      if (res.data.chat_history?.length > 0) {
        const latest = res.data.chat_history[res.data.chat_history.length - 1];
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || []
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch (error) {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Sorry, something went wrong. Please try again.",
        sender: "bot",
        time: getCurrentTime()
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleOptionClick = async (optionText) => {
    const cleanedOpt = optionText.replace(/^\d+\.\s*/, "");

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: 'user',
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setIsTyping(true);

    try {
      setApiTimeout(() => {
        const errorMsg = {
          id: Date.now(),
          text: "Sorry, the server is taking too long to respond. Please try again later.",
          sender: "bot",
          time: getCurrentTime()
        };
        setMessages((prev) => [...prev, errorMsg]);
      });

      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      if (res.data.chat_history?.length > 0) {
        const latest = res.data.chat_history[res.data.chat_history.length - 1];
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || []
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch (error) {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: 'Sorry, something went wrong fetching that response.',
        sender: 'bot',
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>&#x2212;</button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px"
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {/* ✅ Render with dynamic formatting */}
                    {item.sender === "bot" && item.text.includes("<b>") ? (
                      <div
                        className="message-content"
                        dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                      />
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}

                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => (
                          <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                            {opt}
                          </button>
                        ))}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}

            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="Type a message..."
              className="message-input"
            />
            <button type="submit" className="send-button">
              <img className="logo" src={send} alt="Send" style={{ height: '20px' }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;












/* Chatbot Wrapper */
.chat-container {
  position: fixed;
  width: 450px; /* default width */
  height: 794px; /* fixed height (prevents growing/shrinking) */
  color: white;
  display: flex;
  flex-direction: column;
  border: 2px solid var(--border-color);
  border-radius: 10px;
  box-shadow: 0 0 30px rgba(145, 145, 145, 0.4);
  overflow: hidden;
  font-size: 14px;
  margin-right: 25px;
  margin-top: 20px;
  position: relative;
}

/* Header */
.chat-header {
  background: transparent;
  padding: 8px 5px;
  text-align: center;
  font-weight: bold;
  border-bottom: 2px solid #444;
}

.chat-header {
  display: flex;
  align-items: center;
  gap: 30px;
  height: 80px;
  border-bottom: 1px solid #ddd;
}

.chat-title h1 {
  margin: 0;
  font-size: 24px;
}

.chat-title h5 {
  margin: 0;
  font-weight: normal;
  font-size: 12px;
  color: #aaa;
}

.chat-logo {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  margin-right: 30px;
  margin-left: 5px;
}

.minimize-button {
  margin-left: 28px;
  background: transparent;
  border: 2px solid var(--border-color);
  border-radius: 5px;
  font-size: 26px;
  cursor: pointer;
  color: #ffffff;
  font-weight: bolder;
  padding: 1px 10px;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.minimize-button:hover {
  background-color: rgba(0, 123, 255, 0.1);
  transform: scale(1.1);
}

.messages-container {
  position: relative;
  flex: 1;
  overflow-y: auto;
  padding: 10px 10px;
  display: flex;
  flex-direction: column;
  gap: 6px;
  min-height: 0;
  margin-top: 10px;
}

/* Scrollbar Styling */
.messages-container::-webkit-scrollbar {
  width: 6px;
}

.messages-container::-webkit-scrollbar-thumb {
  background-color: #666;
  border-radius: 4px;
}

/* Input Form */
.message-form {
  display: flex;
  padding: 6px 8px;
  border-top: 1px solid #444;
  background: transparent;
}

.message-input {
  flex: 1;
  padding: 5px 8px;
  border-radius: 5px;
  border: none;
  font-size: 0.85rem;
  outline: none;
}

.send-button {
  margin-left: 5px;
  border: none;
  padding: 6px 10px;
  border-radius: 5px;
  cursor: pointer;
  background-color: #ffffff;
}

/* Message Bubbles */
.message {
  max-width: 80%;
  padding: 6px 10px;
  border-radius: 8px;
  font-size: 1rem;
  line-height: 1.3;
  word-wrap: break-word;
}

.user-message {
  background-color: #4875a6;
  color: white;
  align-self: flex-end;
  justify-content: flex-end;
}

.bot-message {
  background-color: rgb(137, 74, 137);
  color: white;
  align-self: flex-start;
}

.message-time {
  font-size: 0.65rem;
  text-align: right;
  color: #aaa;
  margin-top: 2px;
}

/* Minimized State */
.chat-container.minimized {
  width: 60px;
  height: 60px;
  padding: 5px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.chat-container.minimized .chat-header {
  width: 100%;
  justify-content: center;
}

.chat-container.minimized .chat-logo {
  margin: 0 auto;
  width: 50px;
  height: 50px;
}

.chat-container.minimized .chat-title,
.chat-container.minimized .minimize-button,
.chat-container.minimized .messages-container,
.chat-container.minimized .message-form {
  display: none;
}

/* Media Queries */

/* For smaller screens (max-width 768px, typically tablets and mobile) */
@media (max-width: 768px) {
  .chat-container {
    width: 90vw;
    height: 70vh;
    right: 5%;
    bottom: 10px;
  }

  .chat-header {
    gap: 10px;
  }

  .chat-logo {
    width: 40px;
    height: 40px;
  }

  .chat-title h1 {
    font-size: 18px;
  }

  .chat-title h5 {
    font-size: 10px;
  }

  .minimize-button {
    font-size: 20px;
    padding: 5px 8px;
  }

  .message-form {
    padding: 6px 5px;
  }

  .message-input {
    font-size: 0.8rem;
  }
}

/* For laptop screens (max-width 1200px) */
@media (max-width: 1200px) {
  .chat-container {
    width: 450px;
    height: 650px;
    margin-top: 20px;
  }

  .chat-header {
    gap: 20px;
  }

  .chat-logo {
    width: 45px;
    height: 45px;
  }

  .chat-title h1 {
    font-size: 22px;
  }

  .chat-title h5 {
    font-size: 12px;
  }

  .minimize-button {
    font-size: 24px;
    padding: 5px 10px;
  }

  .message-form {
    padding: 6px 8px;
  }

  .message-input {
    font-size: 0.9rem;
  }
}

/* Full-screen or large screens (max-width 1800px) */
@media (max-width: 1800px) {
  .chat-container {
    width: 500px;
    height: 700px;
    margin-top: 30px;
  }

  .chat-header {
    gap: 25px;
  }

  .chat-logo {
    width: 50px;
    height: 50px;
  }

  .chat-title h1 {
    font-size: 26px;
  }

  .chat-title h5 {
    font-size: 14px;
  }

  .minimize-button {
    font-size: 28px;
    padding: 7px 12px;
  }

  .message-form {
    padding: 8px 10px;
  }

  .message-input {
    font-size: 1rem;
  }
}
