import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Case 1: HTML-formatted messages with <b> tags
  if (text.includes("<b>")) {
    const pattern = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
    const lines = [];
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const key = match[1].trim();
      const value = match[2].trim().replace(/\n/g, "<br/>");
      lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
    }
    return `<div class="formatted-card">${lines.join("")}</div>`;
  }

  // Case 2: Likely a server config line (very long, no <b>, many ":")
  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";
    let index = 0;

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return `<div class="formatted-card">${formatted.trim()}</div>`;
  }

  // Default plain text
  const cleanedText = text.replace(/:,\s*$/, ":").trim();
  return cleanedText;
};

// Replace your FormFieldRenderer component with this updated version:

// Replace your FormFieldRenderer component with this updated version:

const FormFieldRenderer = ({ message, onFieldUpdate, onOptionClick, onFormSubmit, onFormClose }) => {
  const [expandedField, setExpandedField] = useState(null);
  const [inputValues, setInputValues] = useState({});
  const [formData, setFormData] = useState({});
  
  if (typeof message !== 'object' || message === null) {
    return null;
  }

  // Extract regular fields and option fields
  const formFields = {};
  const optionFields = {};
  const regularOptions = [];

  Object.keys(message).forEach(key => {
    if (key === 'options') {
      regularOptions.push(...message[key]);
    } else if (key.endsWith('options')) {
      const fieldName = key.replace('options', '');
      optionFields[fieldName] = message[key];
    } else if (key !== 'sender') {
      formFields[key] = message[key];
    }
  });

  // Helper function to check if a field is empty
  const isFieldEmpty = (fieldValue) => {
    if (fieldValue === "" || fieldValue === "date") return true;
    if (Array.isArray(fieldValue) && fieldValue.length === 0) return true;
    return false;
  };

  // Helper function to check if field has values to show in dropdown
  const hasFieldValues = (fieldValue, fieldName) => {
    if (Array.isArray(fieldValue) && fieldValue.length > 0) return true;
    if (optionFields[fieldName] && optionFields[fieldName].length > 0) return true;
    return false;
  };

  // Initialize form data with current field values
  useEffect(() => {
    const initialFormData = {};
    Object.keys(formFields).forEach(fieldName => {
      const fieldValue = formFields[fieldName];
      if (!isFieldEmpty(fieldValue)) {
        initialFormData[fieldName] = fieldValue;
      }
    });
    setFormData(initialFormData);
  }, []);

  const handleFieldClick = (fieldName) => {
    const fieldValue = formFields[fieldName];
    
    if (isFieldEmpty(fieldValue)) {
      // If field is empty, focus on input
      const input = document.getElementById(`field-${fieldName}`);
      if (input) input.focus();
    } else if (Array.isArray(fieldValue) && fieldValue.length > 0) {
      // If field is an array with values, toggle dropdown
      setExpandedField(expandedField === fieldName ? null : fieldName);
    } else if (optionFields[fieldName] && optionFields[fieldName].length > 0) {
      // If field has options, toggle dropdown
      setExpandedField(expandedField === fieldName ? null : fieldName);
    }
  };

  const handleOptionSelect = (fieldName, option) => {
    // Update form data instead of calling onFieldUpdate immediately
    setFormData(prev => ({
      ...prev,
      [fieldName]: Array.isArray(formData[fieldName]) 
        ? [...(formData[fieldName] || []), option]
        : option
    }));
    setExpandedField(null);
  };

  const handleInputChange = (fieldName, value) => {
    setInputValues(prev => ({ ...prev, [fieldName]: value }));
  };

  const handleInputSubmit = (fieldName) => {
    const value = inputValues[fieldName];
    if (value && value.trim()) {
      // Update form data instead of calling onFieldUpdate immediately
      const currentValue = formData[fieldName];
      const fieldType = formFields[fieldName];
      
      if (Array.isArray(fieldType)) {
        // If it's an array field, add to existing array
        setFormData(prev => ({
          ...prev,
          [fieldName]: [...(currentValue || []), value.trim()]
        }));
      } else {
        // If it's a single value field, replace
        setFormData(prev => ({
          ...prev,
          [fieldName]: value.trim()
        }));
      }
      
      setInputValues(prev => ({ ...prev, [fieldName]: '' }));
    }
  };

  const handleKeyPress = (e, fieldName) => {
    if (e.key === 'Enter') {
      handleInputSubmit(fieldName);
    }
  };

  const handleRemoveItem = (fieldName, index) => {
    setFormData(prev => ({
      ...prev,
      [fieldName]: prev[fieldName].filter((_, i) => i !== index)
    }));
  };

  const getDisplayValue = (fieldName) => {
    const formValue = formData[fieldName];
    const originalValue = formFields[fieldName];
    
    // Use form data if available, otherwise use original value
    const value = formValue !== undefined ? formValue : originalValue;
    
    if (Array.isArray(value)) {
      return value.length === 0 ? 'No items selected' : `${value.length} item(s) selected`;
    }
    return value || 'Not set';
  };

  const getDropdownOptions = (fieldName, fieldValue) => {
    // If field is an array with values, show those values
    if (Array.isArray(fieldValue) && fieldValue.length > 0) {
      return fieldValue;
    }
    // Otherwise, show options from optionFields
    return optionFields[fieldName] || [];
  };

  // Add these new handler functions to your Chatbot component:

const handleFormSubmit = async (formData) => {
  // Convert form data to a formatted string
  const formSubmission = Object.entries(formData)
    .map(([key, value]) => {
      if (Array.isArray(value)) {
        return `${key}: ${value.join(', ')}`;
      }
      return `${key}: ${value}`;
    })
    .join('\n');

  const userMsg = {
    id: Date.now(),
    text: `Form Submitted:\n${formSubmission}`,
    sender: "user",
    time: getCurrentTime(),
  };

  setMessages((prev) => [...prev, userMsg]);
  setIsTyping(true);
  setFormDisabled(true);

  try {
    setApiTimeout(() => {});
    const res = await postMessage(`FORM_SUBMIT: ${formSubmission}`);
    clearCurrentTimeout();

    const latest = res.data.chat_history?.slice(-1)[0];
    if (latest) {
      const botResponse = {
        id: Date.now(),
        text: latest.message || "",
        sender: "bot",
        time: getCurrentTime(),
        options: latest.options || [],
        originalMessage: latest.message
      };
      setMessages((prev) => [...prev, botResponse]);
      setFormDisabled(!checkEnableForm(botResponse.text));
    }
  } catch {
    clearCurrentTimeout();
    setMessages((prev) => [
      ...prev,
      {
        id: Date.now(),
        text: "An error occurred while submitting the form. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      },
    ]);
  }

  setIsTyping(false);
};

const handleFormClose = async () => {
  const userMsg = {
    id: Date.now(),
    text: "Close form and return to main menu",
    sender: "user",
    time: getCurrentTime(),
  };

  setMessages((prev) => [...prev, userMsg]);
  setIsTyping(true);
  setFormDisabled(true);

  try {
    setApiTimeout(() => {});
    const res = await postMessage("CLOSE_FORM");
    clearCurrentTimeout();

    const latest = res.data.chat_history?.slice(-1)[0];
    if (latest) {
      const botResponse = {
        id: Date.now(),
        text: latest.message || "",
        sender: "bot",
        time: getCurrentTime(),
        options: latest.options || [],
        originalMessage: latest.message
      };
      setMessages((prev) => [...prev, botResponse]);
      setFormDisabled(!checkEnableForm(botResponse.text));
    }
  } catch {
    clearCurrentTimeout();
    setMessages((prev) => [
      ...prev,
      {
        id: Date.now(),
        text: "An error occurred. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      },
    ]);
  }

  setIsTyping(false);
};

  const isFormValid = () => {
    const requiredFields = Object.keys(formFields).filter(fieldName => {
      const fieldValue = formFields[fieldName];
      return isFieldEmpty(fieldValue) && !Array.isArray(fieldValue);
    });

    return requiredFields.every(fieldName => formData[fieldName]);
  };

  return (
    <div className="form-container">
      <div className="form-header">
        <h4>Form Fields:</h4>
        <button 
          className="close-form-button"
          onClick={onFormClose}
          title="Close form and return to main menu"
        >
          âœ•
        </button>
      </div>
      
      {Object.keys(formFields).map(fieldName => {
        const fieldValue = formFields[fieldName];
        const isEmpty = isFieldEmpty(fieldValue);
        const dropdownOptions = getDropdownOptions(fieldName, fieldValue);
        const hasDropdownOptions = hasFieldValues(fieldValue, fieldName);
        const currentFormValue = formData[fieldName];
        
        return (
          <div key={fieldName} className="form-field">
            <label>
              {fieldName}:
            </label>
            
            {isEmpty ? (
              <div className="input-container">
                <input
                  id={`field-${fieldName}`}
                  type={fieldValue === "date" ? "date" : "text"}
                  placeholder={`Enter ${fieldName}...`}
                  value={inputValues[fieldName] || ''}
                  onChange={(e) => handleInputChange(fieldName, e.target.value)}
                  onKeyPress={(e) => handleKeyPress(e, fieldName)}
                />
                <button
                  className="add-button"
                  onClick={() => handleInputSubmit(fieldName)}
                  disabled={!inputValues[fieldName]?.trim()}
                >
                  Add
                </button>
                <span className={`field-status ${Array.isArray(fieldValue) ? 'add-items' : 'required'}`}>
                  {Array.isArray(fieldValue) ? 'Add items' : 'Required'}
                </span>
              </div>
            ) : (
              <div className="dropdown-field">
                <div
                  className={`dropdown-trigger ${hasDropdownOptions ? 'active' : 'disabled'} ${expandedField === fieldName ? 'active' : ''}`}
                  onClick={() => handleFieldClick(fieldName)}
                >
                  <span className={`display-value ${
                    Array.isArray(currentFormValue) && currentFormValue?.length === 0 ? 'empty' : 
                    Array.isArray(currentFormValue) && currentFormValue?.length > 0 ? 'multiple-items' : ''
                  }`}>
                    {getDisplayValue(fieldName)}
                  </span>
                  {hasDropdownOptions && (
                    <span className={`dropdown-arrow ${expandedField === fieldName ? 'expanded' : ''}`}>
                      â–¼
                    </span>
                  )}
                </div>
                
                {hasDropdownOptions && expandedField === fieldName && (
                  <div className="dropdown-menu">
                    {dropdownOptions.map((option, index) => (
                      <div
                        key={index}
                        className="dropdown-option"
                        onClick={() => handleOptionSelect(fieldName, option)}
                      >
                        {option}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {/* Show selected items for array fields */}
            {Array.isArray(currentFormValue) && currentFormValue.length > 0 && (
              <div className="selected-items">
                {currentFormValue.map((item, index) => (
                  <div key={index} className="selected-item">
                    <span>{item}</span>
                    <button
                      className="remove-item-button"
                      onClick={() => handleRemoveItem(fieldName, index)}
                    >
                      Ã—
                    </button>
                  </div>
                ))}
              </div>
            )}

            {/* Show current value for single fields */}
            {!Array.isArray(currentFormValue) && currentFormValue && !isEmpty && (
              <div className="current-value">
                Current: <strong>{currentFormValue}</strong>
              </div>
            )}
          </div>
        );
      })}
      
      <div className="form-actions">
        <button 
          className={`submit-form-button ${isFormValid() ? 'enabled' : 'disabled'}`}
          onClick={handleFormSubmit}
          disabled={!isFormValid()}
        >
          Submit Form
        </button>
      </div>
      
      {regularOptions.length > 0 && (
        <div className="options-section">
          <div className="options-list">
            {regularOptions.map((opt, i) => {
              const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim();
              return (
                <button 
                  key={i} 
                  className="option-button" 
                  onClick={() => onOptionClick(opt)}
                >
                  {displayText}
                </button>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};
const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true);

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([
          {
            id: Date.now(),
            text: "Unable to load messages. Please try again later.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || [],
        originalMessage: item.message // Store original message for form rendering
      }));

      setMessages(formattedMessages);
      setFormDisabled(true);
      setIsTyping(false);
    } catch {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([
        {
          id: Date.now(),
          text: "An error occurred while loading messages.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const checkEnableForm = (text) => {
    const lowerText = typeof text === 'string' ? text.toLowerCase() : '';
    return lowerText.includes("enter") || lowerText.includes("provide");
  };

  const handleFieldUpdate = async (fieldName, value) => {
    // Send field update to API
    const updateMessage = `${fieldName}: ${value}`;
    
    const userMsg = {
      id: Date.now(),
      text: updateMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});
      const res = await postMessage(updateMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
          originalMessage: latest.message
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "An error occurred. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }

    setIsTyping(false);
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});
      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
          originalMessage: latest.message
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "An error occurred. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }

    setIsTyping(false);
  };

  const handleOptionClick = async (optionText) => {
    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setFormDisabled(true);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});
      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
          originalMessage: latest.message
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
    }

    setIsTyping(false);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  // Check if message is a form object
  const isFormMessage = (message) => {
    return typeof message === 'object' && message !== null && 
           !Array.isArray(message) && typeof message !== 'string';
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" ? (
                      <>
                        // Update the FormFieldRenderer call in your render method to include the new handlers:
{isFormMessage(item.originalMessage) ? (
  <FormFieldRenderer 
    message={item.originalMessage}
    onFieldUpdate={handleFieldUpdate}
    onOptionClick={handleOptionClick}
    onFormSubmit={handleFormSubmit}
    onFormClose={handleFormClose}
  />
) : (
  <div
    className="message-content"
    dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
  />
)}
                      </>
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}
                    
                    {/* Render regular options for non-form messages */}
                    {!isFormMessage(item.originalMessage) && item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => {
                          const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim().toLowerCase();
                          const isPlainText =
                            displayText.includes("please select one by name") ||
                            displayText.includes("please select from the following options");

                          if (isPlainText) {
                            return (
                              <div key={i} className="plain-text-option">
                                {displayText}
                              </div>
                            );
                          }

                          return (
                            <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                              {displayText}
                            </button>
                          );
                        })}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Select a relevant option or wait for prompt..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img className="logo" src={send} alt="Send" style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;





.submit-form-button.enabled:hover {
  background: #1976d2;
  transform: translateY(-1px);
}

.submit-form-button.disabled {
  background: #ccc;
  cursor: not-allowed;
  opacity: 0.6;
}

.submit-form-button:disabled {
  background: #ccc;
  cursor: not-allowed;
  opacity: 0.6;
}

/* Update existing form field styles if needed */
.form-field {
  margin-bottom: 15px;
}

.form-field label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
  color: #333;
}

.display-value.empty {
  color: #999;
  font-style: italic;
}

.display-value.multiple-items {
  color: #2196f3;
  font-weight: 500;
}



src/components/ChatBot.jsx
  Line 95:3:    React Hook "useEffect" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?  react-hooks/rules-of-hooks
  Line 214:11:  'getCurrentTime' is not defined                                                                                                                                                              no-undef
  Line 217:3:   'setMessages' is not defined                                                                                                                                                                 no-undef
  Line 218:3:   'setIsTyping' is not defined                                                                                                                                                                 no-undef
  Line 219:3:   'setFormDisabled' is not defined                                                                                                                                                             no-undef
  Line 222:5:   'setApiTimeout' is not defined                                                                                                                                                               no-undef
  Line 224:5:   'clearCurrentTimeout' is not defined                                                                                                                                                         no-undef
  Line 232:15:  'getCurrentTime' is not defined                                                                                                                                                              no-undef
  Line 236:7:   'setMessages' is not defined                                                                                                                                                                 no-undef
  Line 237:7:   'setFormDisabled' is not defined                                                                                                                                                             no-undef
  Line 237:24:  'checkEnableForm' is not defined                                                                                                                                                             no-undef
  Line 240:5:   'clearCurrentTimeout' is not defined                                                                                                                                                         no-undef
  Line 241:5:   'setMessages' is not defined                                                                                                                                                                 no-undef
  Line 247:15:  'getCurrentTime' is not defined                                                                                                                                                              no-undef
  Line 252:3:   'setIsTyping' is not defined                                                                                                                                                                 no-undef
  Line 260:11:  'getCurrentTime' is not defined                                                                                                                                                              no-undef
  Line 263:3:   'setMessages' is not defined                                                                                                                                                                 no-undef
  Line 264:3:   'setIsTyping' is not defined                                                                                                                                                                 no-undef
  Line 265:3:   'setFormDisabled' is not defined                                                                                                                                                             no-undef
  Line 268:5:   'setApiTimeout' is not defined                                                                                                                                                               no-undef
  Line 270:5:   'clearCurrentTimeout' is not defined                                                                                                                                                         no-undef
  Line 278:15:  'getCurrentTime' is not defined                                                                                                                                                              no-undef
  Line 282:7:   'setMessages' is not defined                                                                                                                                                                 no-undef
  Line 283:7:   'setFormDisabled' is not defined                                                                                                                                                             no-undef
  Line 283:24:  'checkEnableForm' is not defined                                                                                                                                                             no-undef
  Line 286:5:   'clearCurrentTimeout' is not defined                                                                                                                                                         no-undef
  Line 287:5:   'setMessages' is not defined                                                                                                                                                                 no-undef
  Line 293:15:  'getCurrentTime' is not defined                                                                                                                                                              no-undef
  Line 298:3:   'setIsTyping' is not defined                                                                                                                                                                 no-undef
  Line 734:19:  'handleFormSubmit' is not defined                                                                                                                                                            no-undef
  Line 735:18:  'handleFormClose' is not defined                                                                                                                                                             no-undef

Search for the keywords to learn more about each error.


