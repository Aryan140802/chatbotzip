import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from '../assets/Send.png';
import logo from '../assets/logobot.jpg';
import { getPost, postMessage } from "../api/PostApi";

// ✅ Helper: Dynamically formats bot messages using <b> tags
const formatDynamicMessage = (html) => {
  if (!html || typeof html !== "string") return html;

  const lines = [];

  // Pattern 1: Label <b>Value</b>
  const pattern1 = /([A-Za-z\s/.'()&,-]+?)\s*<b>(.*?)<\/b>/g;
  let match;

  while ((match = pattern1.exec(html)) !== null) {
    const key = match[1].trim().replace(/[:\s]*$/, "");
    const value = match[2].trim();
    lines.push(`<div><strong>${key}:</strong> ${value} </div>`);
  }

  if (lines.length === 0) return html; // fallback if no matches

  return `<div class="formatted-card">${lines.join("")}</div>`;
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);

  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now
      .getMinutes()
      .toString()
      .padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([{
          id: Date.now(),
          text: "Unable to load messages. The server is taking too long to respond. Please wait for some time.",
          sender: "bot",
          time: getCurrentTime()
        }]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || []
      }));

      setMessages(formattedMessages);
      setIsTyping(false);
    } catch (error) {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([{
        id: Date.now(),
        text: "An error occurred while loading messages. Please try again.",
        sender: "bot",
        time: getCurrentTime()
      }]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);

    try {
      setApiTimeout(() => {
        const errorMsg = {
          id: Date.now(),
          text: "Sorry, the server is taking too long to respond. Please wait for some time.",
          sender: "bot",
          time: getCurrentTime()
        };
        setMessages((prev) => [...prev, errorMsg]);
      });

      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      if (res.data.chat_history?.length > 0) {
        const latest = res.data.chat_history[res.data.chat_history.length - 1];
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || []
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch (error) {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Sorry, something went wrong. Please try again.",
        sender: "bot",
        time: getCurrentTime()
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleOptionClick = async (optionText) => {
    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z].\s*/, "");

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: 'user',
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setIsTyping(true);

    try {
      setApiTimeout(() => {
        const errorMsg = {
          id: Date.now(),
          text: "Sorry, the server is taking too long to respond. Please wait for some time.",
          sender: "bot",
          time: getCurrentTime()
        };
        setMessages((prev) => [...prev, errorMsg]);
      });

      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      if (res.data.chat_history?.length > 0) {
        const latest = res.data.chat_history[res.data.chat_history.length - 1];
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || []
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch (error) {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: 'Sorry, something went wrong fetching that response.',
        sender: 'bot',
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>&#x2212;</button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px"
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {/* ✅ Render with dynamic formatting */}
                    {item.sender === "bot" && item.text.includes("<b>") ? (
                      <div
                        className="message-content"
                        dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                      />
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}

                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => (
                          <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                            {opt}
                          </button>
                        ))}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}

            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="Type a message..."
              className="message-input"
            />
            <button type="submit" className="send-button">
              <img className="logo" src={send} alt="Send" style={{ height: '20px' }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;


Here is the information for <b>Avinash Chaurasia</b>:\n<b>Name</b>: Avinash Chaurasia\n<b>Email</b>: None\n<b>Contact No.</b>:9598579602\n<b>AD ID</b>: v1018696 \n<b>Employee ID</b>: 2790746  \n \n

Here is the information for: Avinash Chaurasia
: Name
Avinash Chaurasia: Email
None: Contact No.
: AD ID
: Employee ID

