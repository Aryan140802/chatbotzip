import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Case 1: HTML-formatted messages with <b> tags
    if (text.includes("<b>")) {
  // Match multiple <b>key</b>: value or pre-text: <b>value</b>
  const pattern = /(?:<b>(.*?)<\/b>:\s*(.*?))|(?:(.*?)\s*:\s*<b>(.*?)<\/b>)/gs;
  const lines = [];
  let match;
  while ((match = pattern.exec(text)) !== null) {
    const key = (match[1] || match[3] || "").trim();
    const value = (match[2] || match[4] || "").trim().replace(/\n/g, "<br/>");
    lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
  }

  // If nothing matched, fallback to rendering original <b> content
  if (lines.length === 0) {
    return `<div class="formatted-card">${text}</div>`;
  }

  return `<div class="formatted-card">${lines.join("")}</div>`;
}

  // Case 2: Likely a server config line (very long, no <b>, many ":")
  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";
    let index = 0;

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return `<div class="formatted-card">${formatted.trim()}</div>`;
  }

  // Default plain text
  const cleanedText = text.replace(/:,\s*$/, ":").trim();
  return cleanedText;
};

// Dynamic Form Component
const DynamicForm = ({ fields, onSubmit, onCancel, formType }) => {
  const [formData, setFormData] = useState({});
  const [errors, setErrors] = useState({});

  useEffect(() => {
    // Initialize form data with empty values or default values from fields
    const initialData = {};
    fields.forEach(field => {
      initialData[field.name] = field.defaultValue || '';
    });
    setFormData(initialData);
  }, [fields]);

  const handleInputChange = (fieldName, value) => {
    setFormData(prev => ({
      ...prev,
      [fieldName]: value
    }));

    // Clear error for this field when user starts typing
    if (errors[fieldName]) {
      setErrors(prev => ({
        ...prev,
        [fieldName]: null
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    fields.forEach(field => {
      // Custom validation for workload form - make 'service' field mandatory
      if (formType === 'workload' && field.name.toLowerCase() === 'service') {
        if (!formData[field.name] || formData[field.name].trim() === '') {
          newErrors[field.name] = 'Service field is required';
        }
      } else if (field.required && (!formData[field.name] || formData[field.name].trim() === '')) {
        newErrors[field.name] = `${field.label || field.name} is required`;
      }

      // Add other validation rules as needed
      if (field.type === 'email' && formData[field.name] &&
          !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData[field.name])) {
        newErrors[field.name] = 'Please enter a valid email address';
      }

      if (field.minLength && formData[field.name] &&
          formData[field.name].length < field.minLength) {
        newErrors[field.name] = `Minimum ${field.minLength} characters required`;
      }
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateForm()) {
      onSubmit(formData);
    }
  };

  const renderField = (field) => {
    const { name, type, label, placeholder, options, required } = field;
    const value = formData[name] || '';
    const error = errors[name];

    // Custom logic for 'have multiple field' form
    if (formType === 'multiple' && (name.toLowerCase().includes('expiry') || name.toLowerCase().includes('created'))) {
      // For expiry option and created option fields - add dropdown with before/after
      if (name.toLowerCase().includes('option')) {
        return (
          <div key={name} className="form-field">
            <label className="form-label">
              {label || name} {required && <span className="required">*</span>}
            </label>
            <select
              value={value}
              onChange={(e) => handleInputChange(name, e.target.value)}
              className={`form-select ${error ? 'error' : ''}`}
            >
              <option value="">Select an option</option>
              <option value="before">Before</option>
              <option value="after">After</option>
            </select>
            {error && <span className="error-message">{error}</span>}
          </div>
        );
      }
      // For expiry and created fields (without 'option' in name) - add date picker
      else {
        return (
          <div key={name} className="form-field">
            <label className="form-label">
              {label || name} {required && <span className="required">*</span>}
            </label>
            <input
              type="date"
              value={value}
              onChange={(e) => handleInputChange(name, e.target.value)}
              className={`form-input ${error ? 'error' : ''}`}
            />
            {error && <span className="error-message">{error}</span>}
          </div>
        );
      }
    }

    switch (type) {
      case 'date':
        return (
          <div key={name} className="form-field">
            <label className="form-label">
              {label || name} {required && <span className="required">*</span>}
            </label>
            <input
              type="date"
              value={value}
              onChange={(e) => handleInputChange(name, e.target.value)}
              className={`form-input ${error ? 'error' : ''}`}
            />
            {error && <span className="error-message">{error}</span>}
          </div>
        );

      case 'select':
        return (
          <div key={name} className="form-field">
            <label className="form-label">
              {label || name} {required && <span className="required">*</span>}
            </label>
            <select
              value={value}
              onChange={(e) => handleInputChange(name, e.target.value)}
              className={`form-select ${error ? 'error' : ''}`}
            >
              <option value="">Select an option</option>
              {options?.map((option, idx) => (
                <option key={idx} value={option.value || option}>
                  {option.label || option}
                </option>
              ))}
            </select>
            {error && <span className="error-message">{error}</span>}
          </div>
        );

      case 'textarea':
        return (
          <div key={name} className="form-field">
            <label className="form-label">
              {label || name} {required && <span className="required">*</span>}
            </label>
            <textarea
              value={value}
              onChange={(e) => handleInputChange(name, e.target.value)}
              placeholder={placeholder}
              className={`form-textarea ${error ? 'error' : ''}`}
              rows={3}
            />
            {error && <span className="error-message">{error}</span>}
          </div>
        );

      case 'checkbox':
        return (
          <div key={name} className="form-field checkbox-field">
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={value === true || value === 'true'}
                onChange={(e) => handleInputChange(name, e.target.checked)}
                className="form-checkbox"
              />
              {label || name} {required && <span className="required">*</span>}
            </label>
            {error && <span className="error-message">{error}</span>}
          </div>
        );

      default:
        return (
          <div key={name} className="form-field">
            <label className="form-label">
              {label || name} {required && <span className="required">*</span>}
            </label>
            <input
              type={type || 'text'}
              value={value}
              onChange={(e) => handleInputChange(name, e.target.value)}
              placeholder={placeholder}
              className={`form-input ${error ? 'error' : ''}`}
            />
            {error && <span className="error-message">{error}</span>}
          </div>
        );
    }
  };

  return (
    <div className="dynamic-form-container">
      <form onSubmit={handleSubmit} className="dynamic-form">
        {fields.map(renderField)}
        <div className="form-actions">
          <button type="button" onClick={onCancel} className="cancel-button">
            Cancel
          </button>
          <button type="submit" className="submit-button">
            Submit
          </button>
        </div>
      </form>
    </div>
  );
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true);
  const [activeForm, setActiveForm] = useState(null);
  const [currentFormType, setCurrentFormType] = useState(null);

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

  const hasFormFields = (response) => {
    if (!response || !response.message) return false;

    // Check if message is an object and not an array
    return typeof response.message === 'object' &&
           !Array.isArray(response.message) &&
           Object.keys(response.message).length > 0;
  };

  const determineFormType = (fields) => {
    // Check if any field name contains 'service' for workload form
    const hasServiceField = fields.some(field => 
      field.name.toLowerCase().includes('service')
    );
    
    // Check if any field name contains 'expiry' or 'created' for multiple form
    const hasExpiryOrCreatedField = fields.some(field => 
      field.name.toLowerCase().includes('expiry') || 
      field.name.toLowerCase().includes('created')
    );
    
    if (hasServiceField) return 'workload';
    if (hasExpiryOrCreatedField) return 'multiple';
    return 'default';
  };

  const extractFormFields = (response) => {
    if (!hasFormFields(response)) return null;

    return Object.entries(response.message).map(([name, value]) => {
      const baseField = {
        name,
        label: name.charAt(0).toUpperCase() + name.slice(1),
        defaultValue: value || '',
        required: false // Set based on your requirements
      };

      // You can add logic here to determine field type based on name or value
      return {
        ...baseField,
        type: 'text' // Default to text input, modify as needed
      };
    });
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([{
          id: Date.now(),
          text: "Unable to load messages. Please try again later.",
          sender: "bot",
          time: getCurrentTime(),
        }]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => {
        const message = {
          id: Date.now() + index,
          text: typeof item.message === 'string' ? item.message : "",
          sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
          time: getCurrentTime(),
          options: item.options || [],
        };

        if (hasFormFields(item)) {
          message.formFields = extractFormFields(item);
          message.isFormMessage = true;
        }

        return message;
      });

      setMessages(formattedMessages);
      setFormDisabled(true);
      setIsTyping(false);
    } catch {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([{
        id: Date.now(),
        text: "An error occurred while loading messages.",
        sender: "bot",
        time: getCurrentTime(),
      }]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, activeForm]);

  const checkEnableForm = (text) => {
    const lowerText = text.toLowerCase();
    return lowerText.includes("enter") || lowerText.includes("provide");
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});

      const lastBotMessage = messages.filter(m => m.sender === "bot").slice(-1)[0];
      let payload;

      if (lastBotMessage && lastBotMessage.isFormMessage) {
        payload = {
          message: {
            reply: newMessage
          }
        };
      } else {
        payload = newMessage;
      }

      const res = await postMessage(payload);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };

        if (hasFormFields(latest)) {
          botResponse.formFields = extractFormFields(latest);
          botResponse.isFormMessage = true;
        }

        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "An error occurred. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }

    setIsTyping(false);
  };

  const handleOptionClick = async (optionText) => {
    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setFormDisabled(true);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const lastBotMessage = messages.filter(m => m.sender === "bot").slice(-1)[0];
      let payload;

      if (lastBotMessage && lastBotMessage.isFormMessage) {
        payload = {
          message: {
            option: cleanedOpt
          }
        };
      } else {
        payload = cleanedOpt;
      }

      const res = await postMessage(payload);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };

        if (hasFormFields(latest)) {
          botResponse.formFields = extractFormFields(latest);
          botResponse.isFormMessage = true;
        }

        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
    }

    setIsTyping(false);
  };

  const handleFormSubmit = async (formData) => {
    setActiveForm(null);
    setCurrentFormType(null);

    const userMessage = {
      id: Date.now(),
      text: `Form submitted: ${JSON.stringify(formData)}`,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});

      // Send the form data directly as the message object
      const payload = {
        message: formData
      };

      const res = await postMessage(payload);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: typeof latest.message === 'string' ? latest.message : "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };

        if (hasFormFields(latest)) {
          botResponse.formFields = extractFormFields(latest);
          botResponse.isFormMessage = true;
        }

        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch (error) {
      clearCurrentTimeout();
      console.error('Form submission error:', error);
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "An error occurred while submitting the form. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
    setIsTyping(false);
  };

  const handleFormCancel = () => {
    setActiveForm(null);
    setCurrentFormType(null);
  };

  const handleFormButtonClick = (fields) => {
    const formType = determineFormType(fields);
    setCurrentFormType(formType);
    setActiveForm(fields);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" && !item.isFormMessage ? (
                      <div
                        className="message-content"
                        dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                      />
                    ) : item.sender === "bot" && item.isFormMessage ? (
                      <div className="message-content">
                        <p>Please fill out the form with the required information:</p>
                      </div>
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}

                    {item.formFields && (
                      <div className="form-trigger">
                        <button
                          className="form-button"
                          onClick={() => handleFormButtonClick(item.formFields)}
                        >
                          Fill Form
                        </button>
                      </div>
                    )}

                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => {
                          const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim().toLowerCase();
                          const isPlainText =
                            displayText.includes("please select one by name") ||
                            displayText.includes("please select from the following options");

                          if (isPlainText) {
                            return (
                              <div key={i} className="plain-text-option">
                                {displayText}
                              </div>
                            );
                          }

                          return (
                            <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                              {displayText}
                            </button>
                          );
                        })}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {activeForm && (
            <DynamicForm
              fields={activeForm}
              onSubmit={handleFormSubmit}
              onCancel={handleFormCancel}
              formType={currentFormType}
            />
          )}

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Select a relevant option or wait for prompt..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img className="logo" src={send} alt="Send" style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;
