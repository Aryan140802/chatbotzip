import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Handle object-like responses (e.g., {layer:"", service:""})
  if (text.startsWith('{') && text.endsWith('}')) {
    try {
      const data = JSON.parse(text);
      if (data.layer || data.service) {
        return `
          <div class="formatted-card">
            <div><strong>Layer:</strong> ${data.layer || 'N/A'}</div>
            <div><strong>Service:</strong> ${data.service || 'N/A'}</div>
          </div>
        `;
      }
      // Handle other object formats if needed
      return `
        <div class="formatted-card">
          ${Object.entries(data).map(([key, value]) => 
            `<div><strong>${key}:</strong> ${value || 'N/A'}</div>`
          ).join('')}
        </div>
      `;
    } catch (e) {
      // Not valid JSON, fall through to other formats
    }
  }

  // Rest of your existing format handling...
  if (text.includes("<b>")) {
    const pattern = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
    const lines = [];
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const key = match[1].trim();
      const value = match[2].trim().replace(/\n/g, "<br/>");
      lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
    }
    return `<div class="formatted-card">${lines.join("")}</div>`;
  }

  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";
    let index = 0;

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return `<div class="formatted-card">${formatted.trim()}</div>`;
  }

  const cleanedText = text.replace(/:,\s*$/, ":").trim();
  return cleanedText;
};

// Dynamic Form Component remains the same...

const Chatbot = ({ setChatbotMinimized }) => {
  // ... existing state declarations ...

  const handleFormButtonClick = (fields) => {
    setActiveForm(fields);
    setFormDisabled(true); // Disable input while form is open
  };

  const handleFormSubmit = async (formData) => {
    setActiveForm(null);
    setFormDisabled(false); // Re-enable input after form submission
    
    const userMessage = {
      id: Date.now(),
      text: `Form submitted: ${JSON.stringify(formData)}`,
      sender: "user",
      time: getCurrentTime(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setIsTyping(true);
    
    try {
      const res = await postMessage({ message: formData });
      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        let messageText = typeof latest.message === 'object' 
          ? JSON.stringify(latest.message) 
          : latest.message || "";

        const botResponse = {
          id: Date.now(),
          text: messageText,
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };

        if (hasFormFields(latest)) {
          botResponse.formFields = extractFormFields(latest);
          botResponse.isFormMessage = true;
        }

        setMessages((prev) => [...prev, botResponse]);
      }
    } catch (error) {
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: "Form submission failed. Please try again.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
    setIsTyping(false);
  };

  const handleFormCancel = () => {
    setActiveForm(null);
    setFormDisabled(false); // Re-enable input when form is canceled
  };

  // ... rest of the component code ...

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      {/* ... existing JSX ... */}
      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div key={index} className={`message-wrapper ${item.sender.toLowerCase()}`}>
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    <div
                      className="message-content"
                      dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                    />
                    
                    {item.formFields && !activeForm && (
                      <div className="form-trigger">
                        <button 
                          className="form-button"
                          onClick={() => handleFormButtonClick(item.formFields)}
                          disabled={!!activeForm}
                        >
                          Fill Form
                        </button>
                      </div>
                    )}
                    
                    {/* ... rest of message rendering ... */}
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {/* ... */}
          </div>

          {activeForm && (
            <DynamicForm
              fields={activeForm}
              onSubmit={handleFormSubmit}
              onCancel={handleFormCancel}
            />
          )}

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Please complete the form first..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled || !!activeForm}
            />
            <button 
              type="submit" 
              className="send-button" 
              disabled={formDisabled || !!activeForm}
            >
              <img className="logo" src={send} alt="Send" style={{ height: "20px" }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;
