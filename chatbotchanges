import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Case 1: HTML-formatted messages with <b> tags
  if (text.includes("<b>")) {
    const pattern = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
    const lines = [];
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const key = match[1].trim();
      const value = match[2].trim().replace(/\n/g, "<br/>");
      lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
    }
    return `<div class="formatted-card">${lines.join("")}</div>`;
  }

  // Case 2: Likely a server config line (very long, no <b>, many ":")
  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    // Insert a <br/> before each key-value pair, except the first 2â€“3 lines
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";
    let index = 0;

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return `<div class="formatted-card">${formatted.trim()}</div>`;
  }

  // Default: return plain text for non-server, non-HTML messages
  return text;
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [showWorkloadForm, setShowWorkloadForm] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true);
  const [formData, setFormData] = useState({
    subject: "",
    source: "",
    destination: "",
    zone: "",
    port: "",
    beforeCreationDate: "",
    beforeExpireDate: "",
  });

  // Workload form state
  const [workloadFormData, setWorkloadFormData] = useState({});
  const [workloadFields, setWorkloadFields] = useState({});

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([
          {
            id: Date.now(),
            text: "Unable to load messages. Please try again later.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || [],
      }));

      setMessages(formattedMessages);
      setFormDisabled(true);
      setIsTyping(false);
    } catch {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([
        {
          id: Date.now(),
          text: "An error occurred while loading messages.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const checkEnableForm = (text) => {
    const lowerText = text.toLowerCase();
    return lowerText.includes("enter") || lowerText.includes("provide");
  };

  // Function to fetch workload form fields from backend
  const fetchWorkloadFields = async () => {
    try {
      // Replace this with your actual API call to get workload form fields
      // const response = await getWorkloadFields();
      
      // Mock data based on your API format: {layer: [], server: [], eg: [], service: ""}
      // Replace this with actual API call
      const apiResponse = {
        layer: ["Layer 1", "Layer 2", "Layer 3"], // Multiple values - dropdown
        server: [], // Empty array - user input
        eg: ["Production"], // Single value - display only
        service: "" // Empty string - user input required (mandatory)
      };

      // Transform API response to internal format
      const transformedFields = {};
      
      Object.keys(apiResponse).forEach(fieldName => {
        const fieldValue = apiResponse[fieldName];
        
        const fieldValue = apiResponse[fieldName];
        
        if (fieldName === 'service') {
          // Service is always mandatory user input
          transformedFields[fieldName] = {
            type: "input",
            value: "",
            options: [],
            required: true
          };
        } else if (Array.isArray(fieldValue)) {
          if (fieldValue.length === 0) {
            // Empty array - user input field
            transformedFields[fieldName] = {
              type: "input",
              value: "",
              options: []
            };
          } else if (fieldValue.length === 1) {
            // Single value - display only
            transformedFields[fieldName] = {
              type: "display",
              value: fieldValue[0],
              options: []
            };
          } else {
            // Multiple values - dropdown
            transformedFields[fieldName] = {
              type: "dropdown",
              value: "",
              options: fieldValue
            };
          }
        }
      });

      setWorkloadFields(transformedFields);
      
      // Initialize form data with default values
      const initialFormData = {};
      Object.keys(transformedFields).forEach(key => {
        initialFormData[key] = transformedFields[key].value || "";
      });
      setWorkloadFormData(initialFormData);
      
    } catch (error) {
      console.error("Error fetching workload fields:", error);
    }
  };
        

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "An error occurred. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleOptionClick = async (optionText) => {
    // Check for workload option
    if (optionText.toLowerCase().includes("workload")) {
      await fetchWorkloadFields();
      setShowWorkloadForm(true);
      return;
    }

    if (optionText.toLowerCase().includes("have multiple fields")) {
      setShowForm(true);
      return;
    }

    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setFormDisabled(true);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
    }

    setIsTyping(false);
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setShowForm(false);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(formData);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Something went wrong. Try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleWorkloadFormSubmit = async (e) => {
    e.preventDefault();
    
    // Validate required fields
    const requiredFields = Object.keys(workloadFields).filter(
      key => workloadFields[key].required
    );
    
    for (const field of requiredFields) {
      if (!workloadFormData[field] || workloadFormData[field].trim() === "") {
        alert(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
        return;
      }
    }

    setShowWorkloadForm(false);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(workloadFormData);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Something went wrong with workload submission. Try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleWorkloadFieldChange = (fieldName, value) => {
    setWorkloadFormData(prev => ({
      ...prev,
      [fieldName]: value
    }));
  };

  const renderWorkloadField = (fieldName, fieldConfig) => {
    const { type, value, options, required } = fieldConfig;
    const currentValue = workloadFormData[fieldName] || value || "";

    switch (type) {
      case "display":
        return (
          <div key={fieldName} className="form-field">
            <label>{fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}:</label>
            <div className="display-value">{value}</div>
          </div>
        );

      case "dropdown":
        return (
          <div key={fieldName} className="form-field">
            <label>
              {fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}
              {required && <span className="required">*</span>}:
            </label>
            <select
              value={currentValue}
              onChange={(e) => handleWorkloadFieldChange(fieldName, e.target.value)}
              required={required}
            >
              <option value="">Select {fieldName}</option>
              {options.map((option, index) => (
                <option key={index} value={option}>
                  {option}
                </option>
              ))}
            </select>
          </div>
        );

      case "input":
      default:
        return (
          <div key={fieldName} className="form-field">
            <label>
              {fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}
              {required && <span className="required">*</span>}:
            </label>
            <input
              type="text"
              value={currentValue}
              onChange={(e) => handleWorkloadFieldChange(fieldName, e.target.value)}
              placeholder={`Enter ${fieldName}`}
              required={required}
            />
          </div>
        );
    }
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" ? (
                      <div
                        className="message-content"
                        dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                      />
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}
                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => {
                          const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim().toLowerCase();

                          // Check if this option should be rendered as plain text
                          const isPlainText = displayText.includes("please select one by name") ||
                                              displayText.includes("please select from the following options");

                          if (isPlainText) {
                            return (
                              <div key={i} className="plain-text-option">
                                {opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim()}
                              </div>
                            );
                          }

                          return (
                            <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                              {opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim()}
                            </button>
                          );
                        })}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Original Multi-field Form */}
          {showForm && (
            <form className="multi-field-form" onSubmit={handleFormSubmit}>
              <div className="form-grid">
                <input type="text" placeholder="Subject" value={formData.subject} onChange={(e) => setFormData({ ...formData, subject: e.target.value })} />
                <input type="text" placeholder="Source" value={formData.source} onChange={(e) => setFormData({ ...formData, source: e.target.value })} />
                <input type="text" placeholder="Destination" value={formData.destination} onChange={(e) => setFormData({ ...formData, destination: e.target.value })} />
                <input type="text" placeholder="Zone" value={formData.zone} onChange={(e) => setFormData({ ...formData, zone: e.target.value })} />
                <input type="text" placeholder="Port" value={formData.port} onChange={(e) => setFormData({ ...formData, port: e.target.value })} />
                <input
                  type="text"
                  placeholder="Before Creation Date"
                  value={formData.beforeCreationDate}
                  onChange={(e) => setFormData({ ...formData, beforeCreationDate: e.target.value })}
                  onFocus={(e) => (e.target.type = "date")}
                  onBlur={(e) => {
                    if (!e.target.value) e.target.type = "text";
                  }}
                />
                <input
                  type="text"
                  placeholder="Before Expire Date"
                  value={formData.beforeExpireDate}
                  onChange={(e) => setFormData({ ...formData, beforeExpireDate: e.target.value })}
                  onFocus={(e) => (e.target.type = "date")}
                  onBlur={(e) => {
                    if (!e.target.value) e.target.type = "text";
                  }}
                />
              </div>
              <button type="submit" className="search-button">Search</button>
            </form>
          )}

          {/* New Workload Form */}
          {showWorkloadForm && (
            <form className="workload-form" onSubmit={handleWorkloadFormSubmit}>
              <h3>Workload Configuration</h3>
              <div className="workload-form-grid">
                {Object.entries(workloadFields).map(([fieldName, fieldConfig]) =>
                  renderWorkloadField(fieldName, fieldConfig)
                )}
              </div>
              <div className="form-actions">
                <button type="button" onClick={() => setShowWorkloadForm(false)} className="cancel-button">
                  Cancel
                </button>
                <button type="submit" className="submit-button">
                  Submit Workload
                </button>
              </div>
            </form>
          )}

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Select a relevant option or wait for prompt..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img className="logo" src={send} alt="Send" style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;
