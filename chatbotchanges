import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Case 1: HTML-formatted messages with <b> tags
  if (text.includes("<b>")) {
    const pattern = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
    const lines = [];
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const key = match[1].trim();
      const value = match[2].trim().replace(/\n/g, "<br/>");
      lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
    }
    return `<div class="formatted-card">${lines.join("")}</div>`;
  }

  // Case 2: Likely a server config line (very long, no <b>, many ":")
  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    // Insert a <br/> before each key-value pair, except the first 2â€“3 lines
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";
    let index = 0;

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return `<div class="formatted-card">${formatted.trim()}</div>`;
  }

  // Default: return plain text for non-server, non-HTML messages
  return text;
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [showWorkloadForm, setShowWorkloadForm] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true);
  const [formData, setFormData] = useState({
    subject: "",
    source: "",
    destination: "",
    zone: "",
    port: "",
    beforeCreationDate: "",
    beforeExpireDate: "",
  });
  const [workloadFormData, setWorkloadFormData] = useState({
    layer: "",
    server: "",
    eg: "",
    service: ""
  });
  const [workloadOptions, setWorkloadOptions] = useState({
    layer: [],
    server: [],
    eg: []
  });

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([
          {
            id: Date.now(),
            text: "Unable to load messages. Please try again later.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || [],
      }));

      setMessages(formattedMessages);
      setFormDisabled(true);
      setIsTyping(false);
    } catch {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([
        {
          id: Date.now(),
          text: "An error occurred while loading messages.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const checkEnableForm = (text) => {
    const lowerText = text.toLowerCase();
    return lowerText.includes("enter") || lowerText.includes("provide");
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    setFormDisabled(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "An error occurred. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleWorkloadOptionClick = async (optionText) => {
    try {
      setIsTyping(true);
      
      // Mock API call to get workload form fields
      // Replace this with your actual API call
      const mockApiResponse = {
        data: {
          layer: [], // empty - user needs to fill
          server: ["server1"], // single value - display in front
          eg: ["option1", "option2", "option3"], // multiple values - dropdown
          service: "" // empty string - user needs to fill
        }
      };
      
      // In real implementation, replace above with:
      // const res = await getWorkloadFormFields(); // or whatever your API call is
      const workloadData = mockApiResponse.data;
      
      setWorkloadOptions({
        layer: workloadData.layer || [],
        server: workloadData.server || [],
        eg: workloadData.eg || []
      });
      
      // Initialize form data
      setWorkloadFormData({
        layer: workloadData.layer?.length === 1 ? workloadData.layer[0] : "",
        server: workloadData.server?.length === 1 ? workloadData.server[0] : "",
        eg: workloadData.eg?.length === 1 ? workloadData.eg[0] : "",
        service: workloadData.service || ""
      });
      
      setShowWorkloadForm(true);
      setIsTyping(false);
    } catch (error) {
      setIsTyping(false);
      console.error("Error fetching workload form data:", error);
    }
  };

  const handleOptionClick = async (optionText) => {
    // Check if this is a workload option
    if (optionText.toLowerCase().includes("workload")) {
      await handleWorkloadOptionClick(optionText);
      return;
    }

    if (optionText.toLowerCase().includes("have multiple fields")) {
      setShowForm(true);
      return;
    }

    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setFormDisabled(true);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    } catch {
      clearCurrentTimeout();
    }

    setIsTyping(false);
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setShowForm(false);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(formData);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Something went wrong. Try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleWorkloadFormSubmit = async (e) => {
    e.preventDefault();
    setShowWorkloadForm(false);
    setIsTyping(true);

    try {
      setApiTimeout(() => {});

      const res = await postMessage(workloadFormData);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Something went wrong. Try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const renderWorkloadField = (fieldName, label) => {
    const options = workloadOptions[fieldName];
    const value = workloadFormData[fieldName];

    // If field is empty array, render input field
    if (options.length === 0) {
      return (
        <input
          type="text"
          placeholder={label}
          value={value}
          onChange={(e) => setWorkloadFormData({ ...workloadFormData, [fieldName]: e.target.value })}
          required
        />
      );
    }

    // If field has single value, display it as readonly with label
    if (options.length === 1) {
      return (
        <div className="single-value-field">
          <label>{label}:</label>
          <span className="single-value">{options[0]}</span>
          <input type="hidden" value={options[0]} />
        </div>
      );
    }

    // If field has multiple values, render dropdown
    return (
      <select
        value={value}
        onChange={(e) => setWorkloadFormData({ ...workloadFormData, [fieldName]: e.target.value })}
        required
      >
        <option value="">Select {label}</option>
        {options.map((option, index) => (
          <option key={index} value={option}>
            {option}
          </option>
        ))}
      </select>
    );
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" ? (
                      <div
                        className="message-content"
                        dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                      />
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}
                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => {
                          const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim().toLowerCase();

                          // Check if this option should be rendered as plain text
                          const isPlainText = displayText.includes("please select one by name") ||
                                              displayText.includes("please select from the following options");

                          if (isPlainText) {
                            return (
                              <div key={i} className="plain-text-option">
                                {opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim()}
                              </div>
                            );
                          }

                          return (
                            <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                              {opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim()}
                            </button>
                          );
                        })}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {showForm && (
            <form className="multi-field-form" onSubmit={handleFormSubmit}>
              <div className="form-grid">
                <input type="text" placeholder="Subject" value={formData.subject} onChange={(e) => setFormData({ ...formData, subject: e.target.value })} />
                <input type="text" placeholder="Source" value={formData.source} onChange={(e) => setFormData({ ...formData, source: e.target.value })} />
                <input type="text" placeholder="Destination" value={formData.destination} onChange={(e) => setFormData({ ...formData, destination: e.target.value })} />
                <input type="text" placeholder="Zone" value={formData.zone} onChange={(e) => setFormData({ ...formData, zone: e.target.value })} />
                <input type="text" placeholder="Port" value={formData.port} onChange={(e) => setFormData({ ...formData, port: e.target.value })} />
                <input
                  type="text"
                  placeholder="Before Creation Date"
                  value={formData.beforeCreationDate}
                  onChange={(e) => setFormData({ ...formData, beforeCreationDate: e.target.value })}
                  onFocus={(e) => (e.target.type = "date")}
                  onBlur={(e) => {
                    if (!e.target.value) e.target.type = "text";
                  }}
                />
                <input
                  type="text"
                  placeholder="Before Expire Date"
                  value={formData.beforeExpireDate}
                  onChange={(e) => setFormData({ ...formData, beforeExpireDate: e.target.value })}
                  onFocus={(e) => (e.target.type = "date")}
                  onBlur={(e) => {
                    if (!e.target.value) e.target.type = "text";
                  }}
                />
              </div>
              <button type="submit" className="search-button">Search</button>
            </form>
          )}

          {showWorkloadForm && (
            <form className="workload-form" onSubmit={handleWorkloadFormSubmit}>
              <h3>Workload Configuration</h3>
              <div className="workload-form-grid">
                {renderWorkloadField("layer", "Layer")}
                {renderWorkloadField("server", "Server")}
                {renderWorkloadField("eg", "EG")}
                <input
                  type="text"
                  placeholder="Service"
                  value={workloadFormData.service}
                  onChange={(e) => setWorkloadFormData({ ...workloadFormData, service: e.target.value })}
                  required
                />
              </div>
              <div className="form-buttons">
                <button type="button" onClick={() => setShowWorkloadForm(false)} className="cancel-button">
                  Cancel
                </button>
                <button type="submit" className="submit-button">Submit</button>
              </div>
            </form>
          )}

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Select a relevant option or wait for prompt..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img className="logo" src={send} alt="Send" style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }} />
            </button>
          </form>
        </>
      )}
      

    </div>
  );
};

export default Chatbot;


/* Chatbot Wrapper */
.chat-container {
  position: fixed;
  width: 450px; /* fixed width or percentage */
  height: 782px; /* fixed height (prevents growing/shrinking) */

  color: white;
  display: flex;
  flex-direction: column;
  border: 2px solid var(--border-color);
  border-radius: 10px;
  box-shadow: 0 0 30px rgba(145, 145, 145, 0.4);
  overflow: hidden;
  font-size: 14px;
  margin-right: 25px;

  margin-top: 20px;
  position: relative; /* in case you want to make it floating later */
}

/* Header */
.chat-header {
  background: transparent;
  padding: 8px 5px;
  text-align: center;
  font-weight: bold;
  border-bottom: 2px solid #444;
}

.chat-header {
  display: flex;
  align-items: center;
  gap: 30px;
  height: 80px;


  border-bottom: 1px solid #ddd; /* optional */
}


.chat-title h1 {
  margin: 0;
  font-size: 24px;
}

.chat-title h5 {
  margin: 0;
  font-weight: normal;
  font-size: 12px;
  color: #aaa;
}

.chat-logo {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  margin-right: 30px;
  margin-left: 5px;
}


  .minimize-button {
    margin-left: 28px;
    background: transparent;
    border: 2px solid var(--border-color);
    border-radius: 5px;
    font-size: 26px;
    cursor: pointer;
    color: #ffffff;
    font-weight: bolder;
    padding: 1px 10px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .minimize-button:hover {
    background-color: rgba(0, 123, 255, 0.1);
    transform: scale(1.1);

  }




.messages-container {
  position: relative; /* Allows the pseudo-element for the logo to be positioned */
  flex: 1;
  overflow-y: auto;
  padding: 10px 10px;
  display: flex;
  flex-direction: column;
  gap: 6px;
  min-height: 0;
  margin-top: 10px;

}
/* .background-container {
  background-image: url('../assets/Graident\ Ai\ Robot-Photoroom.png');
  background-size: 100% 100%;
  background-repeat: no-repeat;
  background-position: center;
  height: 100vh;
  width: 100%;
  z-index: 1;


} */





/* Scrollbar Styling */
.messages-container::-webkit-scrollbar {
  width: 6px;
}
.messages-container::-webkit-scrollbar-thumb {
  background-color: #666;
  border-radius: 4px;
}

/* Input Form */
.message-form {
  display: flex;
  padding: 6px 8px;
  border-top: 1px solid #444;
  background: transparent;
}

.message-input {
  flex: 1;
  padding: 5px 8px;
  border-radius: 5px;
  border: none;
  font-size: 0.85rem;
  outline: none;
}

.send-button {
  margin-left: 5px;

  border: none;
  padding: 6px 10px;
  border-radius: 5px;
  cursor: pointer;
 background-color: #ffffff;
}



/* Message Bubbles */
.message {
  max-width: 80%;
  padding: 6px 10px;
  border-radius: 8px;
  font-size: 1rem;
  line-height: 1.3;
  word-wrap: break-word;
}

.user-message {
  background-color: #4875a6;
  color: white;
  align-self: flex-end;
  justify-content: flex-end;
}

.bot-message {
  background-color:rgb(137, 74, 137);
  color: white;
  align-self: flex-start;


}


.message-time {
  font-size: 0.65rem;
  text-align: right;
  color: #aaa;
  margin-top: 2px;
}




.chat-container.minimized {
  width: 60px;
  height: 60px;
  padding: 5px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.chat-container.minimized .chat-header {
  width: 100%;
  justify-content: center;
}

.chat-container.minimized .chat-logo {
  margin: 0 auto;
  width: 50px;
  height: 50px;
}

.chat-container.minimized .chat-title,
.chat-container.minimized .minimize-button,
.chat-container.minimized .messages-container,
.chat-container.minimized .message-form {
  display: none;
}



@media (max-height: 800px) {
  .chat-container {
    width: 300px;
    height: 420px;
  }
}

@media (max-width: 768px) {
  .chat-container {
    width: 90vw;
    height: 70vh;
    right: 5%;
    bottom: 10px;
  }
}

.options-list {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 8px;
}

.option-button {
  background-color: rgb(172, 113, 172);
  color: white;
  border: none;
  padding: 6px 12px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.option-button:hover {
  background-color: #f5f5f5;
  color: #1e1e1e;
  font-weight: 600;
}

.formatted-card {
  display: flex;
  flex-direction: column;
  gap: 4px;
  line-height: 1.4;
}
.formatted-card strong {
  font-weight: 600;
}



.multi-field-form {
  padding: 12px;
  background-color: #f1f1f1;
  border-radius: 10px;
  margin: 10px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 10px;
}

.multi-field-form input,
.search-button {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 14px;
}

.search-button {
  background-color: #007bff;
  color: white;
  font-weight: bold;
  border: none;
  cursor: pointer;
  width: 100%;
}


