import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

const formatDynamicMessage = (text) => {
  if (!text || typeof text !== "string") return text;

  // Case 1: HTML-formatted messages with <b> tags in key-value format
  if (text.includes("<b>") && text.match(/<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs)) {
    const pattern = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
    const lines = [];
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const key = match[1].trim();
      const value = match[2].trim().replace(/\n/g, "<br/>");
      lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
    }
    return `<div class="formatted-card">${lines.join("")}</div>`;
  }

  // Case 2: Simple <b> tag handling (for inline bold text)
  if (text.includes("<b>") && text.includes("</b>")) {
    let processedText = text.replace(/<b>(.*?)<\/b>/g, '<strong>$1</strong>');
    processedText = processedText.replace(/\n/g, "<br/>");
    return processedText;
  }

  // Case 3: Likely a server config line (very long, no <b>, many ":")
  const isServerConfig = text.length > 100 && (text.match(/:/g) || []).length > 4;
  if (isServerConfig) {
    const pattern = /([^\n:]+?:[^:\n]+?)(?=\s+[A-Za-z0-9_\-]+ ?:|$)/g;
    let formatted = "";

    const introMatch = text.match(/^(.*?OS Version.*?\))\s*/);
    if (introMatch) {
      formatted += introMatch[1] + "<br/>";
      text = text.slice(introMatch[0].length);
    }

    const kvPairs = [...text.matchAll(pattern)];
    kvPairs.forEach((m) => {
      formatted += m[1].trim() + "<br/>";
    });

    return `<div class="formatted-card">${formatted.trim()}</div>`;
  }

  // Default plain text
  const cleanedText = text.replace(/:,\s*$/, ":").trim();
  return cleanedText;
};

// Utility function to check if response is a JSON object
const isJsonFormData = (data) => {
  return typeof data === 'object' &&
         data !== null &&
         !Array.isArray(data) &&
         Object.keys(data).length > 0;
};

// Dynamic Form Component
const DynamicForm = ({ formData, onSubmit, onCancel }) => {
  const [formValues, setFormValues] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState("");

  useEffect(() => {
    // Initialize form values
    const initialValues = {};
    Object.keys(formData).forEach(key => {
      if (!key.endsWith('options')) {
        const value = formData[key];
        if (typeof value === 'string') {
          initialValues[key] = '';
        } else if (Array.isArray(value)) {
          initialValues[key] = '';
        }
      }
    });
    setFormValues(initialValues);
  }, [formData]);

  const handleInputChange = (key, value) => {
    setFormValues(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const renderField = (key, value) => {
    // Skip options fields
    if (key.endsWith('options')) return null;

    const optionsKey = key + 'options';
    const hasOptions = formData[optionsKey] && Array.isArray(formData[optionsKey]) && formData[optionsKey].length > 0;

    const baseInputStyle = {
      width: '100%',
      padding: '12px',
      border: '2px solid #e5e7eb',
      borderRadius: '8px',
      fontSize: '14px',
      transition: 'border-color 0.2s, box-shadow 0.2s',
      outline: 'none',
      boxSizing: 'border-box'
    };

    const labelStyle = {
      display: 'block',
      marginBottom: '8px',
      fontWeight: '600',
      color: '#374151',
      textTransform: 'capitalize',
      fontSize: '14px'
    };

    if (hasOptions) {
      // Render dropdown for fields with options
      return (
        <div key={key} style={{ marginBottom: '20px' }}>
          <label style={labelStyle}>
            {key.replace(/([A-Z])/g, ' $1').trim()}
          </label>
          <select
            value={formValues[key] || ''}
            onChange={(e) => handleInputChange(key, e.target.value)}
            style={{
              ...baseInputStyle,
              backgroundColor: 'white',
              cursor: 'pointer'
            }}
          >
            <option value="">Select {key}</option>
            {formData[optionsKey].map((option, index) => (
              <option key={index} value={option}>{option}</option>
            ))}
          </select>
        </div>
      );
    }

    if (typeof value === 'string') {
      const inputType = value === 'date' ? 'date' : 'text';
      return (
        <div key={key} style={{ marginBottom: '20px' }}>
          <label style={labelStyle}>
            {key.replace(/([A-Z])/g, ' $1').trim()}
          </label>
          <input
            type={inputType}
            value={formValues[key] || ''}
            onChange={(e) => handleInputChange(key, e.target.value)}
            placeholder={inputType === 'date' ? '' : `Enter ${key.toLowerCase()}`}
            style={baseInputStyle}
          />
        </div>
      );
    }

    if (Array.isArray(value)) {
      return (
        <div key={key} style={{ marginBottom: '20px' }}>
          <label style={labelStyle}>
            {key.replace(/([A-Z])/g, ' $1').trim()}
          </label>
          <input
            type="text"
            value={formValues[key] || ''}
            onChange={(e) => handleInputChange(key, e.target.value)}
            placeholder={`Enter ${key.toLowerCase()}`}
            style={baseInputStyle}
          />
        </div>
      );
    }

    return null;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitMessage("");

    try {
      // Submit the form data directly to the chatbot backend
      await onSubmit(formValues);
      setSubmitMessage("Submitted successfully!");
    } catch (error) {
      console.error('Form submission error:', error);
      setSubmitMessage("Submission failed. Please try again.");
    } finally {
      setIsSubmitting(false);
      setTimeout(() => {
        if (submitMessage.includes('success')) {
          onCancel(); // Close form on success
        }
      }, 1500);
    }
  };

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000,
      padding: '20px'
    }}>
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '24px',
        maxWidth: '500px',
        width: '100%',
        maxHeight: '80vh',
        overflowY: 'auto',
        boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
        border: '1px solid #e5e7eb'
      }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '20px',
          paddingBottom: '12px',
          borderBottom: '1px solid #e5e7eb'
        }}>
          <h3 style={{
            margin: 0,
            color: '#1f2937',
            fontSize: '18px',
            fontWeight: '700'
          }}>
            Please fill out the form
          </h3>
          <button
            onClick={onCancel}
            style={{
              background: 'none',
              border: 'none',
              fontSize: '24px',
              color: '#6b7280',
              cursor: 'pointer',
              padding: '4px',
              borderRadius: '4px',
              transition: 'color 0.2s'
            }}
            onMouseOver={(e) => e.target.style.color = '#374151'}
            onMouseOut={(e) => e.target.style.color = '#6b7280'}
          >
            Ã—
          </button>
        </div>

        {submitMessage && (
          <div style={{
            padding: '12px',
            borderRadius: '8px',
            marginBottom: '20px',
            backgroundColor: submitMessage.includes('success') ? '#d1fae5' : '#fee2e2',
            color: submitMessage.includes('success') ? '#065f46' : '#dc2626',
            border: `1px solid ${submitMessage.includes('success') ? '#a7f3d0' : '#fecaca'}`,
            textAlign: 'center',
            fontWeight: '500'
          }}>
            {submitMessage}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          {Object.keys(formData).map(key => renderField(key, formData[key]))}

          <div style={{ display: 'flex', gap: '12px', marginTop: '24px' }}>
            <button
              type="submit"
              disabled={isSubmitting}
              style={{
                flex: 1,
                padding: '12px 24px',
                backgroundColor: isSubmitting ? '#9ca3af' : '#4f46e5',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: '600',
                cursor: isSubmitting ? 'not-allowed' : 'pointer',
                transition: 'background-color 0.2s',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
              onMouseOver={(e) => {
                if (!isSubmitting) e.target.style.backgroundColor = '#4338ca';
              }}
              onMouseOut={(e) => {
                if (!isSubmitting) e.target.style.backgroundColor = '#4f46e5';
              }}
            >
              {isSubmitting ? 'Submitting...' : 'Submit'}
            </button>
            <button
              type="button"
              onClick={onCancel}
              style={{
                padding: '12px 24px',
                backgroundColor: 'white',
                color: '#6b7280',
                border: '2px solid #e5e7eb',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.2s'
              }}
              onMouseOver={(e) => {
                e.target.style.backgroundColor = '#f9fafb';
                e.target.style.borderColor = '#d1d5db';
              }}
              onMouseOut={(e) => {
                e.target.style.backgroundColor = 'white';
                e.target.style.borderColor = '#e5e7eb';
              }}
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true);
  const [activeForm, setActiveForm] = useState(null);

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([
          {
            id: Date.now(),
            text: "Unable to load messages. Please try again later.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || [],
        isJsonForm: isJsonFormData(item.message),
        formData: isJsonFormData(item.message) ? item.message : null
      }));

      setMessages(formattedMessages);
      setFormDisabled(true);
      setIsTyping(false);
    } catch {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([
        {
          id: Date.now(),
          text: "An error occurred while loading messages.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const checkEnableForm = (text) => {
    if (isJsonFormData(text)) return false; // Disable for JSON forms
    const lowerText = typeof text === 'string' ? text.toLowerCase() : '';
    return lowerText.includes("enter") || lowerText.includes("provide");
  };

 const sendMessageToBackend = async (messageData) => {
  try {
    setApiTimeout(() => {});
    
    // Format payload according to API requirements
    let payload;
    if (typeof messageData === 'string') {
      // For regular text messages - send as object with message property
      payload = { message: messageData };
    } else if (typeof messageData === 'object' && messageData !== null) {
      // For form data submissions - convert object to fields array
      const fieldsArray = Object.keys(messageData).map(key => ({
        fieldName: key,
        fieldValue: [String(messageData[key])]
      }));
      payload = { fields: fieldsArray };
    } else {
      // Fallback - send as object with message property
      payload = { message: String(messageData) };
    }
    
    console.log('Sending payload:', payload); // Debug log
    
    const res = await postMessage(payload);
    clearCurrentTimeout();

    const latest = res.data.chat_history?.slice(-1)[0];
    if (latest) {
      const botResponse = {
        id: Date.now(),
        text: latest.message || "",
        sender: "bot",
        time: getCurrentTime(),
        options: latest.options || [],
        isJsonForm: isJsonFormData(latest.message),
        formData: isJsonFormData(latest.message) ? latest.message : null
      };
      setMessages((prev) => [...prev, botResponse]);

      // Auto-open form if it's JSON data
      if (botResponse.isJsonForm) {
        setActiveForm(botResponse.formData);
        setFormDisabled(true);
      } else {
        setFormDisabled(!checkEnableForm(botResponse.text));
      }
    }
  } catch (error) {
    console.error('API Error:', error); // Debug log
    clearCurrentTimeout();
    setMessages((prev) => [
      ...prev,
      {
        id: Date.now(),
        text: "An error occurred. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      },
    ]);
  }
};
  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    setFormDisabled(true);

    await sendMessageToBackend(newMessage);
    setIsTyping(false);
  };

  const handleOptionClick = async (optionText) => {
    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();

    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setFormDisabled(true);
    setIsTyping(true);

    await sendMessageToBackend(cleanedOpt);
    setIsTyping(false);
  };

  const handleFormSubmit = async (formData) => {
    try {
      // Add user message showing form was submitted
      const userMsg = {
        id: Date.now(),
        text: "Form submitted",
        sender: "user",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, userMsg]);
      
      setIsTyping(true);
      setActiveForm(null);
      
      // Send form data to backend
      await sendMessageToBackend(formData);
      setIsTyping(false);
      setFormDisabled(false);
    } catch (error) {
      console.error('Form submission error:', error);
      setIsTyping(false);
      setFormDisabled(false);
    }
  };

  const handleFormCancel = () => {
    setActiveForm(null);
    setFormDisabled(false);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" ? (
                      item.isJsonForm ? (
                        <div className="message-content">
                          <div style={{ marginBottom: '8px' }}>
                            I need some information from you. Please fill out the form that appeared.
                          </div>
                          <div style={{
                            fontSize: '12px',
                            color: '#666',
                            fontStyle: 'italic'
                          }}>
                            Form with {Object.keys(item.formData).length} fields detected
                          </div>
                        </div>
                      ) : (
                        <div
                          className="message-content"
                          dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }}
                        />
                      )
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}
                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => {
                          const displayText = opt.replace(/^\d+\.\s*|^[a-zA-Z]\.\s*/, "").trim().toLowerCase();
                          const isPlainText =
                            displayText.includes("please select one by name") ||
                            displayText.includes("please select from the following options");

                          if (isPlainText) {
                            return (
                              <div key={i} className="plain-text-option">
                                {displayText}
                              </div>
                            );
                          }

                          return (
                            <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                              {displayText}
                            </button>
                          );
                        })}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}
            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          <form className="message-form" onSubmit={handleSendMessage}>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={formDisabled ? "Select a relevant option or wait for prompt..." : "Type a message..."}
              className="message-input"
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img className="logo" src={send} alt="Send" style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }} />
            </button>
          </form>
        </>
      )}

      {activeForm && (
        <DynamicForm
          formData={activeForm}
          onSubmit={handleFormSubmit}
          onCancel={handleFormCancel}
        />
      )}
    </div>
  );
};

export default Chatbot;
