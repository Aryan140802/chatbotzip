import React, { useState, useRef, useEffect } from 'react';
import ProfileIcon from './ProfileIcon';
import logo from '../assets/tcs.png';
import { postAnnouncement } from '../api/PostApi';
import { fetchPortalAlerts } from '../api/PostApi';

// CSS-only Alert Icon component
const AlertIcon = ({ size = 32 }) => (
  <span
    className="css-alert-icon"
    style={{
      width: size,
      height: size,
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: size * 0.7,
      background: 'radial-gradient(circle, #ffef5f 60%, #fa6e6e 80%, ##f71c1c 95%)',
      borderRadius: '50%',
      border: '2.5px solid #ffffff',
      boxShadow:'rgb(235 0 0 / 60%) 0px 0px 6px 2px, rgb(243 0 0) 0px 2px 10px;',
      color: 'rgb(191 60 60)',
      transition: 'box-shadow 0.15s',
      outline: 'none',
    }}
    aria-label="Alert"
    role="img"
  >
    <span
      className="css-alert-icon-exclaim"
      style={{
        fontWeight: 'bold',
        fontSize: size * 0.85,
        color: '#ffffff',
        textShadow: '0 0 4px #eb3636, 0 2px 2px #ffffff33',
        lineHeight: 1,
      }}
    >
      !
    </span>
  </span>
);

// Alert Modal Table Component
function AlertTable({ alerts }) {
  if (!Array.isArray(alerts) || alerts.length === 0) {
    return (
      <div style={{ color: '#bbb', textAlign: 'center', fontSize: 15, margin: '15px 0' }}>
        No alerts to show.
      </div>
    );
  }

  // Collect all unique keys for columns
  const keys = Array.from(
    alerts.reduce((set, alert) => {
      Object.keys(alert).forEach((k) => set.add(k));
      return set;
    }, new Set())
  );

  // Move `message` or `text` and `created_at` to start
  const sortedKeys = [
    ...(keys.includes('message') ? ['message'] : []),
    ...(keys.includes('text') ? ['text'] : []),
    ...keys.filter((k) => k !== 'message' && k !== 'text' && k !== 'created_at'),
    ...(keys.includes('created_at') ? ['created_at'] : []),
  ];

  return (
    <div style={{ overflowX: 'auto', maxHeight: 360 }}>
      <table
        style={{
          width: '100%',
          borderCollapse: 'collapse',
          background: 'rgba(30,20,55,0.95)',
          borderRadius: 8,
          overflow: 'hidden',
          fontSize: 15,
          color: '#fff',
          margin: 'auto',
          boxShadow: '0 2px 8px rgba(34,29,46,0.25)',
        }}
      >
        <thead>
          <tr>
            {sortedKeys.map((key) => (
              <th
                key={key}
                style={{
                  background: '#3a1a58',
                  color: '#ffef5f',
                  fontWeight: 600,
                  padding: '8px 10px',
                  borderBottom: '2px solid #4d70ff',
                  textAlign: 'left',
                  position: 'sticky',
                  top: 0,
                  zIndex: 2,
                  whiteSpace: 'nowrap',
                }}
              >
                {key.replace(/_/g, ' ').replace(/^\w/, (c) => c.toUpperCase())}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {alerts.map((alert, idx) => (
            <tr
              key={alert.id || idx}
              style={{
                background: idx % 2 === 0 ? '#2e1442' : '#26123d',
              }}
            >
              {sortedKeys.map((key) => (
                <td
                  key={key}
                  style={{
                    padding: '7px 10px',
                    borderBottom: '1px solid #1b1035',
                    maxWidth: 200,
                    wordBreak: 'break-word',
                    fontSize: key === 'created_at' ? 13 : 15,
                    opacity: key === 'created_at' ? 0.75 : 1,
                  }}
                >
                  {key === 'created_at' && alert[key]
                    ? new Date(alert[key]).toLocaleString()
                    : String(alert[key] ?? '')}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

// Alert Modal Component
function AlertModal({
  open,
  onClose,
  alertTab,
  setAlertTab,
  alerts,
  alertsLoading,
  alertsError,
  isAdmin,
}) {
  if (!open) return null;

  return (
    <div
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100vw',
        height: '100vh',
        background: 'rgba(0,0,0,0.47)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 99999,
        backdropFilter: 'blur(2px)',
      }}
      onClick={onClose}
      aria-modal="true"
      tabIndex={-1}
    >
      <div
        style={{
          background: 'linear-gradient(135deg, #1b1035 80%, #3a1a58 100%)',
          color: '#fff',
          padding: '36px 32px 24px',
          borderRadius: '13px',
          minWidth: '380px',
          maxWidth: '96vw',
          boxShadow: '0 10px 36px 2px #1b103577, 0 0 0 5px #4d70ff22',
          position: 'relative',
          border: '2px solid #4d70ff',
        }}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Close button */}
        <button
          aria-label="Close Alerts"
          onClick={onClose}
          style={{
            position: 'absolute',
            top: 14,
            right: 18,
            background: 'linear-gradient(120deg, #4d70ff 50%, #3a1a58 100%)',
            border: 'none',
            color: '#fff',
            fontSize: 24,
            cursor: 'pointer',
            borderRadius: '50%',
            width: 36,
            height: 36,
            boxShadow: '0 2px 8px #0004',
            transition: 'background 0.12s',
          }}
          type="button"
        >
          &times;
        </button>
        <h2
          style={{
            marginTop: 0,
            marginBottom: 16,
            fontWeight: 700,
            fontSize: 22,
            textAlign: 'center',
            letterSpacing: 0.5,
            color: '#ffffff',
            textShadow: '0 1px 8px #4d70ff22',
          }}
        >
          Alerts
        </h2>
        {/* Tabs */}
        <div style={{ display: 'flex', gap: 8, marginBottom: 18, justifyContent: 'center' }}>
          <button
            type="button"
            style={{
              background: alertTab === 'user' ? 'linear-gradient(90deg, #4d70ff, #6d85ff 80%)' : '#3a1a58',
              color: '#fff',
              border: alertTab === 'user' ? '2px solid #ffffff' : '2px solid transparent',
              borderRadius: '7px 7px 0 0',
              padding: '8px 22px',
              fontWeight: 600,
              fontSize: 15,
              cursor: 'pointer',
              outline: 'none',
              boxShadow: alertTab === 'user' ? '0 1px 12px #4d70ff66' : undefined,
              letterSpacing: 0.1,
              transition: 'background .2s, border .2s',
            }}
            onClick={() => setAlertTab('user')}
            aria-selected={alertTab === 'user'}
          >
            User Alerts
          </button>
          {isAdmin && (
            <button
              type="button"
              style={{
                background: alertTab === 'admin' ? 'linear-gradient(90deg, #4d70ff, #6d85ff 80%)' : '#3a1a58',
                color: '#fff',
                border: alertTab === 'admin' ? '2px solid #ffffff' : '2px solid transparent',
                borderRadius: '7px 7px 0 0',
                padding: '8px 22px',
                fontWeight: 600,
                fontSize: 15,
                cursor: 'pointer',
                outline: 'none',
                boxShadow: alertTab === 'admin' ? '0 1px 12px #4d70ff66' : undefined,
                letterSpacing: 0.1,
                transition: 'background .2s, border .2s',
              }}
              onClick={() => setAlertTab('admin')}
              aria-selected={alertTab === 'admin'}
            >
              Admin Alerts
            </button>
          )}
        </div>
        {/* Alert Table/List */}
        <div style={{ minHeight: 100, maxHeight: 410, marginBottom: 6 }}>
          {alertsLoading ? (
            <div style={{ textAlign: 'center', margin: '30px 0', color: '#bbb', fontSize: 16 }}>
              Loading...
            </div>
          ) : alertsError ? (
            <div style={{ color: '#ff7f7f', textAlign: 'center', fontWeight: 500 }}>
              {alertsError}
            </div>
          ) : (
            <AlertTable alerts={alerts[alertTab]} />
          )}
        </div>
      </div>
    </div>
  );
}

export default function Header({
  username,
  onLogout,
  showProfileIcon = true,
  isAdmin = false,
 hideMarqueeAndAlertIcon = false,
}) {
  const [menuOpen, setMenuOpen] = useState(false);
  const [env, setEnv] = useState('');
  const [setup, setSetup] = useState('');
  const [showAnnouncementModal, setShowAnnouncementModal] = useState(false);
  const [announcement, setAnnouncement] = useState('');
  const [announcementTime, setAnnouncementTime] = useState('');
  const [submitting, setSubmitting] = useState(false);
  const [announcementMsg, setAnnouncementMsg] = useState('');
  const dropdownRef = useRef(null);

  // Alert Modal state
  const [showAlertModal, setShowAlertModal] = useState(false);
  const [alertTab, setAlertTab] = useState('user');
  const [alerts, setAlerts] = useState({ user: [], admin: [] });
  const [alertsLoading, setAlertsLoading] = useState(false);
  const [alertsError, setAlertsError] = useState('');

  // Fetch environment info
  useEffect(() => {
    const fetchEnvAndSetup = async () => {
      try {
        const response = await fetch('https://10.191.171.12:5443/PyPortal/env');
        const data = await response.json();
        setEnv(data.Environment);
        setSetup(data.PRDRSetup);
      } catch (error) {
        console.error('Failed to fetch environment:', error);
        setEnv('');
      }
    };
    fetchEnvAndSetup();
  }, []);

  // Close menu on outside click
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {
        setMenuOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () =>
      document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const getMarqueeText = () => {
    if (env === 'PR' && setup === 'YES') return 'PR DR SETUP is live!!';
    if (env === 'DR' && setup === 'YES') return 'PR DR SETUP is live!!';
    if (env === 'PR') return 'PR is live now!! ';
    if (env === 'DR') return 'DR is live now!! ';
    return 'Welcome to EIS INFRA ';
  };

  // Announcement Modal handlers
  const handleOpenAnnouncement = () => {
    setAnnouncement('');
    setAnnouncementTime('');
    setAnnouncementMsg('');
    setShowAnnouncementModal(true);
    setMenuOpen(false);
  };

  const handleCloseAnnouncement = () => {
    setShowAnnouncementModal(false);
    setAnnouncement('');
    setAnnouncementTime('');
    setAnnouncementMsg('');
  };

  const handleSubmitAnnouncement = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    setAnnouncementMsg('');
    if (!announcement.trim()) {
      setAnnouncementMsg('Announcement cannot be empty.');
      setSubmitting(false);
      return;
    }
    try {
      const res = await postAnnouncement(announcement, announcementTime);
      // Handle status: "pending"
      if (res && res.status === 'pending') {
        setAnnouncementMsg('Your announcement is pending approval. Please contact admin for approval.');
        setTimeout(() => {
          handleCloseAnnouncement();
        }, 2000);
      } else {
        setAnnouncementMsg('Announcement posted successfully!');
        setTimeout(() => {
          handleCloseAnnouncement();
        }, 1200);
      }
    } catch (err) {
      setAnnouncementMsg('Error posting announcement. Please try again.');
    }
    setSubmitting(false);
  };

  // --- ALERT MODAL HANDLERS ---
  const handleOpenAlertModal = async () => {
    setShowAlertModal(true);
    setAlertsLoading(true);
    setAlertsError('');
    setAlertTab('user');
    try {
      // Fetch user alerts (always present)
      const userRes = await fetchPortalAlerts();
      let userAlerts = userRes.data;
      if (!Array.isArray(userAlerts)) userAlerts = userAlerts?.totalAlerts || [];
      // Optionally: fetch admin alerts if isAdmin
      let adminAlerts = [];
      if (isAdmin) {
        // Placeholder for admin alerts API when ready
        // const adminRes = await fetch('http://10.191.171.12:5443/EISHome/getPortalAdminAlerts/', { ... });
        // adminAlerts = await adminRes.json();
        adminAlerts = []; // For now
      }
      setAlerts({ user: userAlerts, admin: adminAlerts });
    } catch (error) {
      setAlertsError('Could not fetch alerts. Please try again.');
      setAlerts({ user: [], admin: [] });
    }
    setAlertsLoading(false);
  };

  const handleCloseAlertModal = () => {
    setShowAlertModal(false);
    setAlerts({ user: [], admin: [] });
    setAlertsError('');
    setAlertsLoading(false);
    setAlertTab('user');
  };

  return (
    <div
      className="container"
      style={{
        paddingTop: '19px',
        paddingBottom: '19px',
        position: 'relative',
        background: 'linear-gradient(135deg, #667eea, #764ba2)',
        backgroundImage: 'linear-gradient(180deg, #1b1035, #2e1442, #3a1a58)',
        color: '#ffffff',
        overflow: 'visible',
      }}
    >
      {/* Marquee Background */}
      {!hideMarqueeAndAlertIcon &&(
      <div
        style={{
          position: 'absolute',
          width: '100%',
          top: 0,
          left: 0,
          right: 0,
          height: '100%',
          display: 'flex',
          alignItems: 'flex-end',
          zIndex: 1,
        }}
      >
        <marquee
          behavior="scroll"
          direction="left"
          scrollAmount={12}
          style={{
            backgroundColor: 'transparent',
            fontWeight: 'bold',
            opacity: 0.4,
          }}
        >
          {Array(1000)
            .fill(getMarqueeText())
            .map((text, index) => (
              <span key={index} style={{ marginRight: '150px' }}>
                {text}
              </span>
            ))}
        </marquee>
      </div>
  )}

      {/* Header Content */}
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          width: '100%',
          position: 'relative',
          zIndex: 3,
          padding: '0 20px',
        }}
      >
        {/* Logo */}
        <div style={{ display: 'flex', alignItems: 'center' }}>
          <img
            className="logo"
            src={logo}
            alt="TCS Company Logo"
            style={{ height: '40px', marginRight: '20px' }}
          />
        </div>

        {/* Title */}
        <h1 style={{ margin: 0, fontSize: 'clamp(1.5rem, 2vw, 2.5rem)' }}>
          EIS INFRA HOME
        </h1>

        {/* Profile, Alert Button, Dropdown */}
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            position: 'relative',
            gap: '14px',
            minWidth: 0,
          }}
          ref={dropdownRef}
        >
          {/* Alert Button next to profile */}
           {!hideMarqueeAndAlertIcon &&(
          <button
            className="alert-icon-btn"
            aria-label="Show Alerts"
            style={{
              background: '#f50000',
              border: 'none',
              cursor: 'pointer',
              padding: 0,
              marginLeft: 4,
              marginRight: 0,
              outline: 'none',
              display: 'inline-flex',
              alignItems: 'center',
              boxShadow: '0 0 0 3px #ffef5f55, 0 2px 8px #4d70ff44',
              borderRadius: '50%',
              transition: 'box-shadow .18s',
              position: 'relative',
              zIndex: 1,
            }}
            onClick={handleOpenAlertModal}
            type="button"
            tabIndex={0}
          >
            <AlertIcon size={32} />
          </button>
        )}
          {/* Profile & Dropdown */}
          {showProfileIcon && username && (
            <>
              <div
                onClick={() => setMenuOpen(!menuOpen)}
                style={{ cursor: 'pointer', marginLeft: '10px' }}
                aria-label="Profile menu toggle"
              >
                <ProfileIcon sender="user" />
              </div>
              {menuOpen && (
                <div
                  style={{
                    position: 'absolute',
                    top: '50px',
                    right: 0,
                    background: '#1e1e1e',
                    color: '#fff',
                    boxShadow: '0 4px 8px rgba(0,0,0,0.2)',
                    borderRadius: '6px',
                    padding: '10px',
                    zIndex: 9999,
                    minWidth: '150px',
                  }}
                  aria-label="Dropdown menu"
                >
                  <div
                    style={{
                      padding: '8px 12px',
                      cursor: 'pointer',
                      borderBottom: '1px solid #333',
                    }}
                    onClick={handleOpenAnnouncement}
                    aria-label="Make an announcement"
                  >
                    Make an Announcement
                  </div>
                  <div
                    style={{ padding: '8px 12px', cursor: 'pointer' }}
                    onClick={onLogout}
                    aria-label="Logout button"
                  >
                    Logout
                  </div>
                </div>
              )}
            </>
          )}
        </div>
      </div>

      {/* Announcement Modal */}
      {showAnnouncementModal && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100vw',
            height: '100vh',
            background: 'rgba(0,0,0,0.45)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 99999,
          }}
        >
          <form
            onSubmit={handleSubmitAnnouncement}
            style={{
              background: '#221d2e',
              color: '#fff',
              padding: '30px 24px 18px',
              borderRadius: '10px',
              width: '350px',
              boxShadow: '0 6px 24px rgba(0,0,0,0.20)',
            }}
          >
            <h2
              style={{
                marginTop: 0,
                marginBottom: 16,
                fontWeight: 600,
                fontSize: 20,
              }}
            >
              Make an Announcement
            </h2>
            <label style={{ display: 'block', marginBottom: 8 }}>
              Announcement:
              <textarea
                value={announcement}
                onChange={(e) => setAnnouncement(e.target.value)}
                rows={3}
                required
                style={{
                  width: '100%',
                  marginTop: 4,
                  borderRadius: 4,
                  padding: 6,
                  fontSize: 15,
                  resize: 'vertical',
                  marginBottom: 14,
                }}
                placeholder="Enter announcement..."
              />
            </label>
            <label style={{ display: 'block', marginBottom: 12 }}>
              Duration (hours):
              <input
                type="number"
                value={announcementTime}
                min={1}
                max={240}
                step={1}
                onChange={(e) => setAnnouncementTime(e.target.value)}
                placeholder="(Default 24 hours)"
                style={{
                  width: '100%',
                  borderRadius: 3,
                  padding: 6,
                  fontSize: 15,
                  marginTop: 4,
                }}
              />
            </label>
            <div style={{ display: 'flex', gap: 10, marginTop: 10 }}>
              <button
                type="submit"
                disabled={submitting}
                style={{
                  background: '#4d70ff',
                  color: '#fff',
                  border: 'none',
                  borderRadius: 4,
                  padding: '7px 18px',
                  fontSize: 15,
                  cursor: submitting ? 'not-allowed' : 'pointer',
                }}
              >
                {submitting ? 'Submitting...' : 'Submit'}
              </button>
              <button
                type="button"
                onClick={handleCloseAnnouncement}
                style={{
                  background: '#3a1a58',
                  color: '#fff',
                  border: 'none',
                  borderRadius: 4,
                  padding: '7px 18px',
                  fontSize: 15,
                  cursor: 'pointer',
                }}
                disabled={submitting}
              >
                Cancel
              </button>
            </div>
            {announcementMsg && (
              <div
                style={{
                  marginTop: 13,
                  color: announcementMsg.includes('success')
                    ? '#7fff7f'
                    : '#ff7f7f',
                  fontWeight: 500,
                }}
              >
                {announcementMsg}
              </div>
            )}
          </form>
        </div>
      )}

      {/* Alert Modal */}
      <AlertModal
        open={showAlertModal}
        onClose={handleCloseAlertModal}
        alertTab={alertTab}
        setAlertTab={setAlertTab}
        alerts={alerts}
        alertsLoading={alertsLoading}
        alertsError={alertsError}
        isAdmin={isAdmin}
      />
    </div>
  );
}
