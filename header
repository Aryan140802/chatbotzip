import React, { useState, useEffect, useRef } from 'react';
import './Header.css';

// CSS-only Alert Icon component
const AlertIcon = ({ size = 32 }) => (
  <span
    className="css-alert-icon"
    style={{ width: size, height: size }}
    aria-label="Alert"
    role="img"
  >
    <span className="css-alert-icon-exclaim">!</span>
  </span>
);

const Header = ({
  darkMode,
  setDarkMode,
  username,
  onLogout,
  userLevel,
}) => {
  // State for environment info
  const [env, setEnv] = useState('');
  const [envError, setEnvError] = useState(false);

  // Alert Modal state
  const [showAlertModal, setShowAlertModal] = useState(false);
  const [alertTab, setAlertTab] = useState('user');
  const [alerts, setAlerts] = useState({ user: [], admin: [] });
  const [alertsLoading, setAlertsLoading] = useState(false);
  const [alertsError, setAlertsError] = useState('');

  // Profile dropdown state (optional)
  const [showProfile, setShowProfile] = useState(false);
  const profileRef = useRef();

  // Fetch environment info (try https, fallback to http)
  useEffect(() => {
    const fetchEnv = async () => {
      try {
        const res = await fetch('https://10.191.171.12:5443/PyPortal/env');
        const data = await res.json();
        setEnv(data.Environment || 'Unknown');
        setEnvError(false);
      } catch (e) {
        try {
          const res = await fetch('http://10.191.171.12:5443/PyPortal/env');
          const data = await res.json();
          setEnv(data.Environment || 'Unknown');
          setEnvError(false);
        } catch {
          setEnv('Unknown');
          setEnvError(true);
        }
      }
    };
    fetchEnv();
  }, []);

  // Profile menu close on outside click
  useEffect(() => {
    const handleClick = (e) => {
      if (profileRef.current && !profileRef.current.contains(e.target)) {
        setShowProfile(false);
      }
    };
    document.addEventListener('mousedown', handleClick);
    return () => document.removeEventListener('mousedown', handleClick);
  }, []);

  // ---- ALERT MODAL HANDLING ----
  const handleOpenAlertModal = async () => {
    setShowAlertModal(true);
    setAlertsLoading(true);
    setAlertsError('');
    setAlertTab('user');
    try {
      // User alerts
      const userRes = await fetch('http://10.191.171.12:5443/EISHome/getPortalAlerts/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      let userAlerts = await userRes.json();
      if (!Array.isArray(userAlerts)) userAlerts = userAlerts?.alerts || [];
      // Admin alerts (if admin)
      let adminAlerts = [];
      if (userLevel === 'admin') {
        // Placeholder for future admin alerts API
        adminAlerts = [];
      }
      setAlerts({ user: userAlerts, admin: adminAlerts });
    } catch (error) {
      setAlertsError('Could not fetch alerts. Please try again.');
      setAlerts({ user: [], admin: [] });
    }
    setAlertsLoading(false);
  };

  const handleCloseAlertModal = () => {
    setShowAlertModal(false);
    setAlerts({ user: [], admin: [] });
    setAlertsError('');
    setAlertsLoading(false);
    setAlertTab('user');
  };

  return (
    <header className="header-bar">
      <div className="header-left">
        <span className="header-logo">EIS INFRA HOME</span>
        <span className="header-env">
          <b>Environment:</b> {env}
          {envError && <span style={{ color: 'red', marginLeft: 8 }}>(Failed to fetch)</span>}
        </span>
      </div>
      <div className="header-actions">
        {/* Alert Button */}
        <button
          className="alert-icon-btn"
          aria-label="Show Alerts"
          style={{
            marginRight: "10px",
            background: "transparent",
            border: "none",
            cursor: "pointer",
            padding: 0
          }}
          onClick={handleOpenAlertModal}
        >
          <AlertIcon size={32} />
        </button>
        {/* Profile Dropdown */}
        <div className="profile-dropdown" ref={profileRef}>
          <button
            onClick={() => setShowProfile((p) => !p)}
            className="profile-btn"
            aria-label="Profile menu"
          >
            {username ? username : "User"}
          </button>
          {showProfile && (
            <ul className="profile-menu">
              <li onClick={onLogout}>Logout</li>
            </ul>
          )}
        </div>
      </div>

      {/* ALERT MODAL */}
      {showAlertModal && (
        <div className="alert-modal-overlay">
          <div className="alert-modal">
            <button
              className="alert-modal-close"
              onClick={handleCloseAlertModal}
              aria-label="Close alerts"
              title="Close"
            >
              Ã—
            </button>
            <div className="alert-modal-header">
              <AlertIcon size={28} />
              <span style={{ fontSize: 19, fontWeight: 600, marginLeft: 10 }}>Portal Alerts</span>
            </div>
            <div className="alert-modal-tabs">
              <div
                className={alertTab === 'user' ? 'active' : ''}
                onClick={() => setAlertTab('user')}
              >
                User
              </div>
              {userLevel === 'admin' && (
                <div
                  className={alertTab === 'admin' ? 'active' : ''}
                  onClick={() => setAlertTab('admin')}
                >
                  Admin
                </div>
              )}
            </div>
            <div className="alert-modal-list">
              {alertsLoading ? (
                <div className="alert-modal-status">Loading alerts...</div>
              ) : alertsError ? (
                <div className="alert-modal-status" style={{ color: '#ff7f7f' }}>{alertsError}</div>
              ) : (
                <ul>
                  {(alertTab === 'user' ? alerts.user : alerts.admin).length === 0 ? (
                    <li className="alert-modal-empty">No alerts found.</li>
                  ) : (
                    (alertTab === 'user' ? alerts.user : alerts.admin).map((alert, idx) => (
                      <li key={idx} className="alert-modal-item">
                        {typeof alert === 'string'
                          ? alert
                          : (alert.message || JSON.stringify(alert))}
                      </li>
                    ))
                  )}
                </ul>
              )}
            </div>
          </div>
        </div>
      )}
    </header>
  );
};

export default Header;
