import React, { useEffect, useState } from 'react';
import { Menu as MenuIcon, ChevronLeft, ChevronRight, Star } from 'lucide-react';
import { cardLinks } from '../links';
import '../styles/Menu.css';

const Sidebar = ({ darkMode, isSidebarOpen, setIsSidebarOpen }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [favorites, setFavorites] = useState([]);

  const toggleSidebar = () => setIsSidebarOpen(prev => !prev);

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth > 768) {
        setIsSidebarOpen(true);
      } else {
        setIsSidebarOpen(false);
      }
    };

    window.addEventListener('resize', handleResize);
    handleResize(); // Initial call
    return () => window.removeEventListener('resize', handleResize);
  }, [setIsSidebarOpen]);

  const toggleFavorite = (url) => {
    setFavorites((prev) =>
      prev.includes(url)
        ? prev.filter((fav) => fav !== url)
        : [...prev, url]
    );
  };

  const filteredLinks = cardLinks
    .filter((link) => link.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      const aFav = favorites.includes(a.url);
      const bFav = favorites.includes(b.url);
      return aFav === bFav ? 0 : aFav ? -1 : 1;
    });

  return (
    <>
      {!isSidebarOpen && (
        <button className="sidebar-toggle" onClick={toggleSidebar}>
          <MenuIcon size={24} />
        </button>
      )}

      <div className={`sidebar ${isSidebarOpen ? 'open' : 'collapsed'}`}>
        <div className="sidebar-header">
          {isSidebarOpen && <h2 className="sidebar-title">Quick Access</h2>}
          <button
            className="collapse-btn"
            onClick={toggleSidebar}
            aria-label={isSidebarOpen ? 'Collapse sidebar' : 'Expand sidebar'}
          >
            {isSidebarOpen ? <ChevronLeft size={20} /> : <ChevronRight size={20} />}
          </button>
        </div>

        {isSidebarOpen && (
          <div className="sidebar-search">
            <input
              type="text"
              placeholder="Search links..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          </div>
        )}

        <div className="sidebar-content">
          <div className="sidebar-section">
            {filteredLinks.map((link, index) => {
              const isFavorited = favorites.includes(link.url);
              return (
                <div key={index} className="link-card">
                  <span
                    className="star-icon"
                    onClick={() => toggleFavorite(link.url)}
                    title={isFavorited ? 'Unstar' : 'Star'}
                  >
                    {isFavorited ? (
                      <Star fill="#facc15" color="#facc15" size={16} />
                    ) : (
                      <Star color="#fff" size={16} />
                    )}
                  </span>
                  <a
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="link-anchor"
                  >
                    {isSidebarOpen ? (
                      <span>{link.name}</span>
                    ) : (

                      <img
                        src={link.icon}
                        alt={link.name}
                        title={link.name}
                        className="link-icon"
                      />

                    )}
                  </a>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </>
  );
};

export default Sidebar;
