import React, { useEffect, useState } from 'react';
import { Menu as MenuIcon, ChevronLeft, ChevronRight, Star } from 'lucide-react';
import { cardLinks } from '../links';
import '../styles/Menu.css';

const Sidebar = ({ darkMode, isSidebarOpen, setIsSidebarOpen }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [favorites, setFavorites] = useState([]);
  const [userId, setUserId] = useState(null); // State to store userId

  const toggleSidebar = () => setIsSidebarOpen(prev => !prev);

  // Fetch userId on mount with POST request
  useEffect(() => {
    const fetchUserId = async () => {
      try {
        const response = await fetch('https://10.191.171.12:5443/PyPortal/EISHomee/newLogin/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          // Add any required body data for the login request
          // body: JSON.stringify({ /* your login data */ }),
        });

        if (response.ok) {
          const data = await response.json();
          setUserId(data.user || data.userId); // Handle different response formats
          console.log('User ID fetched:', data.user || data.userId);
        } else {
          console.error('Failed to fetch userId:', response.status);
        }
      } catch (error) {
        console.error('Error fetching userId:', error);
      }
    };

    fetchUserId();
  }, []);

  // Fetch favorites for the user on mount
  useEffect(() => {
    if (!userId) return;

    const fetchFavorites = async () => {
      try {
        const res = await fetch(`/api/favorites?userId=${userId}`);
        const data = await res.json();
        setFavorites(data.favorites || []); // Array of favorite names
      } catch (err) {
        console.error('Failed to load favorites:', err);
      }
    };

    fetchFavorites();
  }, [userId]); // Only fetch favorites if userId is available

  // Update backend when favorites change - renamed to postFavourite
  const postFavourite = async (updatedFavorites) => {
    if (!userId) {
      console.error('No userId available to post favorites');
      return;
    }

    try {
      const response = await fetch('/api/favorites', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userId: userId, 
          favorites: updatedFavorites 
        }),
      });

      if (response.ok) {
        console.log('Favorites updated successfully');
      } else {
        console.error('Failed to update favorites:', response.status);
      }
    } catch (error) {
      console.error('Failed to update favorites:', error);
    }
  };

  // Toggle favorite by name
  const toggleFavorite = (name) => {
    setFavorites((prev) => {
      const updated = prev.includes(name)
        ? prev.filter((fav) => fav !== name)
        : [...prev, name];

      // Call postFavourite with the userId
      postFavourite(updated);
      return updated;
    });
  };

  // Filter and sort links
  const filteredLinks = cardLinks
    .filter((link) => link.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      const aFav = favorites.includes(a.name);
      const bFav = favorites.includes(b.name);
      return aFav === bFav ? 0 : aFav ? -1 : 1;
    });

  return (
    <>
      {!isSidebarOpen && (
        <button className="sidebar-toggle" onClick={toggleSidebar}>
          <MenuIcon size={24} />
        </button>
      )}

      <div className={`sidebar ${isSidebarOpen ? 'open' : 'collapsed'}`}>
        <div className="sidebar-header">
          {isSidebarOpen && <h2 className="sidebar-title">Quick Access</h2>}
          <button
            className="collapse-btn"
            onClick={toggleSidebar}
            aria-label={isSidebarOpen ? 'Collapse sidebar' : 'Expand sidebar'}
          >
            {isSidebarOpen ? <ChevronLeft size={20} /> : <ChevronRight size={20} />}
          </button>
        </div>

        {isSidebarOpen && (
          <div className="sidebar-search">
            <input
              type="text"
              placeholder="Search links..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          </div>
        )}

        <div className="sidebar-content">
          <div className="sidebar-section">
            {filteredLinks.map((link, index) => {
              const isFavorited = favorites.includes(link.name);
              return (
                <div key={index} className="link-card">
                  <span
                    className="star-icon"
                    onClick={() => toggleFavorite(link.name)}
                    title={isFavorited ? 'Unstar' : 'Star'}
                  >
                    {isFavorited ? (
                      <Star fill="#facc15" color="#facc15" size={16} />
                    ) : (
                      <Star color="#fff" size={16} />
                    )}
                  </span>
                  <a
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="link-anchor"
                  >
                    {isSidebarOpen ? (
                      <span>{link.name}</span>
                    ) : (
                      <img
                        src={link.icon}
                        alt={link.name}
                        title={link.name}
                        className="link-icon"
                      />
                    )}
                  </a>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </>
  );
};

export default Sidebar;
