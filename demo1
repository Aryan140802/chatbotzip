// ProtectedLink.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';

const ProtectedLink = ({ url, children, isLoggedIn }) => {
  const navigate = useNavigate();

  const handleClick = (e) => {
    if (!isLoggedIn) {
      e.preventDefault();
      // Store the target URL in session storage
      sessionStorage.setItem('redirectUrl', url);
      // Redirect to login page
      navigate('/login');
    }
    // If logged in, the normal link behavior will proceed
  };

  return (
    <a href={url} onClick={handleClick} target="_blank" rel="noopener noreferrer">
      {children}
    </a>
  );
};

export default ProtectedLink;





// Login.jsx (updated)
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles/Login.css';
import Header from './Header';
import Footer from './Footer';
import { postLogin } from "../api/loginApi";

function Login({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [darkMode, setDarkMode] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    // Check if user is already logged in
    const storedUsername = localStorage.getItem('username');
    if (storedUsername) {
      navigate('/');
    }
  }, [navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await postLogin(username, password);
      console.log('Login response:', response);

      if (response.data.status === 302) {
        // Call parent component's onLogin function with username
        onLogin(response.data.username);
        
        // Check for redirect URL
        const redirectUrl = sessionStorage.getItem('redirectUrl');
        if (redirectUrl) {
          sessionStorage.removeItem('redirectUrl');
          window.open(redirectUrl, '_blank');
        }
        
        navigate('/');
      } else {
        setError('Invalid credentials');
      }
    } catch (error) {
      console.error('Login error:', error);
      if (error.response && error.response.data) {
        setError(error.response.data.Response || 'Login failed');
      } else {
        setError('Unable to connect to server');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={darkMode ? 'dark-mode' : ''}>
      <Header darkMode={darkMode} setDarkMode={setDarkMode} />
      <div className="login-container">
        <div className="bubble"></div>
        <div className="bubble"></div>
        <form className="login-form" onSubmit={handleSubmit}>
          <h2>Login</h2>
          {error && <div className="error-message">{error}</div>}
          <input
            type="text"
            placeholder="Username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <button type="submit" disabled={loading}>
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
      </div>
      <Footer />
    </div>
  );
}

export default Login;



// App.js (updated with routing)
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Header from './components/Header.jsx';
import Footer from './components/Footer';
import Menu from './components/Menu';
import Dashboard from './components/Dashboard';
import Chatbot from './components/ChatBot';
import Login from './components/Login';
import './App.css';

function App() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [chatbotMinimized, setChatbotMinimized] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [username, setUsername] = useState('');

  // Check for existing login session on app load
  useEffect(() => {
    const storedUsername = localStorage.getItem('username');
    const storedLoginTime = localStorage.getItem('loginTime');
    if (storedUsername && storedLoginTime) {
      // Check if session has expired
      const loginTime = parseInt(storedLoginTime, 10);
      if (loginTime && Date.now() - loginTime < 60 * 60 * 1000) {
        setUsername(storedUsername);
        setIsLoggedIn(true);
      } else {
        handleLogout();
      }
    }
  }, []);

  const handleLogin = (user) => {
    const now = Date.now();
    setUsername(user);
    setIsLoggedIn(true);
    localStorage.setItem('username', user);
    localStorage.setItem('loginTime', now.toString());
    sessionStorage.setItem('loginTime', now.toString());
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setUsername('');
    localStorage.removeItem('username');
    localStorage.removeItem('loginTime');
    sessionStorage.clear();
  };

  // Auto logout after 1 hour
  useEffect(() => {
    if (!isLoggedIn) return;

    const checkAutoLogout = () => {
      const loginTime = parseInt(localStorage.getItem('loginTime'), 10);
      if (loginTime && Date.now() - loginTime > 60 * 60 * 1000) {
        handleLogout();
      }
    };

    const interval = setInterval(checkAutoLogout, 60 * 1000);
    checkAutoLogout();

    return () => clearInterval(interval);
  }, [isLoggedIn]);

  return (
    <Router>
      <div>
        <Header
          darkMode={darkMode}
          setDarkMode={setDarkMode}
          username={username}
          onLogout={handleLogout}
        />
        {!chatbotMinimized && <div className="app-background" />}
        
        <Routes>
          <Route path="/login" element={
            isLoggedIn ? <Navigate to="/" /> : <Login onLogin={handleLogin} />
          } />
          
          <Route path="/" element={
            isLoggedIn ? (
              <div className={`main ${isSidebarOpen ? "sidebar-open" : "sidebar-collapsed"}`}>
                <Menu
                  isSidebarOpen={isSidebarOpen}
                  setIsSidebarOpen={setIsSidebarOpen}
                  isLoggedIn={isLoggedIn}
                />
                <Dashboard isSidebarOpen={isSidebarOpen} />
                <Chatbot setChatbotMinimized={setChatbotMinimized} username={username} />
              </div>
            ) : (
              <Navigate to="/login" />
            )
          } />
        </Routes>
        
        <Footer />
      </div>
    </Router>
  );
}

export default App;


// Sidebar.jsx (updated)
import React, { useEffect, useState } from 'react';
import { Menu as MenuIcon, ChevronLeft, ChevronRight, Star } from 'lucide-react';
import { cardLinks } from './CardLinks';
import '../styles/Menu.css';
import ProtectedLink from './ProtectedLink';

const Sidebar = ({ darkMode, isSidebarOpen, setIsSidebarOpen, isLoggedIn }) => {
  // ... (keep all existing state and effects)

  return (
    <>
      {/* ... (keep existing toggle button and sidebar header) */}
      
      <div className="sidebar-content">
        <div className="sidebar-section">
          {filteredLinks.map((link, index) => {
            const isFavorited = favorites.includes(link.name);
            return (
              <div key={index} className="link-card">
                <span
                  className="star-icon"
                  onClick={() => toggleFavorite(link.name)}
                  title={isFavorited ? 'Unstar' : 'Star'}
                >
                  {isFavorited ? (
                    <Star fill="#facc15" color="#facc15" size={16} />
                  ) : (
                    <Star color="#fff" size={16} />
                  )}
                </span>
                <ProtectedLink url={link.url} isLoggedIn={isLoggedIn}>
                  {isSidebarOpen ? (
                    <span className="link-anchor">{link.name}</span>
                  ) : (
                    <img
                      src={link.icon}
                      alt={link.name}
                      title={link.name}
                      className="link-icon"
                    />
                  )}
                </ProtectedLink>
              </div>
            );
          })}
        </div>
      </div>
    </>
  );
};

export default Sidebar;



