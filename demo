
import React, { useState } from 'react';
import '../styles/Login.css';
import Header from './Header';
import Footer from './Footer';
import { postLogin } from "../api/loginApi";

function Login({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [darkMode, setDarkMode] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');


    try {
      const response = await postLogin(username, password);
      console.log('Login response:', response);

      // Check the response status from your Django backen
      if (response.data.status === 302) {
        // Call parent component's onLogin function with username
        onLogin(response.data.username);
      } else {
        setError('Invalid credentials');
      }
    } catch (error) {
      console.error('Login error:', error);
      if (error.response && error.response.data) {
        setError(error.response.data.Response || 'Login failed');
      } else {
        setError('Unable to connect to server');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={darkMode ? 'dark-mode' : ''}>
      <Header darkMode={darkMode} setDarkMode={setDarkMode} />
      <div className="login-container">
        <div className="bubble"></div>
        <div className="bubble"></div>
        <form className="login-form" onSubmit={handleSubmit}>
          <h2>Login</h2>
          {error && <div className="error-message">{error}</div>}
          <input
            type="text"
            placeholder="Username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <button type="submit" disabled={loading}>
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
      </div>
      <Footer />
    </div>
  );
}

export default Login;


export const cardLinks = [
  { name: 'Daily Checklist', url: 'https://10.191.171.12:5443/EIS/Checklist/' , icon: '../src/assets/accountability.png'},
  { name: 'Compliance Monitoring', url: 'https://10.191.171.12:5443/EIS/Compliance/'  ,icon:'../src/assets/accountability.png' },
  { name: 'Outlook Sign-in', url: 'https://portal.office.com/'  ,icon:'../src/assets/accountability.png'},
  { name: 'MQ Monitoring Portal (PR)', url: 'https://10.191.171.12:5443/EIS/MQ_Monitoring/' ,icon:'../src/assets/accountability.png'},
  { name: 'MQ Monitoring Portal (DR)', url: 'https://10.191.171.12:5443/EIS/MQ_Monitoring_Dr/'  ,icon:'../src/assets/accountability.png'},
  { name: 'Centralized Dynatrace', url: 'https://10.189.37.183/' ,icon:'../src/assets/accountability.png'},
  { name: 'EIS Monitoring (PR)', url: 'https://10.191.171.12:5443/EIS/port_monitoring/' ,icon:'../src/assets/accountability.png' },
  { name: 'FAR', url: 'https://nspm.sbi/'  ,icon:'../src/assets/accountability.png'},
  { name: 'RFC', url: 'https://coportal.sbi.co.in:5443/EISON/index.php'  ,icon:'../src/assets/accountability.png'},
  { name: 'Shared Folder', url: 'https://sbionline.sharepoint.com/sites/EIS_TCS_SUPPORT/SOP/Forms/AllItems.aspx'  ,icon:'../src/assets/accountability.png'},
  { name: 'Ticketing Tools', url: 'https://10.191.171.12:5443/EIS/TMT/'  ,icon:'../src/assets/accountability.png'},
  { name: 'PIMS', url: 'https://pims.onlinesbi.com/'  ,icon:'../src/assets/accountability.png'},
  { name: 'Ultimatix', url: 'https://www.ultimatix.net'  ,icon:'../src/assets/accountability.png'},
  { name: 'TFS', url: 'https://eistfsserver.sbi.co.in/tis/' ,icon:'../src/assets/accountability.png' },
  { name: 'Onboarding Portal', url: 'https://10.191.171.12:5443/EISInfra/EIS/EIS/'  ,icon:'../src/assets/accountability.png'},
  { name: 'API/Morkload Search', url: 'https://10.191.171.12:5443/PyPortal/APISearch/'  ,icon:'../src/assets/accountability.png'},
  { name: 'CURL Search', url: 'https://10.191.171.12:5443/EISInfra/curlSearch/index.php'  ,icon:'../src/assets/accountability.png'},
  { name: 'CBS Port Monitoring', url: 'https://10.191.171.12:5443/EIS/CBS_Connection/'  ,icon:'../src/assets/accountability.png'},
  { name: 'PR Load Balancer', url: 'https://10.188.10.106:2443/login' ,icon:'../src/assets/accountability.png'},
 { name: 'DPG Url', url: 'https://10.188.16.73:8443/'  ,icon:'../src/assets/accountability.png'},
  { name: 'IBM PMR CASE', url: 'https://login.ibm.com/authvx/mtfim/sps/authvxv?PolicyId=...'  ,icon:'../src/assets/accountability.png'},
  { name: 'Ansible', url: 'https://10.191.171.12:9443/#/login'  ,icon:'../src/assets/accountability.png'},

];



import React, { useEffect, useState } from 'react';
import { Menu as MenuIcon, ChevronLeft, ChevronRight, Star } from 'lucide-react';
import { cardLinks } from './CardLinks';
import '../styles/Menu.css';

const Sidebar = ({ darkMode, isSidebarOpen, setIsSidebarOpen }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [favorites, setFavorites] = useState([]);
  const [userId, setUserId] = useState(null);
  const [password, setPassword] = useState(null);

  const toggleSidebar = () => setIsSidebarOpen(prev => !prev);

  // Get userId and password from localStorage on mount
  useEffect(() => {
    const uid = localStorage.getItem('uidd');
    const pwd = localStorage.getItem('password');
    if (uid && pwd) {
      setUserId(uid);
      setPassword(pwd);
    } else {
      console.warn('No user credentials found in localStorage');
    }
  }, []);

  // Fetch favorites from backend
  useEffect(() => {
    if (!userId || !password) return;

    const fetchFavorites = async () => {
      try {
        const res = await fetch('/PyPortal/EISHome/postFavourites/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId, password }),
        });

        const data = await res.json();
        const favData = data.favourites;

        let favArray = [];

        if (Array.isArray(favData)) {
          favArray = favData;
        } else if (typeof favData === 'string') {
          favArray = favData.split(',').map(item => item.trim()).filter(Boolean);
        }

        setFavorites(favArray);
      } catch (err) {
        console.error('Failed to load favorites:', err);
      }
    };

    fetchFavorites();
  }, [userId, password]);

  // Update backend when favorites change
  const updateFavoritesOnBackend = async (updatedFavorites) => {
    try {
      await fetch('/PyPortal/EISHome/postFavourites/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId,
          password,
          favList: updatedFavorites, // Send as array
        }),
      });
    } catch (error) {
      console.error('Failed to update favorites:', error);
    }
  };

  // Toggle favorite
  const toggleFavorite = (name) => {
    setFavorites((prev) => {
      const updated = prev.includes(name)
        ? prev.filter((fav) => fav !== name)
        : [...prev, name];
      updateFavoritesOnBackend(updated);
      return updated;
    });
  };

  // Filter and sort links
  const filteredLinks = cardLinks
    .filter((link) => link.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      const aFav = favorites.includes(a.name);
      const bFav = favorites.includes(b.name);
      return aFav === bFav ? 0 : aFav ? -1 : 1;
    });

  return (
    <>
      {!isSidebarOpen && (
        <button className="sidebar-toggle" onClick={toggleSidebar}>
          <MenuIcon size={24} />
        </button>
      )}

      <div className={`sidebar ${isSidebarOpen ? 'open' : 'collapsed'}`}>
        <div className="sidebar-header">
          {isSidebarOpen && <h2 className="sidebar-title">Quick Access</h2>}
          <button
            className="collapse-btn"
            onClick={toggleSidebar}
            aria-label={isSidebarOpen ? 'Collapse sidebar' : 'Expand sidebar'}
          >
            {isSidebarOpen ? <ChevronLeft size={20} /> : <ChevronRight size={20} />}
          </button>
        </div>

        {isSidebarOpen && (
          <div className="sidebar-search">
            <input
              type="text"
              placeholder="Search links..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          </div>
        )}

        <div className="sidebar-content">
          <div className="sidebar-section">
            {filteredLinks.map((link, index) => {
              const isFavorited = favorites.includes(link.name);
              return (
                <div key={index} className="link-card">
                  <span
                    className="star-icon"
                    onClick={() => toggleFavorite(link.name)}
                    title={isFavorited ? 'Unstar' : 'Star'}
                  >
                    {isFavorited ? (
                      <Star fill="#facc15" color="#facc15" size={16} />
                    ) : (
                      <Star color="#fff" size={16} />
                    )}
                  </span>
                  <a
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="link-anchor"
                  >
                    {isSidebarOpen ? (
                      <span>{link.name}</span>
                    ) : (
                      <img
                        src={link.icon}
                        alt={link.name}
                        title={link.name}
                        className="link-icon"
                      />
                    )}
                  </a>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </>
  );
};

export default Sidebar;



import React, { useState, useEffect } from 'react';
import Header from './components/Header.jsx';
import Footer from './components/Footer';
import Menu from './components/Menu';
import Dashboard from './components/Dashboard';
import Chatbot from './components/ChatBot';
import Login from './components/Login';
import './App.css';

function App() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [chatbotMinimized, setChatbotMinimized] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [username, setUsername] = useState('');

  // Check for existing login session on app load
  useEffect(() => {
    const storedUsername = localStorage.getItem('username');
    const storedLoginTime = localStorage.getItem('loginTime');
    if (storedUsername && storedLoginTime) {
      // Check if session has expired
      const loginTime = parseInt(storedLoginTime, 10);
      if (loginTime && Date.now() - loginTime < 60 * 60 * 1000) {
        setUsername(storedUsername);
        setIsLoggedIn(true);
      } else {
        handleLogout();
      }
    }
  }, []);

  // Set login timestamp on login
  const handleLogin = (user) => {
    const now = Date.now();
    setUsername(user);
    setIsLoggedIn(true);
    localStorage.setItem('username', user);
    localStorage.setItem('loginTime', now.toString());
    sessionStorage.setItem('loginTime', now.toString());
  };

  // Logout and flush session storage
  const handleLogout = () => {
    setIsLoggedIn(false);
    setUsername('');
    localStorage.removeItem('username');
    localStorage.removeItem('loginTime');
    sessionStorage.clear(); // Flush entire session storage
  };

  // Auto logout after 1 hour
  useEffect(() => {
    if (!isLoggedIn) return;

    const checkAutoLogout = () => {
      const loginTime = parseInt(localStorage.getItem('loginTime'), 10);
      if (loginTime && Date.now() - loginTime > 60 * 60 * 1000) {
        handleLogout();
      }
    };

    const interval = setInterval(checkAutoLogout, 60 * 1000); // Check every minute
    checkAutoLogout();

    return () => clearInterval(interval);
  }, [isLoggedIn]);

  useEffect(() => {
    const clearCache = () => {
      if ('caches' in window) {
        caches.keys().then((names) => {
          for (let name of names) {
            caches.delete(name);
          }
        });
      }
    };
    clearCache();
  }, []);

  if (!isLoggedIn) {
    return <Login onLogin={handleLogin} />;
  }

  return (
    <div>
      <Header
        darkMode={darkMode}
        setDarkMode={setDarkMode}
        username={username}
        onLogout={handleLogout}
      />
      {!chatbotMinimized && <div className="app-background" />}
      <div className={`main ${isSidebarOpen ? "sidebar-open" : "sidebar-collapsed"}`}>
        <Menu
          isSidebarOpen={isSidebarOpen}
          setIsSidebarOpen={setIsSidebarOpen}
        />
        <Dashboard isSidebarOpen={isSidebarOpen} />
        <Chatbot setChatbotMinimized={setChatbotMinimized} username={username} />
      </div>
      <Footer />
    </div>
  );
}

export default App;

