import '../styles/GraphCarousel.css';
import React, { useState, useEffect } from "react";
import {
  LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer
} from 'recharts';
import Download from '../assets/down-arrow.png';
import {
  getServiceSys, getServiceExp, getIpwiseExp, getIpwiseSys, getPortwiseSys, getPortwiseExp
} from "../api/PostApi";

const GraphCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  
  // State for each data set
  const [serviceSysData, setServiceSysData] = useState([]);
  const [serviceExpData, setServiceExpData] = useState([]);
  const [ipwiseSysData, setIpwiseSysData] = useState([]);
  const [ipwiseExpData, setIpwiseExpData] = useState([]);
  const [portwiseSysData, setPortwiseSysData] = useState([]);
  const [portwiseExpData, setPortwiseExpData] = useState([]);

  // Function to convert data to CSV format
  const convertToCSV = (jsonData, sortBy = 'Hits') => {
    if (!jsonData || !jsonData.length) return '';

    // Sort data in descending order
    const sortedData = [...jsonData].sort((a, b) => b[sortBy] - a[sortBy]);

    const headers = Object.keys(sortedData[0]);
    const csvRows = [
      headers.join(','), // header row
      ...sortedData.map(row => headers.map(field => `"${row[field]}"`).join(','))
    ];

    return csvRows.join('\n');
  };

  // Download CSV function
  const downloadCSV = (data, filename = 'chart-data.csv') => {
    if (!data || !data.length) return;

    const csvContent = convertToCSV(data);
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Fetch all data when component mounts
  useEffect(() => {
    const fetchAllData = async () => {
      setIsLoading(true);
      try {
        // Fetch all data in parallel
        const [
          serviceSysResponse,
          serviceExpResponse,
          ipwiseSysResponse,
          ipwiseExpResponse,
          portwiseSysResponse,
          portwiseExpResponse
        ] = await Promise.all([
          getServiceSys(),
          getServiceExp(),
          getIpwiseSys(),
          getIpwiseExp(),
          getPortwiseSys(),
          getPortwiseExp()
        ]);

        // Update state with fetched data
        setServiceSysData(serviceSysResponse.data || []);
        setServiceExpData(serviceExpResponse.data?.Service_wise_exp || []);
        setIpwiseSysData(ipwiseSysResponse.data || []);
        setIpwiseExpData(ipwiseExpResponse.data || []);
        setPortwiseSysData(portwiseSysResponse.data || []);
        setPortwiseExpData(portwiseExpResponse.data || []);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchAllData();
  }, []);

  // Prepare chart configurations
  const charts = [
    {
      title: 'Service System Usage',
      data: serviceSysData.slice(0, 10), // Top 10 entries
      chart: (
        <ResponsiveContainer>
          <BarChart data={serviceSysData.slice(0, 10)}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="Service_name" stroke="var(--text-color)" />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Bar dataKey="Hits" fill="#f14f98" />
          </BarChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'Service Experience Metrics',
      data: serviceExpData.slice(0, 10),
      chart: (
        <ResponsiveContainer>
          <LineChart data={serviceExpData.slice(0, 10)}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="Service_name" stroke="var(--text-color)" />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Line type="monotone" dataKey="Hits" stroke="#7559f3" strokeWidth={3} />
          </LineChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'IP-wise System Usage',
      data: ipwiseSysData.slice(0, 10),
      chart: (
        <ResponsiveContainer>
          <BarChart data={ipwiseSysData.slice(0, 10)}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="IP" stroke="var(--text-color)" />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Bar dataKey="Hits" fill="#32a852" />
          </BarChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'Port-wise System Usage',
      data: portwiseSysData.slice(0, 10),
      chart: (
        <ResponsiveContainer>
          <BarChart data={portwiseSysData.slice(0, 10)}>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="Port" stroke="var(--text-color)" />
            <YAxis stroke="var(--text-color)" />
            <Tooltip />
            <Bar dataKey="Hits" fill="#3273a8" />
          </BarChart>
        </ResponsiveContainer>
      ),
    }
  ];

  // Navigation functions
  const goToSlide = (index) => {
    setCurrentIndex(index);
  };

  // Auto-play effect
  useEffect(() => {
    if (paused || charts.length <= 1) return;

    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) =>
        prevIndex === charts.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000);

    return () => clearInterval(interval);
  }, [paused, charts.length]);

  if (isLoading) {
    return <div className="loading">Loading charts...</div>;
  }

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        <h2>{charts[currentIndex]?.title || 'Chart'}</h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={() => downloadCSV(
              charts[currentIndex]?.data || [], 
              `${charts[currentIndex]?.title || 'chart-data'}.csv`
            )}
            disabled={!charts[currentIndex]?.data?.length}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {charts.map((item, index) => (
          <div
            key={index}
            className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
            style={{ display: index === currentIndex ? 'block' : 'none' }}
          >
            {item.chart}
          </div>
        ))}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={index}
            className={`dot ${index === currentIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => goToSlide(index)}
          >
          </span>
        ))}
      </div>
    </div>
  );
};

export default GraphCarousel;
