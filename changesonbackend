import '../styles/GraphCarousel.css';
import React, { useState, useEffect, useRef } from "react";
import {
  LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend
} from 'recharts';
import Download from '../assets/down-arrow.png';
import {
  getServiceSys, getServiceExp, getIpwiseExp, getIpwiseSys, getPortwiseSys, getPortwiseExp
} from "../api/PostApi";

const GraphCarousel = () => {
  const [activeChartIndex, setActiveChartIndex] = useState(0);
  const [chartHeight, setChartHeight] = useState(400);
  const [paused, setPaused] = useState(false); // Add missing state for paused
  
  // Reference for the carousel container
  const carouselRef = useRef(null);
  
  // Adjust chart height based on container
  useEffect(() => {
    const updateHeight = () => {
      if (carouselRef.current) {
        const width = carouselRef.current.offsetWidth;
        // Set height proportionally, with minimum height
        setChartHeight(Math.max(400, width * 0.6));
      }
    };
    
    // Initial update
    updateHeight();
    
    // Update on resize
    window.addEventListener('resize', updateHeight);
    return () => window.removeEventListener('resize', updateHeight);
  }, []);
  const [isLoading, setIsLoading] = useState(true);
  
  // State for each data set
  const [serviceSysData, setServiceSysData] = useState([]);
  const [serviceExpData, setServiceExpData] = useState([]);
  const [ipwiseSysData, setIpwiseSysData] = useState([]);
  const [ipwiseExpData, setIpwiseExpData] = useState([]);
  const [portwiseSysData, setPortwiseSysData] = useState([]);
  const [portwiseExpData, setPortwiseExpData] = useState([]);

  // Function to convert data to CSV format
  const convertToCSV = (jsonData, sortBy = 'Hits') => {
    if (!jsonData || !Array.isArray(jsonData) || jsonData.length === 0) {
      console.warn("No valid data provided for CSV conversion");
      return '';
    }

    try {
      // Sort data in descending order if the sortBy field exists
      let sortedData = [...jsonData];
      if (sortBy && sortedData[0] && sortBy in sortedData[0]) {
        sortedData.sort((a, b) => {
          const valA = a[sortBy] || 0;
          const valB = b[sortBy] || 0;
          return valB - valA;
        });
      }

      // Get all unique headers from all objects
      const headers = Array.from(
        new Set(
          sortedData.flatMap(item => Object.keys(item))
        )
      );

      // Create CSV header row
      const csvRows = [headers.join(',')];

      // Create data rows
      sortedData.forEach(item => {
        const values = headers.map(header => {
          const value = item[header] !== undefined ? item[header] : '';
          // Escape quotes and wrap with quotes
          return `"${String(value).replace(/"/g, '""')}"`;
        });
        csvRows.push(values.join(','));
      });

      return csvRows.join('\n');
    } catch (error) {
      console.error("Error converting to CSV:", error);
      return '';
    }
  };

  // Download CSV function
  const downloadCSV = (data, filename = 'chart-data.csv') => {
    if (!data || !Array.isArray(data) || data.length === 0) {
      console.warn("No data available to download");
      return;
    }

    try {
      const csvContent = convertToCSV(data);
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);

      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up the URL object
      setTimeout(() => {
        URL.revokeObjectURL(url);
      }, 100);
    } catch (error) {
      console.error("Error downloading CSV:", error);
    }
  };

  // Fetch all data when component mounts
  useEffect(() => {
    const fetchAllData = async () => {
      setIsLoading(true);
      try {
        // Fetch each data set individually to better handle errors
        try {
          const serviceSysResponse = await getServiceSys();
          if (serviceSysResponse && serviceSysResponse.data) {
            setServiceSysData(Array.isArray(serviceSysResponse.data) ? serviceSysResponse.data : []);
          }
        } catch (error) {
          console.error("Error fetching service system data:", error);
          setServiceSysData([]);
        }
        
        try {
          const serviceExpResponse = await getServiceExp();
          if (serviceExpResponse && serviceExpResponse.data && serviceExpResponse.data.Service_wise_exp) {
            setServiceExpData(Array.isArray(serviceExpResponse.data.Service_wise_exp) ? 
              serviceExpResponse.data.Service_wise_exp : []);
          }
        } catch (error) {
          console.error("Error fetching service experience data:", error);
          setServiceExpData([]);
        }
        
        try {
          const ipwiseSysResponse = await getIpwiseSys();
          if (ipwiseSysResponse && ipwiseSysResponse.data) {
            setIpwiseSysData(Array.isArray(ipwiseSysResponse.data) ? ipwiseSysResponse.data : []);
          }
        } catch (error) {
          console.error("Error fetching IP-wise system data:", error);
          setIpwiseSysData([]);
        }
        
        try {
          const ipwiseExpResponse = await getIpwiseExp();
          if (ipwiseExpResponse && ipwiseExpResponse.data) {
            setIpwiseExpData(Array.isArray(ipwiseExpResponse.data) ? ipwiseExpResponse.data : []);
          }
        } catch (error) {
          console.error("Error fetching IP-wise experience data:", error);
          setIpwiseExpData([]);
        }
        
        try {
          const portwiseSysResponse = await getPortwiseSys();
          if (portwiseSysResponse && portwiseSysResponse.data) {
            setPortwiseSysData(Array.isArray(portwiseSysResponse.data) ? portwiseSysResponse.data : []);
          }
        } catch (error) {
          console.error("Error fetching port-wise system data:", error);
          setPortwiseSysData([]);
        }
        
        try {
          const portwiseExpResponse = await getPortwiseExp();
          if (portwiseExpResponse && portwiseExpResponse.data) {
            setPortwiseExpData(Array.isArray(portwiseExpResponse.data) ? portwiseExpResponse.data : []);
          }
        } catch (error) {
          console.error("Error fetching port-wise experience data:", error);
          setPortwiseExpData([]);
        }
      } catch (error) {
        console.error("Error in data fetching process:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchAllData();
  }, []);

  // Helper function to safely get top N items from an array
  const getTopItems = (data, count = 10) => {
    if (!data || !Array.isArray(data)) return [];
    
    // Create a deep copy to avoid modifying original data
    const processedData = data.map(item => ({...item}));
    
    // For large datasets, limit to the top N items by Hits
    return processedData
      .sort((a, b) => (b.Hits || 0) - (a.Hits || 0))
      .slice(0, count);
  };
  
  // Helper function to format large numbers for display
  const formatLargeNumber = (num) => {
    if (num === undefined || num === null) return '0';
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
    return num.toString();
  };

  // Custom tooltip formatter
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <div className="custom-tooltip" style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.8)',
          padding: '10px',
          border: '1px solid #ccc',
          borderRadius: '5px'
        }}>
          <p className="label">{`${label}`}</p>
          {payload.map((entry, index) => (
            <p key={index} style={{ color: entry.color }}>
              {`${entry.name}: ${entry.value}`}
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  // Prepare chart configurations
  const charts = [
    {
      title: 'Service System Usage',
      data: getTopItems(serviceSysData),
      chart: (
        <ResponsiveContainer>
          <BarChart 
            data={getTopItems(serviceSysData)}
            margin={{ top: 20, right: 30, left: 20, bottom: 100 }}
          >
            <CartesianGrid strokeDasharray="10000" stroke="var(--border-color)" />
            <XAxis 
              dataKey="Service_name" 
              stroke="var(--text-color)"
              angle={-45}
              textAnchor="end"
              height={80}
              interval={0}
              tick={{ fontSize: 12 }}
            />
            <YAxis 
              stroke="var(--text-color)"
              tickFormatter={formatLargeNumber}
            />
            <Tooltip content={<CustomTooltip />} />
            <Bar dataKey="Hits" fill="#f14f98" />
          </BarChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'Service Experience Metrics',
      data: getTopItems(serviceExpData),
      chart: (
        <ResponsiveContainer>
          <LineChart 
            data={getTopItems(serviceExpData)}
            margin={{ top: 20, right: 30, left: 20, bottom: 100 }}
          >
            <CartesianGrid strokeDasharray="10000" stroke="var(--border-color)" />
            <XAxis 
              dataKey="Service_name" 
              stroke="var(--text-color)"
              angle={-45}
              textAnchor="end"
              height={80}
              interval={0}
              tick={{ fontSize: 12 }}
            />
            <YAxis 
              stroke="var(--text-color)"
              tickFormatter={formatLargeNumber}
            />
            <Tooltip content={<CustomTooltip />} />
            <Line type="monotone" dataKey="Hits" stroke="#7559f3" strokeWidth={3} />
          </LineChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'IP-wise System Usage',
      data: getTopItems(ipwiseSysData),
      chart: (
        <ResponsiveContainer>
          <BarChart 
            data={getTopItems(ipwiseSysData)}
            margin={{ top: 20, right: 30, left: 20, bottom: 100 }}
          >
            <CartesianGrid strokeDasharray="10000" stroke="var(--border-color)" />
            <XAxis 
              dataKey="IP" 
              stroke="var(--text-color)"
              angle={-45}
              textAnchor="end"
              height={80}
              interval={0}
              tick={{ fontSize: 12 }}
            />
            <YAxis 
              stroke="var(--text-color)"
              tickFormatter={formatLargeNumber}
            />
            <Tooltip content={<CustomTooltip />} />
            <Bar dataKey="Hits" fill="#32a852" />
          </BarChart>
        </ResponsiveContainer>
      ),
    },
    {
      title: 'Port-wise System Usage',
      data: getTopItems(portwiseSysData),
      chart: (
        <ResponsiveContainer>
          <BarChart 
            data={getTopItems(portwiseSysData)}
            margin={{ top: 20, right: 30, left: 20, bottom: 100 }}
          >
            <CartesianGrid strokeDasharray="10000" stroke="var(--border-color)" />
            <XAxis 
              dataKey="Port" 
              stroke="var(--text-color)"
              angle={-45}
              textAnchor="end"
              height={80}
              interval={0}
              tick={{ fontSize: 12 }}
            />
            <YAxis 
              stroke="var(--text-color)"
              tickFormatter={formatLargeNumber}
            />
            <Tooltip content={<CustomTooltip />} />
            <Bar dataKey="Hits" fill="#3273a8" />
          </BarChart>
        </ResponsiveContainer>
      ),
    }
  ];

  // Navigation functions
  const goToSlide = (index) => {
    setActiveChartIndex(index);
  };

  // Auto-play effect
  useEffect(() => {
    if (paused || charts.length <= 1) return;

    const interval = setInterval(() => {
      setActiveChartIndex((prevIndex) =>
        prevIndex === charts.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000);

    return () => clearInterval(interval);
  }, [paused, charts.length]);

  if (isLoading) {
    return (
      <div className="loading-container" style={{ 
        height: '300px', 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        flexDirection: 'column'
      }}>
        <div className="loading-spinner" style={{
          border: '4px solid #f3f3f3',
          borderTop: '4px solid #3498db',
          borderRadius: '50%',
          width: '50px',
          height: '50px',
          animation: 'spin 2s linear infinite'
        }}></div>
        <p style={{ marginTop: '20px' }}>Loading chart data...</p>
      </div>
    );
  }

  return (
    <div className="carousel-container" ref={carouselRef}>
      <div className="carousel-header">
        <h2>{charts[activeChartIndex]?.title || 'Chart'}</h2>
        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={() => {
              const currentData = charts[activeChartIndex]?.data;
              const fileName = `${charts[activeChartIndex]?.title || 'chart-data'}_${new Date().toISOString().split('T')[0]}.csv`;
              
              if (currentData && Array.isArray(currentData) && currentData.length > 0) {
                downloadCSV(currentData, fileName);
              } else {
                alert("No data available to download");
              }
            }}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        style={{ height: `${chartHeight}px` }}
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {charts.map((item, index) => (
          <div
            key={index}
            className={`chart-fade ${index === activeChartIndex ? 'active' : ''}`}
            style={{ 
              display: index === activeChartIndex ? 'block' : 'none',
              height: '100%'
            }}
          >
            {item.chart}
          </div>
        ))}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={index}
            className={`dot ${index === activeChartIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => goToSlide(index)}
          >
          </span>
        ))}
      </div>
    </div>
  );
};

export default GraphCarousel;






"6988","customerInformationMR_bh_expDS","EXP","15894840","2025-04-29 00:00:00.000000"
"5144","customerInformationMR_bh_expDS","EXP","15110597","2025-04-28 00:00:00.000000"
"7094","customerDetailsYONO_bth_expDS","EXP","14480559","2025-04-29 00:00:00.000000"
"5428","customerDetailsYONO_bth_expDS","EXP","13589279","2025-04-28 00:00:00.000000"
"2825","customerInformationMR_bh_expDS","EXP","12369005","2025-04-26 00:00:00.000000"
"2826","customerDetailsYONO_bth_expDS","EXP","11725711","2025-04-26 00:00:00.000000"
"4098","customerInformationMR_bh_expDS","EXP","11438505","2025-04-27 00:00:00.000000"
"4179","customerDetailsYONO_bth_expDS","EXP","10605390","2025-04-27 00:00:00.000000"
"6678","inbAccountStatement_expDS","EXP","9357237","2025-04-29 00:00:00.000000"
"5338","inbAccountStatement_expDS","EXP","8716748","2025-04-28 00:00:00.000000"
