import os
import re
import logging
import subprocess
import pymysql
import traceback
from typing import List, Optional, Dict, Any
from datetime import datetime

import sqlparse  # <-- ADDED

from langchain_community.utilities import SQLDatabase
from langchain_ollama import OllamaLLM
from langchain.chains import create_sql_query_chain

# --- CONFIGURATION ---

DB_CONFIGS = {
    "process": {
        "name": "FAR Details",
        "db_config": {
            "host": "localhost", "user": "root", "password": "root123", "database": "EIS_n"
        },
        "include_tables": ["FarDetailsAll"],
    },
    "system": {
        "name": "System Metrics",
        "db_config": {
            "host": "localhost", "user": "ray", "password": "", "database": "system_monitor_db"
        },
        "include_tables": None,
    },
    "team": {
        "name": "Team Info",
        "db_config": {
            "host": "localhost", "user": "root", "password": "root123", "database": "EIS"
        },
        "include_tables": ["UserMaster"],
    }
}

SAFE_COMMANDS = {
    # ... your SAFE_COMMANDS dictionary as before ...
    "cpu": "top -bn1 | grep 'Cpu(s)'",
    # etc.
}

BLOCKED_PATTERNS = [
    r"\brm\b", r"\bkill\b", r"\breboot\b", r"\bshutdown\b", r"\buserdel\b",
    r"\bpasswd\b", r"\bmkfs\b", r"\bwget\b", r"\bcurl\b", r":\s*(){:|:&};:",
    r"\bsudo\b", r"\bsu\b", r"\bchmod\b", r"\bchown\b", r"\bdd\b"
]

logging.basicConfig(
    filename=os.path.expanduser("~/.unified_ai.log"),
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def is_dangerous(text: str) -> bool:
    return any(re.search(pattern, text.lower()) for pattern in BLOCKED_PATTERNS)

def detect_query_type(question: str) -> str:
    # ... as before, unchanged ...
    question = question.lower()

    system_patterns = [
        r'\b(cpu|memory|ram|disk|storage|uptime|load|processes|running|network|port|iostat|vmstat)\b',
        r'\b(show|check|what|how much|current|live|real.?time)\b.*\b(cpu|memory|disk|load|system|server)\b',
        r'\b(top|ps|free|df|netstat|who|hostname|uname)\b',
        r'\bsystem\b.*\b(status|info|usage|performance|health)\b',
        r'\b(server|linux|unix)\b.*\b(status|info|performance)\b',
        r'\bhow\s+(much|many)\b.*\b(cpu|memory|disk|process|running)\b'
    ]
    team_patterns = [
        r'\b(team|user|employee|staff|member|person|people)\b',
        r'\b(show|list|find|get|count|search)\b.*\b(employee|user|team|staff)\b',
        r'\b(who|which\s+user|which\s+employee)\b',
        r'\bname.*\b(john|smith|portal|eis|project)\b',
        r'\b(portal|eis|project)\b.*\b(team|user|employee)\b'
    ]
    process_patterns = [
        r'\b(process|pid|far|details)\b.*\b(database|table|stored|history|log)\b',
        r'\b(which|what|show|list)\b.*\bprocess\b.*\b(memory|cpu|usage|database)\b',
        r'\bfar\s*details\b',
        r'\bprocess\b.*\b(sorted|maximum|minimum|highest|lowest)\b',
        r'\b(database|table|stored)\b.*\bprocess\b'
    ]
    system_db_patterns = [
        r'\b(metrics|monitoring|historical|logged|stored)\b.*\b(cpu|memory|disk|system)\b',
        r'\b(average|total|sum|count|maximum|minimum)\b.*\b(cpu|memory|disk|usage)\b',
        r'\b(system|server)\b.*\b(metrics|monitoring|database|table|history)\b',
        r'\b(latest|recent|last|previous)\b.*\b(system|metric|entry)\b'
    ]
    for pattern in system_patterns:
        if re.search(pattern, question):
            return "system"
    for pattern in team_patterns:
        if re.search(pattern, question):
            return "team"
    for pattern in process_patterns:
        if re.search(pattern, question):
            return "process"
    for pattern in system_db_patterns:
        if re.search(pattern, question):
            return "system_db"
    words = question.split()
    if any(word in ['current', 'now', 'live', 'real-time', 'status', 'running'] for word in words):
        if any(word in ['cpu', 'memory', 'disk', 'process', 'system', 'server'] for word in words):
            return "system"
    if any(word in ['count', 'total', 'average', 'maximum', 'minimum', 'list', 'show', 'find'] for word in words):
        if any(word in ['employee', 'user', 'team', 'staff', 'member'] for word in words):
            return "team"
        elif any(word in ['process', 'pid','far'] for word in words):
            return "process"
        elif any(word in ['metric', 'monitoring', 'system', 'database','far'] for word in words):
            return "system_db"
    return "general"

# ---------- THIS FUNCTION IS UPDATED! ----------
def clean_sql(raw_llm_output: str) -> str:
    """
    Extract and clean the first SQL statement from LLM output using sqlparse.
    Strips markdown/code fences, explanation text, and returns only executable SQL.
    """
    cleaned = raw_llm_output.strip()

    # Remove markdown code fences (``````sql, etc.)
    cleaned = re.sub(r"```
    cleaned = cleaned.replace('```', '')

    # Use sqlparse to split and extract SQL statements
    statements = sqlparse.split(cleaned)
    for stmt in statements:
        sql = sqlparse.format(stmt, strip_comments=True, reindent=True).strip()
        if sql.lower().startswith(('select', 'insert', 'update', 'delete', 'with')):
            # Remove trailing semicolon for safety
            sql = sql.rstrip(';')
            return sql
    return ''

def format_answer(result: List[tuple], columns: Optional[List[str]] = None) -> str:
    if not result:
        return "No data found for your request."
    if len(result) == 1 and len(result[0]) == 1:
        return f"Result: {result[0][0]}"
    if columns and len(result) <= 10:
        output = []
        col_widths = [max(len(str(col)), max(len(str(row[i])) for row in result)) for i, col in enumerate(columns)]
        header = " | ".join(col.ljust(width) for col, width in zip(columns, col_widths))
        separator = "-+-".join("-" * width for width in col_widths)
        output.append(header)
        output.append(separator)
        for row in result[:10]:
            formatted_row = " | ".join(str(val).ljust(width) for val, width in zip(row, col_widths))
            output.append(formatted_row)
        if len(result) > 10:
            output.append(f"... and {len(result) - 10} more rows")
        return "\n".join(output)
    rows = []
    for row in result[:20]:
        rows.append(" | ".join(str(val) for val in row))
    if len(result) > 20:
        rows.append(f"... and {len(result) - 20} more rows")
    return "\n".join(rows)

def is_select_query(sql: str) -> bool:
    return sql.strip().lower().startswith('select')

def clear_screen():
    os.system("cls" if os.name == "nt" else "clear")

class UnifiedAIAssistant:
    def __init__(self):
        self.llm = None
        self.db_handlers = {}
        self.initialized = False
        self.chat_history = []

    def initialize(self):
        try:
            print("üîß Initializing AI Assistant...")
            self.llm = OllamaLLM(model="mistral:latest", temperature=0.1)
            for category, config in DB_CONFIGS.items():
                try:
                    db_cfg = config['db_config']
                    uri = f"mysql+pymysql://{db_cfg['user']}:{db_cfg['password']}@{db_cfg['host']}/{db_cfg['database']}"
                    db_for_llm = SQLDatabase.from_uri(uri, include_tables=config.get("include_tables"))
                    chain = create_sql_query_chain(self.llm, db_for_llm)
                    db_conn = pymysql.connect(**db_cfg)
                    self.db_handlers[category] = {
                        'chain': chain,
                        'connection': db_conn,
                        'config': config
                    }
                    print(f"‚úÖ {config['name']} database connected")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Failed to connect to {config['name']}: {e}")
                    logger.error(f"DB connection failed for {category}: {e}")

            self.initialized = True
            print("‚úÖ AI Assistant initialized successfully!")
            return True
        except Exception as e:
            print(f"‚ùå Initialization failed: {e}")
            logger.error(f"Initialization failed: {e}", exc_info=True)
            return False

    def run_system_command(self, question: str) -> str:
        # ... unchanged (your previous code here) ...
        pass  # Remove this line and keep your original code

    def query_database(self, question: str, category: str) -> str:
        if category not in self.db_handlers:
            return f"‚ùå Database category '{category}' not available."

        handler = self.db_handlers[category]

        try:
            raw_sql = handler['chain'].invoke({"question": question})
            sql = clean_sql(raw_sql)        # <-- Uses updated cleaning!
            if not is_select_query(sql):
                return "üö´ Only SELECT queries are allowed for security."
            with handler['connection'].cursor() as cursor:
                cursor.execute(sql)
                result = cursor.fetchall()
                columns = [desc[0] for desc in cursor.description] if cursor.description else None
            if not result:
                return "No data found matching your query."
            formatted_result = format_answer(result, columns)
            context = ""
            for turn in self.chat_history[-5:]:
                context += f"User: {turn['user']}\nAssistant: {turn['assistant']}\n"
            context += f"""User: {question}
Assistant:

Database query results:
{formatted_result}

Please provide a clear, natural language response that directly answers the user's question based on this data. Make it conversational and helpful."""

            ai_interpretation = self.llm.invoke(context)
            self.chat_history.append({"user": question, "assistant": ai_interpretation})
            return ai_interpretation

        except Exception as e:
            logger.error(f"Database query error: {e}")
            return f"‚ùå Unable to retrieve that information: {e}"

    def general_ai_response(self, question: str) -> str:
        try:
            context = ""
            for turn in self.chat_history[-5:]:
                context += f"User: {turn['user']}\nAssistant: {turn['assistant']}\n"
            context += f"""User: {question}
Assistant:
You are a helpful AI assistant with expertise in system administration, databases, and general technical knowledge.

Please provide a clear, helpful, and accurate response. If this is a technical question, provide practical advice. If it's a general question, be informative and conversational."""

            response = self.llm.invoke(context)
            self.chat_history.append({"user": question, "assistant": response})
            return response
        except Exception as e:
            logger.error(f"AI response error: {e}")
            return f"‚ùå Unable to process your question: {e}"

    def process_question(self, question: str) -> str:
        if not self.initialized:
            return "‚ùå Assistant not initialized. Please restart."
        if is_dangerous(question):
            return "üö´ Question blocked for security reasons."
        query_type = detect_query_type(question)
        if query_type == "system":
            return self.run_system_command(question)
        elif query_type in ["team", "process", "system_db"]:
            db_category = query_type if query_type != "system_db" else "system"
            return self.query_database(question, db_category)
        else:
            return self.general_ai_response(question)

    def show_help(self):
        # ... unchanged (your previous code here) ...
        pass  # Remove this line and keep your original code

    def show_status(self):
        # ... unchanged (your previous code here) ...
        pass  # Remove this line and keep your original code

    def start_interactive_session(self):
        if not self.initialize():
            return
        clear_screen()
        print("ü§ñ AI Assistant Ready")
        print("Ask me anything about your system, databases, or general questions...")
        print("Type 'exit' to quit\n")
        while True:
            try:
                question = input("üí¨ ").strip()
                if not question:
                    continue
                question_lower = question.lower()
                if question_lower in ['exit', 'quit', 'q']:
                    print("üëã Goodbye!")
                    break
                elif question_lower == 'help':
                    self.show_help()
                    continue
                elif question_lower == 'clear':
                    clear_screen()
                    continue
                elif question_lower == 'status':
                    self.show_status()
                    continue
                response = self.process_question(question)
                print(f"\n{response}\n")
            except KeyboardInterrupt:
                print("\nüëã Goodbye!")
                break
            except Exception as e:
                print(f"\n‚ùå Error: {e}")
                logger.error(f"Session error: {e}", exc_info=True)
        for handler in self.db_handlers.values():
            if handler['connection'].open:
                handler['connection'].close()
        print("Connection closed.")

def main():
    assistant = UnifiedAIAssistant()
    assistant.start_interactive_session()

if __name__ == "__main__":
    main()
