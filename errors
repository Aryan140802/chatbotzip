// 1. Enhanced Authentication Service with URL-based approach
export class AuthService {
  static TOKEN_KEY = 'authToken';
  static UUID_KEY = 'userUUID';
  static USERNAME_KEY = 'username';
  static LOGIN_TIME_KEY = 'loginTime';
  static MAIN_APP_URL = 'https://your-main-app-domain.com'; // Replace with your main app URL
  
  // Generate authenticated URL for external apps
  static generateAuthenticatedUrl(baseUrl) {
    const authData = this.getAuthData();
    if (!authData.token || !authData.uuid) {
      return null;
    }
    
    const url = new URL(baseUrl);
    url.searchParams.set('auth_token', authData.token);
    url.searchParams.set('user_uuid', authData.uuid);
    url.searchParams.set('timestamp', Date.now());
    
    return url.toString();
  }
  
  // Check if user is authenticated
  static isAuthenticated() {
    const token = localStorage.getItem(this.TOKEN_KEY);
    const uuid = localStorage.getItem(this.UUID_KEY);
    const loginTime = localStorage.getItem(this.LOGIN_TIME_KEY);
    
    if (!token || !uuid || !loginTime) {
      return false;
    }
    
    // Check if token is expired (30 minutes)
    const currentTime = Date.now();
    const timeDiff = currentTime - parseInt(loginTime);
    const thirtyMinutes = 30 * 60 * 1000;
    
    if (timeDiff > thirtyMinutes) {
      this.logout();
      return false;
    }
    
    return true;
  }
  
  // Get authentication data
  static getAuthData() {
    return {
      token: localStorage.getItem(this.TOKEN_KEY),
      uuid: localStorage.getItem(this.UUID_KEY),
      username: localStorage.getItem(this.USERNAME_KEY),
      loginTime: localStorage.getItem(this.LOGIN_TIME_KEY)
    };
  }
  
  // Set authentication data
  static setAuthData(authData) {
    const { token, uuid, username } = authData;
    const currentTime = Date.now().toString();
    
    localStorage.setItem(this.TOKEN_KEY, token);
    localStorage.setItem(this.UUID_KEY, uuid);
    localStorage.setItem(this.USERNAME_KEY, username);
    localStorage.setItem(this.LOGIN_TIME_KEY, currentTime);
    
    // Also set in sessionStorage for backup
    sessionStorage.setItem(this.TOKEN_KEY, token);
    sessionStorage.setItem(this.UUID_KEY, uuid);
    sessionStorage.setItem(this.USERNAME_KEY, username);
    sessionStorage.setItem(this.LOGIN_TIME_KEY, currentTime);
  }
  
  // Update login time (for activity tracking)
  static updateLoginTime() {
    const currentTime = Date.now().toString();
    localStorage.setItem(this.LOGIN_TIME_KEY, currentTime);
    sessionStorage.setItem(this.LOGIN_TIME_KEY, currentTime);
  }
  
  // Logout and clear all data
  static logout() {
    // Clear localStorage
    localStorage.removeItem(this.TOKEN_KEY);
    localStorage.removeItem(this.UUID_KEY);
    localStorage.removeItem(this.USERNAME_KEY);
    localStorage.removeItem(this.LOGIN_TIME_KEY);
    
    // Clear sessionStorage
    sessionStorage.clear();
    
    // Clear cookies
    this.clearAllCookies();
    
    // Clear caches
    if ('caches' in window) {
      caches.keys().then((names) => {
        names.forEach(name => caches.delete(name));
      });
    }
  }
  
  // Clear all cookies
  static clearAllCookies() {
    const cookies = document.cookie.split(";");
    for (const cookie of cookies) {
      const eqPos = cookie.indexOf("=");
      const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
      
      const pathSegments = location.pathname.split('/');
      let path = '';
      for (let i = 0; i < pathSegments.length; i++) {
        path += (path.endsWith('/') ? '' : '/') + pathSegments[i];
        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=${path};`;
      }
    }
  }
  
  // Redirect to main app login
  static redirectToLogin() {
    const currentUrl = encodeURIComponent(window.location.href);
    window.location.href = `${this.MAIN_APP_URL}/login?redirect=${currentUrl}`;
  }
  
  // Validate token with backend
  static async validateToken() {
    const authData = this.getAuthData();
    if (!authData.token || !authData.uuid) return false;
    
    try {
      const response = await fetch('/api/validate-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authData.token}`
        },
        body: JSON.stringify({ uuid: authData.uuid })
      });
      
      if (response.ok) {
        const data = await response.json();
        return data.valid;
      }
      return false;
    } catch (error) {
      console.error('Token validation failed:', error);
      return false;
    }
  }
}

// 2. Enhanced Card Links with URL-based authentication
export const cardLinks = [
  { 
    name: 'Daily Checklist', 
    url: 'https://10.191.171.12:5443/EIS/Checklist/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal' // internal apps use URL-based auth
  },
  { 
    name: 'Compliance Monitoring', 
    url: 'https://10.191.171.12:5443/EIS/Compliance/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'Outlook Sign-in', 
    url: 'https://portal.office.com/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: false,
    type: 'external' // External services don't use our auth
  },
  { 
    name: 'MQ Monitoring Portal (PR)', 
    url: 'https://10.191.171.12:5443/EIS/MQ_Monitoring/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'MQ Monitoring Portal (DR)', 
    url: 'https://10.191.171.12:5443/EIS/MQ_Monitoring_Dr/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'Centralized Dynatrace', 
    url: 'https://10.189.37.183/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'EIS Monitoring (PR)', 
    url: 'https://10.191.171.12:5443/EIS/port_monitoring/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'FAR', 
    url: 'https://nspm.sbi/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'RFC', 
    url: 'https://coportal.sbi.co.in:5443/EISON/index.php', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'Shared Folder', 
    url: 'https://sbionline.sharepoint.com/sites/EIS_TCS_SUPPORT/SOP/Forms/AllItems.aspx', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'external' // SharePoint has its own auth
  },
  { 
    name: 'Ticketing Tools', 
    url: 'https://10.191.171.12:5443/EIS/TMT/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'PIMS', 
    url: 'https://pims.onlinesbi.com/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'Ultimatix', 
    url: 'https://www.ultimatix.net', 
    icon: '../src/assets/accountability.png',
    requiresAuth: false,
    type: 'external'
  },
  { 
    name: 'TFS', 
    url: 'https://eistfsserver.sbi.co.in/tis/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'Onboarding Portal', 
    url: 'https://10.191.171.12:5443/EISInfra/EIS/EIS/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'API/Workload Search', 
    url: 'https://10.191.171.12:5443/PyPortal/APISearch/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'CURL Search', 
    url: 'https://10.191.171.12:5443/EISInfra/curlSearch/index.php', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'CBS Port Monitoring', 
    url: 'https://10.191.171.12:5443/EIS/CBS_Connection/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'PR Load Balancer', 
    url: 'https://10.188.10.106:2443/login', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'DPG Url', 
    url: 'https://10.188.16.73:8443/', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  },
  { 
    name: 'IBM PMR CASE', 
    url: 'https://login.ibm.com/authvx/mtfim/sps/authvxv?PolicyId=...', 
    icon: '../src/assets/accountability.png',
    requiresAuth: false,
    type: 'external'
  },
  { 
    name: 'Ansible', 
    url: 'https://10.191.171.12:9443/#/login', 
    icon: '../src/assets/accountability.png',
    requiresAuth: true,
    type: 'internal'
  }
];

// 3. Enhanced link handler with URL-based authentication
export const handleLinkClick = (link, event) => {
  // If the link requires authentication and is internal, add auth parameters
  if (link.requiresAuth && link.type === 'internal') {
    if (!AuthService.isAuthenticated()) {
      event.preventDefault();
      alert('Please login to access this application');
      AuthService.redirectToLogin();
      return false;
    }
    
    // Generate authenticated URL
    const authenticatedUrl = AuthService.generateAuthenticatedUrl(link.url);
    if (authenticatedUrl) {
      event.preventDefault();
      window.open(authenticatedUrl, '_blank');
      AuthService.updateLoginTime();
      return false;
    }
  }
  
  // For external links or non-authenticated access, proceed normally
  return true;
};

// 4. SSO Integration Component
import React, { useState, useEffect } from 'react';
import { AuthService } from '../services/authService';

const SSOIntegration = ({ children }) => {
  const [ssoReady, setSsoReady] = useState(false);

  useEffect(() => {
    // Check for SSO token in URL parameters (for redirect back from login)
    const urlParams = new URLSearchParams(window.location.search);
    const ssoToken = urlParams.get('sso_token');
    const ssoUuid = urlParams.get('sso_uuid');
    const ssoUsername = urlParams.get('sso_username');

    if (ssoToken && ssoUuid && ssoUsername) {
      // Store SSO credentials
      AuthService.setAuthData({
        token: ssoToken,
        uuid: ssoUuid,
        username: ssoUsername
      });
      
      // Clean URL
      const cleanUrl = window.location.pathname;
      window.history.replaceState({}, document.title, cleanUrl);
      
      // Reload to apply authentication
      window.location.reload();
    } else {
      setSsoReady(true);
    }
  }, []);

  if (!ssoReady) {
    return <div>Initializing SSO...</div>;
  }

  return children;
};

export default SSOIntegration;

// 5. Enhanced Sidebar with URL-based authentication
import React, { useEffect, useState } from 'react';
import { Menu as MenuIcon, ChevronLeft, ChevronRight, Star, ExternalLink, Shield } from 'lucide-react';
import { cardLinks, handleLinkClick } from './CardLinks';
import { AuthService } from '../services/authService';
import '../styles/Menu.css';

const URLBasedSidebar = ({ darkMode, isSidebarOpen, setIsSidebarOpen }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [favorites, setFavorites] = useState([]);
  const [userId, setUserId] = useState(null);
  const [password, setPassword] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const toggleSidebar = () => setIsSidebarOpen(prev => !prev);

  // Check authentication status
  useEffect(() => {
    setIsAuthenticated(AuthService.isAuthenticated());
  }, []);

  // Get userId and password from localStorage on mount
  useEffect(() => {
    const authData = AuthService.getAuthData();
    const uid = localStorage.getItem('uidd') || authData.uuid;
    const pwd = localStorage.getItem('password');
    
    if (uid && pwd) {
      setUserId(uid);
      setPassword(pwd);
    }
  }, []);

  // Fetch favorites from backend
  useEffect(() => {
    if (!userId || !password) return;

    const fetchFavorites = async () => {
      try {
        const res = await fetch('/PyPortal/EISHome/postFavourites/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId, password }),
        });

        const data = await res.json();
        const favData = data.favourites;

        let favArray = [];
        if (Array.isArray(favData)) {
          favArray = favData;
        } else if (typeof favData === 'string') {
          favArray = favData.split(',').map(item => item.trim()).filter(Boolean);
        }

        setFavorites(favArray);
      } catch (err) {
        console.error('Failed to load favorites:', err);
      }
    };

    fetchFavorites();
  }, [userId, password]);

  // Update backend when favorites change
  const updateFavoritesOnBackend = async (updatedFavorites) => {
    try {
      await fetch('/PyPortal/EISHome/postFavourites/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId,
          password,
          favList: updatedFavorites,
        }),
      });
    } catch (error) {
      console.error('Failed to update favorites:', error);
    }
  };

  // Toggle favorite
  const toggleFavorite = (name) => {
    setFavorites((prev) => {
      const updated = prev.includes(name)
        ? prev.filter((fav) => fav !== name)
        : [...prev, name];
      updateFavoritesOnBackend(updated);
      return updated;
    });
  };

  // Enhanced link click handler
  const onLinkClick = (link, event) => {
    return handleLinkClick(link, event);
  };

  // Filter and sort links
  const filteredLinks = cardLinks
    .filter((link) => link.name.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => {
      const aFav = favorites.includes(a.name);
      const bFav = favorites.includes(b.name);
      return aFav === bFav ? 0 : aFav ? -1 : 1;
    });

  return (
    <>
      {!isSidebarOpen && (
        <button className="sidebar-toggle" onClick={toggleSidebar}>
          <MenuIcon size={24} />
        </button>
      )}

      <div className={`sidebar ${isSidebarOpen ? 'open' : 'collapsed'}`}>
        <div className="sidebar-header">
          {isSidebarOpen && <h2 className="sidebar-title">Quick Access</h2>}
          <button
            className="collapse-btn"
            onClick={toggleSidebar}
            aria-label={isSidebarOpen ? 'Collapse sidebar' : 'Expand sidebar'}
          >
            {isSidebarOpen ? <ChevronLeft size={20} /> : <ChevronRight size={20} />}
          </button>
        </div>

        {isSidebarOpen && (
          <div className="sidebar-search">
            <input
              type="text"
              placeholder="Search links..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          </div>
        )}

        <div className="sidebar-content">
          <div className="sidebar-section">
            {filteredLinks.map((link, index) => {
              const isFavorited = favorites.includes(link.name);
              const needsAuth = link.requiresAuth && !isAuthenticated;
              const isInternal = link.type === 'internal';
              
              return (
                <div key={index} className={`link-card ${needsAuth ? 'needs-auth' : ''}`}>
                  <div className="link-card-header">
                    <span
                      className="star-icon"
                      onClick={() => toggleFavorite(link.name)}
                      title={isFavorited ? 'Unstar' : 'Star'}
                    >
                      {isFavorited ? (
                        <Star fill="#facc15" color="#facc15" size={16} />
                      ) : (
                        <Star color="#fff" size={16} />
                      )}
                    </span>
                    
                    <div className="link-indicators">
                      {isInternal && (
                        <Shield color="#4ade80" size={12} title="Internal App" />
                      )}
                      {!isInternal && (
                        <ExternalLink color="#94a3b8" size={12} title="External App" />
                      )}
                    </div>
                  </div>
                  
                  <a
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="link-anchor"
                    onClick={(e) => onLinkClick(link, e)}
                    style={{ 
                      opacity: needsAuth ? 0.6 : 1,
                      pointerEvents: needsAuth ? 'none' : 'auto'
                    }}
                  >
                    {isSidebarOpen ? (
                      <div className="link-content">
                        <span className="link-name">{link.name}</span>
                        {needsAuth && (
                          <span className="auth-required">Login Required</span>
                        )}
                      </div>
                    ) : (
                      <img
                        src={link.icon}
                        alt={link.name}
                        title={`${link.name}${needsAuth ? ' (Login required)' : ''}`}
                        className="link-icon"
                      />
                    )}
                  </a>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </>
  );
};

export default URLBasedSidebar;






// 1. Enhanced Authentication Service (authService.js)
export class AuthService {
  static TOKEN_KEY = 'authToken';
  static UUID_KEY = 'userUUID';
  static USERNAME_KEY = 'username';
  static LOGIN_TIME_KEY = 'loginTime';
  static MAIN_APP_URL = 'https://your-main-app-domain.com'; // Replace with your main app URL
  
  // Check if user is authenticated
  static isAuthenticated() {
    const token = localStorage.getItem(this.TOKEN_KEY);
    const uuid = localStorage.getItem(this.UUID_KEY);
    const loginTime = localStorage.getItem(this.LOGIN_TIME_KEY);
    
    if (!token || !uuid || !loginTime) {
      return false;
    }
    
    // Check if token is expired (30 minutes)
    const currentTime = Date.now();
    const timeDiff = currentTime - parseInt(loginTime);
    const thirtyMinutes = 30 * 60 * 1000;
    
    if (timeDiff > thirtyMinutes) {
      this.logout();
      return false;
    }
    
    return true;
  }
  
  // Get authentication data
  static getAuthData() {
    return {
      token: localStorage.getItem(this.TOKEN_KEY),
      uuid: localStorage.getItem(this.UUID_KEY),
      username: localStorage.getItem(this.USERNAME_KEY),
      loginTime: localStorage.getItem(this.LOGIN_TIME_KEY)
    };
  }
  
  // Set authentication data
  static setAuthData(authData) {
    const { token, uuid, username } = authData;
    const currentTime = Date.now().toString();
    
    localStorage.setItem(this.TOKEN_KEY, token);
    localStorage.setItem(this.UUID_KEY, uuid);
    localStorage.setItem(this.USERNAME_KEY, username);
    localStorage.setItem(this.LOGIN_TIME_KEY, currentTime);
    
    // Also set in sessionStorage for backup
    sessionStorage.setItem(this.TOKEN_KEY, token);
    sessionStorage.setItem(this.UUID_KEY, uuid);
    sessionStorage.setItem(this.USERNAME_KEY, username);
    sessionStorage.setItem(this.LOGIN_TIME_KEY, currentTime);
  }
  
  // Update login time (for activity tracking)
  static updateLoginTime() {
    const currentTime = Date.now().toString();
    localStorage.setItem(this.LOGIN_TIME_KEY, currentTime);
    sessionStorage.setItem(this.LOGIN_TIME_KEY, currentTime);
  }
  
  // Logout and clear all data
  static logout() {
    // Clear localStorage
    localStorage.removeItem(this.TOKEN_KEY);
    localStorage.removeItem(this.UUID_KEY);
    localStorage.removeItem(this.USERNAME_KEY);
    localStorage.removeItem(this.LOGIN_TIME_KEY);
    
    // Clear sessionStorage
    sessionStorage.clear();
    
    // Clear cookies
    this.clearAllCookies();
    
    // Clear caches
    if ('caches' in window) {
      caches.keys().then((names) => {
        names.forEach(name => caches.delete(name));
      });
    }
  }
  
  // Clear all cookies
  static clearAllCookies() {
    const cookies = document.cookie.split(";");
    for (const cookie of cookies) {
      const eqPos = cookie.indexOf("=");
      const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
      
      const pathSegments = location.pathname.split('/');
      let path = '';
      for (let i = 0; i < pathSegments.length; i++) {
        path += (path.endsWith('/') ? '' : '/') + pathSegments[i];
        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=${path};`;
      }
    }
  }
  
  // Redirect to main app login
  static redirectToLogin() {
    const currentUrl = encodeURIComponent(window.location.href);
    window.location.href = `${this.MAIN_APP_URL}/login?redirect=${currentUrl}`;
  }
  
  // Validate token with backend
  static async validateToken() {
    const authData = this.getAuthData();
    if (!authData.token || !authData.uuid) return false;
    
    try {
      const response = await fetch('/api/validate-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authData.token}`
        },
        body: JSON.stringify({ uuid: authData.uuid })
      });
      
      if (response.ok) {
        const data = await response.json();
        return data.valid;
      }
      return false;
    } catch (error) {
      console.error('Token validation failed:', error);
      return false;
    }
  }
}

// 2. Authentication Guard Component (AuthGuard.jsx)
import React, { useEffect, useState } from 'react';
import { AuthService } from './authService';

const AuthGuard = ({ children, requireAuth = true }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      if (!requireAuth) {
        setIsAuthenticated(true);
        setIsLoading(false);
        return;
      }

      // Check local authentication first
      const localAuthValid = AuthService.isAuthenticated();
      
      if (!localAuthValid) {
        AuthService.redirectToLogin();
        return;
      }

      // Validate with backend
      try {
        const serverAuthValid = await AuthService.validateToken();
        if (serverAuthValid) {
          setIsAuthenticated(true);
          AuthService.updateLoginTime(); // Update activity timestamp
        } else {
          AuthService.logout();
          AuthService.redirectToLogin();
        }
      } catch (error) {
        console.error('Auth validation error:', error);
        AuthService.redirectToLogin();
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, [requireAuth]);

  if (isLoading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        fontSize: '18px'
      }}>
        Authenticating...
      </div>
    );
  }

  return isAuthenticated ? children : null;
};

export default AuthGuard;

// 3. Enhanced Login Component (Login.jsx)
import React, { useState, useEffect } from 'react';
import { AuthService } from '../services/authService';
import '../styles/Login.css';
import Header from './Header';
import Footer from './Footer';
import { postLogin } from "../api/loginApi";

function Login({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [darkMode, setDarkMode] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    // Check if user is already authenticated
    if (AuthService.isAuthenticated()) {
      const authData = AuthService.getAuthData();
      onLogin(authData.username);
    }
  }, [onLogin]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await postLogin(username, password);
      console.log('Login response:', response);

      if (response.data.status === 302) {
        // Store authentication data
        const authData = {
          token: response.data.token || 'default-token', // Ensure you get token from backend
          uuid: response.data.uuid || response.data.userId, // Get UUID from backend
          username: response.data.username
        };
        
        AuthService.setAuthData(authData);
        
        // Call parent component's onLogin function
        onLogin(response.data.username);
        
        // Check for redirect parameter
        const urlParams = new URLSearchParams(window.location.search);
        const redirectUrl = urlParams.get('redirect');
        if (redirectUrl) {
          window.location.href = decodeURIComponent(redirectUrl);
        }
      } else {
        setError('Invalid credentials');
      }
    } catch (error) {
      console.error('Login error:', error);
      if (error.response && error.response.data) {
        setError(error.response.data.Response || 'Login failed');
      } else {
        setError('Unable to connect to server');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={darkMode ? 'dark-mode' : ''}>
      <Header darkMode={darkMode} setDarkMode={setDarkMode} />
      <div className="login-container">
        <div className="bubble"></div>
        <div className="bubble"></div>
        <form className="login-form" onSubmit={handleSubmit}>
          <h2>Centralized Login</h2>
          {error && <div className="error-message">{error}</div>}
          <input
            type="text"
            placeholder="Username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <button type="submit" disabled={loading}>
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
      </div>
      <Footer />
    </div>
  );
}

export default Login;

// 4. Enhanced App.jsx with AuthGuard
import React, { useState, useEffect, useRef } from 'react';
import { AuthService } from './services/authService';
import AuthGuard from './components/AuthGuard';
import Header from './components/Header.jsx';
import Footer from './components/Footer';
import Menu from './components/Menu';
import Dashboard from './components/Dashboard';
import Chatbot from './components/ChatBot';
import Login from './components/Login';
import './App.css';

function App() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [chatbotMinimized, setChatbotMinimized] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [username, setUsername] = useState('');
  const inactivityTimer = useRef(null);

  const INACTIVITY_LIMIT = 30 * 60 * 1000; // 30 minutes

  useEffect(() => {
    // Check for existing authentication
    if (AuthService.isAuthenticated()) {
      const authData = AuthService.getAuthData();
      setUsername(authData.username);
      setIsLoggedIn(true);
    }
  }, []);

  const handleLogin = (user) => {
    setUsername(user);
    setIsLoggedIn(true);
  };

  const handleLogout = () => {
    AuthService.logout();
    setIsLoggedIn(false);
    setUsername('');
  };

  // Auto logout after inactivity
  useEffect(() => {
    if (!isLoggedIn) return;

    const resetInactivityTimer = () => {
      if (inactivityTimer.current) clearTimeout(inactivityTimer.current);
      inactivityTimer.current = setTimeout(() => {
        alert('You have been logged out due to 30 minutes of inactivity.');
        handleLogout();
      }, INACTIVITY_LIMIT);
      
      // Update activity timestamp
      AuthService.updateLoginTime();
    };

    const events = ['mousemove', 'keydown', 'mousedown', 'touchstart', 'scroll'];
    events.forEach(event =>
      window.addEventListener(event, resetInactivityTimer, true)
    );

    resetInactivityTimer();

    return () => {
      events.forEach(event =>
        window.removeEventListener(event, resetInactivityTimer, true)
      );
      if (inactivityTimer.current) clearTimeout(inactivityTimer.current);
    };
  }, [isLoggedIn]);

  if (!isLoggedIn) {
    return <Login onLogin={handleLogin} />;
  }

  return (
    <AuthGuard requireAuth={true}>
      <div>
        <Header
          darkMode={darkMode}
          setDarkMode={setDarkMode}
          username={username}
          onLogout={handleLogout}
        />
        {!chatbotMinimized && <div className="app-background" />}
        <div className={`main ${isSidebarOpen ? "sidebar-open" : "sidebar-collapsed"}`}>
          <Menu
            isSidebarOpen={isSidebarOpen}
            setIsSidebarOpen={setIsSidebarOpen}
          />
          <Dashboard isSidebarOpen={isSidebarOpen} />
          <Chatbot setChatbotMinimized={setChatbotMinimized} username={username} />
        </div>
        <Footer />
      </div>
    </AuthGuard>
  );
}

export default App;

// 5. URL-based Authentication Middleware (for server-side integration)
// This approach uses URL parameters and server-side checks instead of client-side scripts

// Express.js middleware example for Node.js applications
const authMiddleware = (req, res, next) => {
  const authToken = req.headers.authorization || req.query.auth_token;
  const userUUID = req.headers['x-user-uuid'] || req.query.user_uuid;
  
  if (!authToken || !userUUID) {
    const redirectUrl = encodeURIComponent(req.originalUrl);
    return res.redirect(`${process.env.MAIN_APP_URL}/login?redirect=${redirectUrl}`);
  }
  
  // Validate token with your main authentication service
  validateTokenWithMainApp(authToken, userUUID)
    .then(isValid => {
      if (isValid) {
        req.user = { uuid: userUUID, token: authToken };
        next();
      } else {
        const redirectUrl = encodeURIComponent(req.originalUrl);
        res.redirect(`${process.env.MAIN_APP_URL}/login?redirect=${redirectUrl}`);
      }
    })
    .catch(err => {
      console.error('Auth validation error:', err);
      const redirectUrl = encodeURIComponent(req.originalUrl);
      res.redirect(`${process.env.MAIN_APP_URL}/login?redirect=${redirectUrl}`);
    });
};

// Python/Django middleware example
class CentralizedAuthMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        auth_token = request.headers.get('Authorization') or request.GET.get('auth_token')
        user_uuid = request.headers.get('X-User-UUID') or request.GET.get('user_uuid')
        
        if not auth_token or not user_uuid:
            redirect_url = quote(request.get_full_path())
            main_app_url = settings.MAIN_APP_URL
            return HttpResponseRedirect(f"{main_app_url}/login?redirect={redirect_url}")
        
        # Validate with main app
        if not self.validate_token(auth_token, user_uuid):
            redirect_url = quote(request.get_full_path())
            main_app_url = settings.MAIN_APP_URL
            return HttpResponseRedirect(f"{main_app_url}/login?redirect={redirect_url}")
        
        request.user_uuid = user_uuid
        request.auth_token = auth_token
        
        response = self.get_response(request)
        return response
    
    def validate_token(self, token, uuid):
        try:
            # Make API call to main app to validate token
            response = requests.post(f"{settings.MAIN_APP_URL}/api/validate-token", 
                                   json={'token': token, 'uuid': uuid})
            return response.status_code == 200 and response.json().get('valid', False)
        except:
            return False
